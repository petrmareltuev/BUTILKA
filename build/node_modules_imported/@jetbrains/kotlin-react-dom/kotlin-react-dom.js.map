{"version":3,"file":"kotlin-react-dom.js","sources":["kotlin/collections.kt","generated/_Collections.kt","../../../../../kotlin-react-dom/src/main/kotlin/react/dom/RDOMBuilder.kt","../../../../../kotlin-extensions/src/main/kotlin/kotlinext/js/Helpers.kt","util/Preconditions.kt","../../../../../kotlin-react-dom/src/main/kotlin/react/dom/ReactDOM.kt","../../../../../kotlin-react-dom/src/main/kotlin/react/dom/ReactDOMAttributes.kt","collections/Maps.kt","util/Standard.kt","../../../../../kotlin-react-dom/src/main/kotlin/react/dom/ReactDOMTags.kt","kotlin/text/string.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal actual fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package react.dom\n\nimport kotlinext.js.*\nimport kotlinx.html.*\nimport org.w3c.dom.events.*\nimport react.*\n\nclass InnerHTML(\n    val __html: String\n)\n\nexternal interface WithClassName : RProps {\n    var className: String?\n}\n\nexternal interface DOMProps : WithClassName {\n    var dangerouslySetInnerHTML: InnerHTML?\n}\n\nopen class RDOMBuilder<out T : Tag>(factory: (TagConsumer<Unit>) -> T) : RBuilder() {\n    fun setProp(attribute: String, value: Any?) {\n        val key = fixAttributeName(attribute)\n        props.asDynamic()[key] = value\n    }\n\n    val consumer = object : TagConsumer<Unit> {\n        override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n            setProp(attribute, value)\n        }\n\n        override fun onTagComment(content: CharSequence) {\n            throw IllegalStateException(\"Comments are not supported\")\n        }\n\n        override fun onTagContent(content: CharSequence) {\n            childList.add(content)\n        }\n\n        override fun onTagContentEntity(entity: Entities) {\n            childList.add(entity.text)\n        }\n\n        override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n            val sb = StringBuilder()\n            object : Unsafe {\n                override fun String.unaryPlus() {\n                    sb.append(this)\n                }\n            }.block()\n            props.dangerouslySetInnerHTML = InnerHTML(sb.toString())\n        }\n\n        override fun onTagStart(tag: Tag) {\n            throw IllegalStateException(\"Don't nest tags inside props block\")\n        }\n\n        override fun onTagEnd(tag: Tag) {\n            throw IllegalStateException(\"Don't nest tags inside props block\")\n        }\n\n        override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n            setProp(event, value)\n        }\n\n        override fun finalize() {}\n    }\n\n    val attrs: T = factory(consumer)\n\n    operator fun Tag.get(name: String) = props.asDynamic()[name]\n    operator fun Tag.set(name: String, value: Any) {\n        props.asDynamic()[name] = value\n    }\n\n    // See https://facebook.github.io/react/docs/forms.html\n    var INPUT.defaultChecked: Boolean\n        get() = this[\"defaultChecked\"] ?: false\n        set(value) {\n            this[\"defaultChecked\"] = value\n        }\n\n    var SELECT.values: Set<String>\n        get() {\n            val valuesArr: Array<String> = this[\"value\"] ?: arrayOf()\n            return valuesArr.toSet()\n        }\n        set(value) {\n            this[\"value\"] = value.toTypedArray()\n        }\n\n    var SELECT.value: String\n        get() = \"\"\n        set(value) {\n            values = setOf(value)\n        }\n\n    protected val props: DOMProps = jsObject()\n\n    init {\n        attrs.attributesEntries.forEach { setProp(it.key, it.value) }\n    }\n\n    inline fun attrs(handler: T.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        @Deprecated(message = \"Write-only property\", level = DeprecationLevel.HIDDEN)\n        get() = error(\"\")\n        set(value) {\n            props.key = value\n        }\n\n    var ref: RRef\n        @Deprecated(message = \"Write-only property\", level = DeprecationLevel.HIDDEN)\n        get() = error(\"\")\n        set(value) {\n            props.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        props.ref(handler)\n    }\n\n    open fun create(): ReactElement = createElement(attrs.tagName, props, *childList.toTypedArray())\n}\n\n\n","package kotlinext.js\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninline fun <T : Any> jsObject(): T =\n    js(\"({})\")\n\ninline fun <T : Any> jsObject(builder: T.() -> Unit): T =\n    jsObject<T>().apply(builder)\n\ninline fun js(builder: dynamic.() -> Unit): dynamic = jsObject(builder)\n\nfun <T : Any> clone(obj: T) = Object.assign(jsObject(), obj)\n\ninline fun <T : Any> assign(obj: T, builder: T.() -> Unit) = clone(obj).apply(builder)\n\nfun toPlainObjectStripNull(obj: Any) = js {\n    for (key in Object.keys(obj)) {\n        val value = obj.asDynamic()[key]\n        if (value != null) this[key] = value\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","package react.dom\n\nimport org.w3c.dom.*\nimport react.*\n\nfun render(container: Element?, callback: () -> Unit = {}, handler: RBuilder.() -> Unit) =\n    render(buildElements(handler), container, callback)\n\nfun hydrate(container: Element?, callback: () -> Unit = {}, handler: RBuilder.() -> Unit) =\n    hydrate(buildElements(handler), container, callback)\n\nfun createPortal(container: Element?, handler: RBuilder.() -> Unit) =\n    createPortal(buildElements(handler), container)\n","package react.dom\n\nimport kotlinext.js.*\nimport kotlinx.html.*\nimport kotlin.reflect.*\n\nprivate val events = listOf(\n    \"onCopy\",\n    \"onCut\",\n    \"onPaste\",\n    \"onCompositionEnd\",\n    \"onCompositionStart\",\n    \"onCompositionUpdate\",\n    \"onKeyDown\",\n    \"onKeyPress\",\n    \"onKeyUp\",\n    \"onFocus\",\n    \"onBlur\",\n    \"onChange\",\n    \"onInput\",\n    \"onSubmit\",\n    \"onClick\",\n    \"onContextMenu\",\n    \"onDoubleClick\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onDragEnter\",\n    \"onDragExit\",\n    \"onDragLeave\",\n    \"onDragOver\",\n    \"onDragStart\",\n    \"onDrop\",\n    \"onMouseDown\",\n    \"onMouseEnter\",\n    \"onMouseLeave\",\n    \"onMouseMove\",\n    \"onMouseOut\",\n    \"onMouseOver\",\n    \"onMouseUp\",\n    \"onSelect\",\n    \"onTouchCancel\",\n    \"onTouchEnd\",\n    \"onTouchMove\",\n    \"onTouchStart\",\n    \"onScroll\",\n    \"onWheel\",\n    \"onAbort\",\n    \"onCanPlay\",\n    \"onCanPlayThrough\",\n    \"onDurationChange\",\n    \"onEmptied\",\n    \"onEncrypted\",\n    \"onEnded\",\n    \"onError\",\n    \"onLoadedData\",\n    \"onLoadedMetadata\",\n    \"onLoadStart\",\n    \"onPause\",\n    \"onPlay\",\n    \"onPlaying\",\n    \"onProgress\",\n    \"onRateChange\",\n    \"onSeeked\",\n    \"onSeeking\",\n    \"onStalled\",\n    \"onSuspend\",\n    \"onTimeUpdate\",\n    \"onVolumeChange\",\n    \"onWaiting\",\n    \"onLoad\",\n    \"onError\",\n    \"onAnimationStart\",\n    \"onAnimationEnd\",\n    \"onAnimationIteration\",\n    \"onTransitionEnd\",\n\n\n    // HTML attributes\n    \"accept\",\n    \"acceptCharset\",\n    \"accessKey\",\n    \"action\",\n    \"allowFullScreen\",\n    \"allowTransparency\",\n    \"alt\",\n    \"async\",\n    \"autoComplete\",\n    \"autoFocus\",\n    \"autoPlay\",\n    \"capture\",\n    \"cellPadding\",\n    \"cellSpacing\",\n    \"challenge\",\n    \"charSet\",\n    \"checked\",\n    \"cite\",\n    \"classID\",\n    \"className\",\n    \"colSpan\",\n    \"cols\",\n    \"content\",\n    \"contentEditable\",\n    \"contextMenu\",\n    \"controls\",\n    \"coords\",\n    \"crossOrigin\",\n    \"data\",\n    \"dateTime\",\n    \"default\",\n    \"defer\",\n    \"dir\",\n    \"disabled\",\n    \"download\",\n    \"draggable\",\n    \"encType\",\n    \"form\",\n    \"formAction\",\n    \"formEncType\",\n    \"formMethod\",\n    \"formNoValidate\",\n    \"formTarget\",\n    \"frameBorder\",\n    \"headers\",\n    \"height\",\n    \"hidden\",\n    \"high\",\n    \"href\",\n    \"hrefLang\",\n    \"htmlFor\",\n    \"httpEquiv\",\n    \"icon\",\n    \"id\",\n    \"inputMode\",\n    \"integrity\",\n    \"is\",\n    \"keyParams\",\n    \"keyType\",\n    \"kind\",\n    \"label\",\n    \"lang\",\n    \"list\",\n    \"loop\",\n    \"low\",\n    \"manifest\",\n    \"marginHeight\",\n    \"marginWidth\",\n    \"max\",\n    \"maxLength\",\n    \"media\",\n    \"mediaGroup\",\n    \"method\",\n    \"min\",\n    \"minLength\",\n    \"multiple\",\n    \"muted\",\n    \"name\",\n    \"noValidate\",\n    \"nonce\",\n    \"open\",\n    \"optimum\",\n    \"pattern\",\n    \"placeholder\",\n    \"poster\",\n    \"preload\",\n    \"profile\",\n    \"radioGroup\",\n    \"readOnly\",\n    \"rel\",\n    \"required\",\n    \"reversed\",\n    \"role\",\n    \"rowSpan\",\n    \"rows\",\n    \"sandbox\",\n    \"scope\",\n    \"scoped\",\n    \"scrolling\",\n    \"seamless\",\n    \"selected\",\n    \"shape\",\n    \"size\",\n    \"sizes\",\n    \"span\",\n    \"spellCheck\",\n    \"src\",\n    \"srcDoc\",\n    \"srcLang\",\n    \"srcSet\",\n    \"start\",\n    \"step\",\n    \"style\",\n    \"summary\",\n    \"tabIndex\",\n    \"target\",\n    \"title\",\n    \"type\",\n    \"useMap\",\n    \"value\",\n    \"width\",\n    \"wmode\",\n    \"wrap\"\n)\n\nprivate val attrsMap = events.map { it.toLowerCase() to it }.toMap().toMutableMap().apply {\n    put(\"class\", \"className\")\n    put(\"ondblclick\", \"onDoubleClick\")\n}\n\nfun fixAttributeName(event: String): String = attrsMap[event] ?: event\n\nobject StringAttr {\n    operator fun getValue(thisRef: Tag, property: KProperty<*>): String =\n        thisRef.attributes[property.name] ?: \"\"\n\n    operator fun setValue(thisRef: Tag, property: KProperty<*>, value: String) {\n        thisRef.attributes[property.name] = value\n    }\n}\n\nvar Tag.key by StringAttr\n\n// See https://facebook.github.io/react/docs/forms.html\nvar INPUT.defaultValue by StringAttr\n\nvar TEXTAREA.defaultValue by StringAttr\n\nvar TEXTAREA.value by StringAttr\n\nvar Tag.jsStyle: dynamic\n    get() {\n        val value = attributes[\"style\"] ?: js {}\n        jsStyle = value\n        return value\n    }\n    set(value) {\n        attributes[\"style\"] = value\n    }\n\ninline fun Tag.jsStyle(handler: dynamic.() -> Unit) =\n    handler(jsStyle)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","@file:Suppress(\"NOTHING_TO_INLINE\")\n\npackage react.dom\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\nimport react.*\n\ninline fun <T : Tag> RBuilder.tag(block: RDOMBuilder<T>.() -> Unit, noinline factory: (TagConsumer<Unit>) -> T): ReactElement =\n    child(RDOMBuilder(factory).apply {\n        block()\n    }.create())\n\ninline fun RBuilder.a(href: String? = null, target: String? = null, classes: String? = null, block: RDOMBuilder<A>.() -> Unit): ReactElement =\n    tag(block) { A(attributesMapOf(\"href\", href, \"target\", target, \"class\", classes), it) }\n\ninline fun RBuilder.abbr(classes: String? = null, block: RDOMBuilder<ABBR>.() -> Unit): ReactElement = tag(block) { ABBR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.address(classes: String? = null, block: RDOMBuilder<ADDRESS>.() -> Unit): ReactElement = tag(block) { ADDRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.area(shape: AreaShape? = null, alt: String? = null, classes: String? = null, block: RDOMBuilder<AREA>.() -> Unit): ReactElement =\n    tag(block) { AREA(attributesMapOf(\"Shape\", shape?.enumEncode(), \"alt\", alt, \"class\", classes), it) }\n\ninline fun RBuilder.article(classes: String? = null, block: RDOMBuilder<ARTICLE>.() -> Unit): ReactElement = tag(block) { ARTICLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.aside(classes: String? = null, block: RDOMBuilder<ASIDE>.() -> Unit): ReactElement = tag(block) { ASIDE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.audio(classes: String? = null, block: RDOMBuilder<AUDIO>.() -> Unit): ReactElement = tag(block) { AUDIO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.b(classes: String? = null, block: RDOMBuilder<B>.() -> Unit): ReactElement = tag(block) { B(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.base(classes: String? = null, block: RDOMBuilder<BASE>.() -> Unit): ReactElement = tag(block) { BASE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdi(classes: String? = null, block: RDOMBuilder<BDI>.() -> Unit): ReactElement = tag(block) { BDI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdo(classes: String? = null, block: RDOMBuilder<BDO>.() -> Unit): ReactElement = tag(block) { BDO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.blockQuote(classes: String? = null, block: RDOMBuilder<BLOCKQUOTE>.() -> Unit): ReactElement = tag(block) { BLOCKQUOTE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.body(classes: String? = null, block: RDOMBuilder<BODY>.() -> Unit): ReactElement = tag(block) { BODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.br(classes: String? = null, block: RDOMBuilder<BR>.() -> Unit): ReactElement = tag(block) { BR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.button(\n    formEncType: ButtonFormEncType? = null,\n    formMethod: ButtonFormMethod? = null,\n    type: ButtonType? = null,\n    classes: String? = null,\n    block: RDOMBuilder<BUTTON>.() -> Unit\n): ReactElement = tag(block) { BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.canvas(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { CANVAS(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.canvas(classes: String? = null, block: RDOMBuilder<CANVAS>.() -> Unit): ReactElement = tag(block) { CANVAS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.caption(classes: String? = null, block: RDOMBuilder<CAPTION>.() -> Unit): ReactElement = tag(block) { CAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.cite(classes: String? = null, block: RDOMBuilder<CITE>.() -> Unit): ReactElement = tag(block) { CITE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.code(classes: String? = null, block: RDOMBuilder<CODE>.() -> Unit): ReactElement = tag(block) { CODE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.col(classes: String? = null, block: RDOMBuilder<COL>.() -> Unit): ReactElement = tag(block) { COL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.colGroup(classes: String? = null, block: RDOMBuilder<COLGROUP>.() -> Unit): ReactElement = tag(block) { COLGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.command(type: CommandType? = null, classes: String? = null, block: RDOMBuilder<COMMAND>.() -> Unit): ReactElement =\n    tag(block) { COMMAND(attributesMapOf(\"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.dataList(classes: String? = null, block: RDOMBuilder<DATALIST>.() -> Unit): ReactElement = tag(block) { DATALIST(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dd(classes: String? = null, block: RDOMBuilder<DD>.() -> Unit): ReactElement = tag(block) { DD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.del(classes: String? = null, block: RDOMBuilder<DEL>.() -> Unit): ReactElement = tag(block) { DEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.details(classes: String? = null, block: RDOMBuilder<DETAILS>.() -> Unit): ReactElement = tag(block) { DETAILS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dfn(classes: String? = null, block: RDOMBuilder<DFN>.() -> Unit): ReactElement = tag(block) { DFN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dialog(classes: String? = null, block: RDOMBuilder<DIALOG>.() -> Unit): ReactElement = tag(block) { DIALOG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.div(classes: String? = null, block: RDOMBuilder<DIV>.() -> Unit): ReactElement = tag(block) { DIV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dl(classes: String? = null, block: RDOMBuilder<DL>.() -> Unit): ReactElement = tag(block) { DL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dt(classes: String? = null, block: RDOMBuilder<DT>.() -> Unit): ReactElement = tag(block) { DT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.em(classes: String? = null, block: RDOMBuilder<EM>.() -> Unit): ReactElement = tag(block) { EM(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.embed(classes: String? = null, block: RDOMBuilder<EMBED>.() -> Unit): ReactElement = tag(block) { EMBED(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.fieldSet(classes: String? = null, block: RDOMBuilder<FIELDSET>.() -> Unit): ReactElement = tag(block) { FIELDSET(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figcaption(classes: String? = null, block: RDOMBuilder<FIGCAPTION>.() -> Unit): ReactElement = tag(block) { FIGCAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figure(classes: String? = null, block: RDOMBuilder<FIGURE>.() -> Unit): ReactElement = tag(block) { FIGURE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.footer(classes: String? = null, block: RDOMBuilder<FOOTER>.() -> Unit): ReactElement = tag(block) { FOOTER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.form(action: String? = null, encType: FormEncType? = null, method: FormMethod? = null, classes: String? = null, block: RDOMBuilder<FORM>.() -> Unit): ReactElement =\n    tag(block) { FORM(attributesMapOf(\"action\", action, \"enctype\", encType?.enumEncode(), \"method\", method?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.h1(classes: String? = null, block: RDOMBuilder<H1>.() -> Unit): ReactElement = tag(block) { H1(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h2(classes: String? = null, block: RDOMBuilder<H2>.() -> Unit): ReactElement = tag(block) { H2(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h3(classes: String? = null, block: RDOMBuilder<H3>.() -> Unit): ReactElement = tag(block) { H3(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h4(classes: String? = null, block: RDOMBuilder<H4>.() -> Unit): ReactElement = tag(block) { H4(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h5(classes: String? = null, block: RDOMBuilder<H5>.() -> Unit): ReactElement = tag(block) { H5(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h6(classes: String? = null, block: RDOMBuilder<H6>.() -> Unit): ReactElement = tag(block) { H6(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.head(block: RDOMBuilder<HEAD>.() -> Unit): ReactElement = tag(block) { HEAD(emptyMap, it) }\n\ninline fun RBuilder.header(classes: String? = null, block: RDOMBuilder<HEADER>.() -> Unit): ReactElement = tag(block) { HEADER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hGroup(classes: String? = null, block: RDOMBuilder<HGROUP>.() -> Unit): ReactElement = tag(block) { HGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hr(classes: String? = null, block: RDOMBuilder<HR>.() -> Unit): ReactElement = tag(block) { HR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.html(block: RDOMBuilder<HTML>.() -> Unit): ReactElement = tag(block) { HTML(emptyMap, it) }\n\ninline fun RBuilder.i(classes: String? = null, block: RDOMBuilder<I>.() -> Unit): ReactElement = tag(block) { I(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, content: String = \"\"): ReactElement =\n    tag({ +content }) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, block: RDOMBuilder<IFRAME>.() -> Unit): ReactElement =\n    tag(block) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.img(alt: String? = null, src: String? = null, classes: String? = null, block: RDOMBuilder<IMG>.() -> Unit): ReactElement =\n    tag(block) { IMG(attributesMapOf(\"alt\", alt, \"src\", src, \"class\", classes), it) }\n\ninline fun RBuilder.input(\n    type: InputType? = null,\n    formEncType: InputFormEncType? = null,\n    formMethod: InputFormMethod? = null,\n    name: String? = null,\n    classes: String? = null,\n    block: RDOMBuilder<INPUT>.() -> Unit\n): ReactElement =\n    tag(block) { INPUT(attributesMapOf(\"type\", type?.enumEncode(), \"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.ins(classes: String? = null, block: RDOMBuilder<INS>.() -> Unit): ReactElement = tag(block) { INS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.kbd(classes: String? = null, block: RDOMBuilder<KBD>.() -> Unit): ReactElement = tag(block) { KBD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.keyGen(keyType: KeyGenKeyType? = null, classes: String? = null, block: RDOMBuilder<KEYGEN>.() -> Unit): ReactElement =\n    tag(block) { KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.label(classes: String? = null, block: RDOMBuilder<LABEL>.() -> Unit): ReactElement = tag(block) { LABEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.legend(classes: String? = null, block: RDOMBuilder<LEGEND>.() -> Unit): ReactElement = tag(block) { LEGEND(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.li(classes: String? = null, block: RDOMBuilder<LI>.() -> Unit): ReactElement = tag(block) { LI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.link(href: String? = null, rel: String? = null, type: String? = null, block: RDOMBuilder<LINK>.() -> Unit): ReactElement =\n    tag(block) { LINK(attributesMapOf(\"href\", href, \"rel\", rel, \"type\", type), it) }\n\ninline fun RBuilder.main(classes: String? = null, block: RDOMBuilder<MAIN>.() -> Unit): ReactElement = tag(block) { MAIN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.map(name: String? = null, classes: String? = null, block: RDOMBuilder<MAP>.() -> Unit): ReactElement = tag(block) { MAP(attributesMapOf(\"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.mark(classes: String? = null, block: RDOMBuilder<MARK>.() -> Unit): ReactElement = tag(block) { MARK(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.math(classes: String? = null, block: RDOMBuilder<MATH>.() -> Unit): ReactElement = tag(block) { MATH(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.mathml(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { MATHML(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.mathml(classes: String? = null, block: RDOMBuilder<MATHML>.() -> Unit): ReactElement = tag(block) { MATHML(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.meta(name: String? = null, content: String? = null, block: RDOMBuilder<META>.() -> Unit): ReactElement = tag(block) { META(attributesMapOf(\"name\", name, \"content\", content), it) }\n\ninline fun RBuilder.meter(classes: String? = null, block: RDOMBuilder<METER>.() -> Unit): ReactElement = tag(block) { METER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.nav(classes: String? = null, block: RDOMBuilder<NAV>.() -> Unit): ReactElement = tag(block) { NAV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.noScript(classes: String? = null, block: RDOMBuilder<NOSCRIPT>.() -> Unit): ReactElement = tag(block) { NOSCRIPT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.object_(classes: String? = null, block: RDOMBuilder<OBJECT>.() -> Unit): ReactElement = tag(block) { OBJECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ol(classes: String? = null, block: RDOMBuilder<OL>.() -> Unit): ReactElement = tag(block) { OL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.optGroup(label: String? = null, classes: String? = null, block: RDOMBuilder<OPTGROUP>.() -> Unit): ReactElement =\n    tag(block) { OPTGROUP(attributesMapOf(\"label\", label, \"class\", classes), it) }\n\ninline fun RBuilder.option(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { OPTION(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.option(classes: String? = null, block: RDOMBuilder<OPTION>.() -> Unit): ReactElement = tag(block) { OPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.output(classes: String? = null, block: RDOMBuilder<OUTPUT>.() -> Unit): ReactElement = tag(block) { OUTPUT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.p(classes: String? = null, block: RDOMBuilder<P>.() -> Unit): ReactElement = tag(block) { P(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.param(name: String? = null, value: String? = null, block: RDOMBuilder<PARAM>.() -> Unit): ReactElement = tag(block) { PARAM(attributesMapOf(\"name\", name, \"value\", value), it) }\n\ninline fun RBuilder.pre(classes: String? = null, block: RDOMBuilder<PRE>.() -> Unit): ReactElement = tag(block) { PRE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.progress(classes: String? = null, block: RDOMBuilder<PROGRESS>.() -> Unit): ReactElement = tag(block) { PROGRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.q(classes: String? = null, block: RDOMBuilder<Q>.() -> Unit): ReactElement = tag(block) { Q(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rp(classes: String? = null, block: RDOMBuilder<RP>.() -> Unit): ReactElement = tag(block) { RP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rt(classes: String? = null, block: RDOMBuilder<RT>.() -> Unit): ReactElement = tag(block) { RT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ruby(classes: String? = null, block: RDOMBuilder<RUBY>.() -> Unit): ReactElement = tag(block) { RUBY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.samp(classes: String? = null, block: RDOMBuilder<SAMP>.() -> Unit): ReactElement = tag(block) { SAMP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.script(type: String? = null, src: String? = null, block: RDOMBuilder<SCRIPT>.() -> Unit): ReactElement = tag(block) { SCRIPT(attributesMapOf(\"type\", type, \"src\", src), it) }\n\ninline fun RBuilder.section(classes: String? = null, block: RDOMBuilder<SECTION>.() -> Unit): ReactElement = tag(block) { SECTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.select(classes: String? = null, block: RDOMBuilder<SELECT>.() -> Unit): ReactElement = tag(block) { SELECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.small(classes: String? = null, block: RDOMBuilder<SMALL>.() -> Unit): ReactElement = tag(block) { SMALL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.source(classes: String? = null, block: RDOMBuilder<SOURCE>.() -> Unit): ReactElement = tag(block) { SOURCE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.span(classes: String? = null, block: RDOMBuilder<SPAN>.() -> Unit): ReactElement = tag(block) { SPAN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.strong(classes: String? = null, block: RDOMBuilder<STRONG>.() -> Unit): ReactElement = tag(block) { STRONG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.style(type: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { STYLE(attributesMapOf(\"type\", type), it) }\ninline fun RBuilder.style(type: String? = null, block: RDOMBuilder<STYLE>.() -> Unit): ReactElement = tag(block) { STYLE(attributesMapOf(\"type\", type), it) }\n\ninline fun RBuilder.sub(classes: String? = null, block: RDOMBuilder<SUB>.() -> Unit): ReactElement = tag(block) { SUB(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.sup(classes: String? = null, block: RDOMBuilder<SUP>.() -> Unit): ReactElement = tag(block) { SUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.svg(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { SVG(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.svg(classes: String? = null, block: RDOMBuilder<SVG>.() -> Unit): ReactElement = tag(block) { SVG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.table(classes: String? = null, block: RDOMBuilder<TABLE>.() -> Unit): ReactElement = tag(block) { TABLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.tbody(classes: String? = null, block: RDOMBuilder<TBODY>.() -> Unit): ReactElement = tag(block) { TBODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.td(classes: String? = null, block: RDOMBuilder<TD>.() -> Unit): ReactElement = tag(block) { TD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, content: String = \"\"): ReactElement =\n    tag({ +content }) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, block: RDOMBuilder<TEXTAREA>.() -> Unit): ReactElement =\n    tag(block) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.tfoot(classes: String? = null, block: RDOMBuilder<TFOOT>.() -> Unit): ReactElement = tag(block) { TFOOT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.th(scope: ThScope? = null, classes: String? = null, block: RDOMBuilder<TH>.() -> Unit): ReactElement =\n    tag(block) { TH(attributesMapOf(\"scope\", scope?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.thead(classes: String? = null, block: RDOMBuilder<THEAD>.() -> Unit): ReactElement = tag(block) { THEAD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.time(classes: String? = null, block: RDOMBuilder<TIME>.() -> Unit): ReactElement = tag(block) { TIME(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.title(content: String = \"\"): ReactElement = tag({ +content }) { TITLE(emptyMap, it) }\ninline fun RBuilder.title(block: RDOMBuilder<TITLE>.() -> Unit): ReactElement = tag(block) { TITLE(emptyMap, it) }\n\ninline fun RBuilder.tr(classes: String? = null, block: RDOMBuilder<TR>.() -> Unit): ReactElement = tag(block) { TR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ul(classes: String? = null, block: RDOMBuilder<UL>.() -> Unit): ReactElement = tag(block) { UL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.var_(classes: String? = null, block: RDOMBuilder<VAR>.() -> Unit): ReactElement = tag(block) { VAR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.video(classes: String? = null, block: RDOMBuilder<VIDEO>.() -> Unit): ReactElement = tag(block) { VIDEO(attributesMapOf(\"class\", classes), it) }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n"],"names":[],"mappings":"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"}