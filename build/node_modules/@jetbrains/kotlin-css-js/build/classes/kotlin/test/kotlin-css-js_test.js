if (typeof kotlin === 'undefined') {
  throw new Error("Error loading module 'kotlin-css-js_test'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlin-css-js_test'.");
}
if (typeof this['kotlin-css-js'] === 'undefined') {
  throw new Error("Error loading module 'kotlin-css-js_test'. Its dependency 'kotlin-css-js' was not found. Please, check whether 'kotlin-css-js' is loaded prior to 'kotlin-css-js_test'.");
}
if (typeof this['kotlin-test'] === 'undefined') {
  throw new Error("Error loading module 'kotlin-css-js_test'. Its dependency 'kotlin-test' was not found. Please, check whether 'kotlin-test' is loaded prior to 'kotlin-css-js_test'.");
}
this['kotlin-css-js_test'] = function (_, Kotlin, $module$kotlin_css_js, $module$kotlin_test) {
  'use strict';
  var Color = $module$kotlin_css_js.kotlinx.css.Color;
  var test = $module$kotlin_test.kotlin.test;
  var blackAlpha = $module$kotlin_css_js.kotlinx.css.blackAlpha_14dthe$;
  var whiteAlpha = $module$kotlin_css_js.kotlinx.css.whiteAlpha_14dthe$;
  var rgb = $module$kotlin_css_js.kotlinx.css.rgb_qt1dr2$;
  var rgba = $module$kotlin_css_js.kotlinx.css.rgba_gb4hak$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var test_0 = $module$kotlin_test.kotlin.test.test;
  var suite = $module$kotlin_test.kotlin.test.suite;
  var CSSBuilder = $module$kotlin_css_js.kotlinx.css.CSSBuilder;
  var GridAutoColumns = $module$kotlin_css_js.kotlinx.css.GridAutoColumns;
  var set_gridAutoColumns = $module$kotlin_css_js.kotlinx.css.set_gridAutoColumns_32ukpq$;
  var Unit = Kotlin.kotlin.Unit;
  var ruleSet = $module$kotlin_css_js.kotlinx.css.ruleSet_sa4rfh$;
  var trimIndent = Kotlin.kotlin.text.trimIndent_pdl1vz$;
  var get_fr = $module$kotlin_css_js.kotlinx.css.get_fr_rcaex3$;
  var get_px = $module$kotlin_css_js.kotlinx.css.get_px_rcaex3$;
  var GridAutoColumns_init = $module$kotlin_css_js.kotlinx.css.GridAutoColumns_init_onxlus$;
  var GridAutoFlow = $module$kotlin_css_js.kotlinx.css.GridAutoFlow;
  var set_gridAutoFlow = $module$kotlin_css_js.kotlinx.css.set_gridAutoFlow_kboskz$;
  var GridAutoRows = $module$kotlin_css_js.kotlinx.css.GridAutoRows;
  var set_gridAutoRows = $module$kotlin_css_js.kotlinx.css.set_gridAutoRows_kbh2bs$;
  var GridAutoRows_init = $module$kotlin_css_js.kotlinx.css.GridAutoRows_init_onxlus$;
  var GridTemplateRows = $module$kotlin_css_js.kotlinx.css.GridTemplateRows;
  var set_gridTemplateRows = $module$kotlin_css_js.kotlinx.css.set_gridTemplateRows_lgsgub$;
  function TestColor() {
  }
  TestColor.prototype.testParseRGB = function () {
    var color = new Color('rgb(123, 45, 67)');
    var rgb = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed RGB red value is incorrect', 123, rgb.red);
    test.asserter.assertEquals_lzc6tz$('Parsed RGB green value is incorrect', 45, rgb.green);
    test.asserter.assertEquals_lzc6tz$('Parsed RGB blue value is incorrect', 67, rgb.blue);
  };
  TestColor.prototype.testParseRGB2 = function () {
    var color = new Color('rgb(123   45 ,  67)');
    var rgb = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed RGB red value is incorrect', 123, rgb.red);
    test.asserter.assertEquals_lzc6tz$('Parsed RGB green value is incorrect', 45, rgb.green);
    test.asserter.assertEquals_lzc6tz$('Parsed RGB blue value is incorrect', 67, rgb.blue);
  };
  TestColor.prototype.testParseRGB3 = function () {
    var color = new Color('rgb(100%, 33%, 40%)');
    var rgb = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed RGB red value is incorrect', 255, rgb.red);
    test.asserter.assertEquals_lzc6tz$('Parsed RGB green value is incorrect', 84, rgb.green);
    test.asserter.assertEquals_lzc6tz$('Parsed RGB blue value is incorrect', 102, rgb.blue);
  };
  TestColor.prototype.testParseRGBa = function () {
    var color = new Color('rgba(123, 45, 67, 0.8)');
    var rgba = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa red value is incorrect', 123, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa green value is incorrect', 45, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa blue value is incorrect', 67, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa alpha/opacity value is incorrect', 0.8, rgba.alpha);
  };
  TestColor.prototype.testParseRGBa_ValueCapping = function () {
    var color = new Color('rgba(300, 45, 67, 1.8)');
    var rgba = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa red value is incorrect', 255, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa green value is incorrect', 45, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa blue value is incorrect', 67, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa alpha/opacity value is incorrect', 1.0, rgba.alpha);
  };
  TestColor.prototype.testParseHSL = function () {
    var color = new Color('hsl(100, 100%, 50%)');
    var hsl = color.fromHSLANotation_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed HSL hue value is incorrect', 100, hsl.hue);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL saturation value is incorrect', 100, hsl.saturation);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL lightness value is incorrect', 50, hsl.lightness);
  };
  TestColor.prototype.testParseHSL_Turn = function () {
    var color = new Color('hsl(1.25turn, 100%, 50%)');
    var hsl = color.fromHSLANotation_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed HSL hue value is incorrect', 90, hsl.hue);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL saturation value is incorrect', 100, hsl.saturation);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL lightness value is incorrect', 50, hsl.lightness);
  };
  TestColor.prototype.testParseHSL_Grad = function () {
    var color = new Color('hsl(100grad, 100%, 50%)');
    var hsl = color.fromHSLANotation_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed HSL hue value is incorrect', 90, hsl.hue);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL saturation value is incorrect', 100, hsl.saturation);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL lightness value is incorrect', 50, hsl.lightness);
  };
  TestColor.prototype.testParseHSL_Rad = function () {
    var color = new Color('hsl(1.5708rad, 100%, 50%)');
    var hsl = color.fromHSLANotation_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed HSL hue value is incorrect', 90, hsl.hue);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL saturation value is incorrect', 100, hsl.saturation);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL lightness value is incorrect', 50, hsl.lightness);
  };
  TestColor.prototype.testParseHSL_Deg = function () {
    var color = new Color('hsl(90deg, 100%, 50%)');
    var hsl = color.fromHSLANotation_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed HSL hue value is incorrect', 90, hsl.hue);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL saturation value is incorrect', 100, hsl.saturation);
    test.asserter.assertEquals_lzc6tz$('Parsed HSL lightness value is incorrect', 50, hsl.lightness);
  };
  TestColor.prototype.testParseHSLa = function () {
    var color = new Color('hsla(100, 100%, 50%, 0.8)');
    var hsla = color.fromHSLANotation_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Parsed HSLa hue value is incorrect', 100, hsla.hue);
    test.asserter.assertEquals_lzc6tz$('Parsed HSLa saturation value is incorrect', 100, hsla.saturation);
    test.asserter.assertEquals_lzc6tz$('Parsed HSLa lightness value is incorrect', 50, hsla.lightness);
    test.asserter.assertEquals_lzc6tz$('Parsed HSLa alpha/opacity value is incorrect', 0.8, hsla.alpha);
  };
  TestColor.prototype.testRGB2HSL = function () {
    var color = new Color('rgb(123, 45, 67)');
    var hsla = color.toRGBA_8be2vx$().asHSLA();
    test.asserter.assertEquals_lzc6tz$('Converted HSLa hue value is incorrect', 343, hsla.hue);
    test.asserter.assertEquals_lzc6tz$('Converted HSLa saturation value is incorrect', 46, hsla.saturation);
    test.asserter.assertEquals_lzc6tz$('Converted HSLa lightness value is incorrect', 33, hsla.lightness);
    test.asserter.assertEquals_lzc6tz$('Converted HSLa alpha/opacity value is incorrect', 1.0, hsla.alpha);
  };
  TestColor.prototype.testHSL2RGB = function () {
    var color = new Color('hsl(343, 46%, 33%)');
    var rgba = color.fromHSLANotation_8be2vx$().asRGBA();
    test.asserter.assertEquals_lzc6tz$('Converted RGBa red value is incorrect', 123, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa green value is incorrect', 45, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa blue value is incorrect', 67, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa alpha/opacity value is incorrect', 1.0, rgba.alpha);
  };
  TestColor.prototype.testHSL2RGB2 = function () {
    var color = new Color('hsl(30, 51%, 17%)');
    var rgba = color.fromHSLANotation_8be2vx$().asRGBA();
    test.asserter.assertEquals_lzc6tz$('Converted RGBa red value is incorrect', 65, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa green value is incorrect', 43, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa blue value is incorrect', 21, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa alpha/opacity value is incorrect', 1.0, rgba.alpha);
  };
  TestColor.prototype.testLighten = function () {
    var color = Color.Companion.burlyWood.lighten_za3lpa$(10);
    var rgba = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('Converted RGBa red value is incorrect', 230, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa green value is incorrect', 201, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa blue value is incorrect', 163, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa alpha/opacity value is incorrect', 1.0, rgba.alpha);
    test.asserter.assertEquals_lzc6tz$('Generated RGBa string is incorrect', 'rgba(230, 201, 163, 1.0)', color.value);
  };
  TestColor.prototype.testSaturate = function () {
    var color = Color.Companion.burlyWood.saturate_za3lpa$(10);
    var rgba = color.toRGBA_8be2vx$();
    var hsla = rgba.asHSLA();
    test.asserter.assertEquals_lzc6tz$('Converted HSLa hue value is incorrect', 34, hsla.hue);
    test.asserter.assertEquals_lzc6tz$('Converted HSLa saturation value is incorrect', 63, hsla.saturation);
    test.asserter.assertEquals_lzc6tz$('Converted HSLa lightness value is incorrect', 70, hsla.lightness);
    test.asserter.assertEquals_lzc6tz$('Converted HSLa alpha/opacity value is incorrect', 1.0, hsla.alpha);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa red value is incorrect', 227, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa green value is incorrect', 185, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa blue value is incorrect', 130, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Converted RGBa alpha/opacity value is incorrect', 1.0, rgba.alpha);
    test.asserter.assertEquals_lzc6tz$('Generated RGBa string is incorrect', 'rgba(227, 185, 130, 1.0)', color.value);
  };
  TestColor.prototype.testBlackAlpha = function () {
    var color = blackAlpha(0.1);
    var rgba = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('String representation is incorrect', 'rgba(0, 0, 0, 0.1)', color.toString());
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa red value is incorrect', 0, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa green value is incorrect', 0, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa blue value is incorrect', 0, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa alpha value is incorrect', 0.1, rgba.alpha);
  };
  TestColor.prototype.testWhiteAlpha = function () {
    var color = whiteAlpha(0.1);
    var rgba = color.toRGBA_8be2vx$();
    test.asserter.assertEquals_lzc6tz$('String representation is incorrect', 'rgba(255, 255, 255, 0.1)', color.toString());
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa red value is incorrect', 255, rgba.red);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa green value is incorrect', 255, rgba.green);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa blue value is incorrect', 255, rgba.blue);
    test.asserter.assertEquals_lzc6tz$('Parsed RGBa alpha value is incorrect', 0.1, rgba.alpha);
  };
  TestColor.prototype.testWithAlpha = function () {
    var rgb_0 = rgb(0, 0, 0).withAlpha_14dthe$(0.1);
    var rgba_0 = rgba(0, 0, 0, 0.5).withAlpha_14dthe$(0.1);
    var hex = (new Color('#000')).withAlpha_14dthe$(0.1);
    var hexa = (new Color('#00000000')).withAlpha_14dthe$(0.1);
    test.asserter.assertEquals_lzc6tz$('Alpha conversion is incorrect', 'rgba(0, 0, 0, 0.1)', rgb_0.toString());
    test.asserter.assertEquals_lzc6tz$('Alpha conversion is incorrect', 'rgba(0, 0, 0, 0.05)', rgba_0.toString());
    test.asserter.assertEquals_lzc6tz$('Alpha conversion is incorrect', 'rgba(0, 0, 0, 0.1)', hex.toString());
    test.asserter.assertEquals_lzc6tz$('Alpha conversion is incorrect', 'rgba(0, 0, 0, 0.1)', hexa.toString());
  };
  TestColor.prototype.testBlend = function () {
    var source = whiteAlpha(0.1);
    var mix = source.blend_uu3z0h$(new Color('#1a3b66'));
    test.asserter.assertEquals_lzc6tz$('Alpha blending is incorrect', 'rgb(49, 79, 117)', mix.toString());
  };
  TestColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TestColor',
    interfaces: []
  };
  function TestGrid() {
  }
  function TestGrid$testGridAutoColumns$lambda($receiver) {
    set_gridAutoColumns($receiver, new GridAutoColumns('10fr 1fr 200px'));
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: 10fr 1fr 200px;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoColumns_dims$lambda($receiver) {
    set_gridAutoColumns($receiver, GridAutoColumns_init([get_fr(10), get_fr(1), get_px(200)]));
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns_dims = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns_dims$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: 10fr 1fr 200px;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoColumns_auto$lambda($receiver) {
    set_gridAutoColumns($receiver, GridAutoColumns.Companion.auto);
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns_auto = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns_auto$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: auto;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoColumns_fitContent$lambda($receiver) {
    set_gridAutoColumns($receiver, GridAutoColumns.Companion.fitContent_31gyca$(GridAutoColumns.Companion.minMax_5utlym$(get_px(10), get_px(20))));
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns_fitContent = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns_fitContent$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: min-max(auto, max(auto, min-max(10px, 20px)));\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoColumns_maxContent$lambda($receiver) {
    set_gridAutoColumns($receiver, GridAutoColumns.Companion.maxContent);
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns_maxContent = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns_maxContent$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: max-content;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoColumns_minContent$lambda($receiver) {
    set_gridAutoColumns($receiver, GridAutoColumns.Companion.minContent);
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns_minContent = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns_minContent$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: min-content;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoColumns_minMax1$lambda($receiver) {
    set_gridAutoColumns($receiver, GridAutoColumns.Companion.minMax_5utlym$(get_fr(10), get_fr(20)));
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns_minMax1 = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns_minMax1$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: min-max(10fr, 20fr);\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoColumns_minMax2$lambda($receiver) {
    set_gridAutoColumns($receiver, GridAutoColumns.Companion.minMax_9k2y74$(GridAutoColumns.Companion.auto, GridAutoColumns_init([get_fr(10)])));
    return Unit;
  }
  TestGrid.prototype.testGridAutoColumns_minMax2 = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoColumns_minMax2$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-columns: min-max(auto, 10fr);\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_initial$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.initial);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_initial = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_initial$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: initial;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_inherit$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.inherit);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_inherit = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_inherit$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: inherit;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_unset$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.unset);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_unset = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_unset$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: unset;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_column$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.column);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_column = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_column$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: column;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_columnDense$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.columnDense);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_columnDense = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_columnDense$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: column dense;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_dense$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.dense);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_dense = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_dense$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: dense;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_row$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.row);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_row = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_row$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: row;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testAutoFlow_rowDense$lambda($receiver) {
    set_gridAutoFlow($receiver, GridAutoFlow.Companion.rowDense);
    return Unit;
  }
  TestGrid.prototype.testAutoFlow_rowDense = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testAutoFlow_rowDense$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-flow: row dense;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows$lambda($receiver) {
    set_gridAutoRows($receiver, new GridAutoRows('10fr 1fr 200px'));
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: 10fr 1fr 200px;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows_dims$lambda($receiver) {
    set_gridAutoRows($receiver, GridAutoRows_init([get_fr(10), get_fr(1), get_px(200)]));
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows_dims = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows_dims$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: 10fr 1fr 200px;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows_auto$lambda($receiver) {
    set_gridAutoRows($receiver, GridAutoRows.Companion.auto);
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows_auto = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows_auto$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: auto;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows_fitContent$lambda($receiver) {
    set_gridAutoRows($receiver, GridAutoRows.Companion.fitContent_s5vmxc$(GridAutoRows.Companion.minMax_5utlym$(get_px(10), get_px(20))));
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows_fitContent = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows_fitContent$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: min-max(auto, max(auto, min-max(10px, 20px)));\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows_maxContent$lambda($receiver) {
    set_gridAutoRows($receiver, GridAutoRows.Companion.maxContent);
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows_maxContent = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows_maxContent$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: max-content;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows_minContent$lambda($receiver) {
    set_gridAutoRows($receiver, GridAutoRows.Companion.minContent);
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows_minContent = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows_minContent$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: min-content;\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows_minMax1$lambda($receiver) {
    set_gridAutoRows($receiver, GridAutoRows.Companion.minMax_5utlym$(get_fr(10), get_fr(20)));
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows_minMax1 = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows_minMax1$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: min-max(10fr, 20fr);\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridAutoRows_minMax2$lambda($receiver) {
    set_gridAutoRows($receiver, GridAutoRows.Companion.minMax_l0cmr0$(GridAutoRows.Companion.auto, GridAutoRows_init([get_fr(10)])));
    return Unit;
  }
  TestGrid.prototype.testGridAutoRows_minMax2 = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridAutoRows_minMax2$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-auto-rows: min-max(auto, 10fr);\n\n            '), cssBuilder.toString());
  };
  function TestGrid$testGridTemplateRows_repeat$lambda($receiver) {
    set_gridTemplateRows($receiver, GridTemplateRows.Companion.repeat_61zpoe$('auto-fill'));
    return Unit;
  }
  TestGrid.prototype.testGridTemplateRows_repeat = function () {
    var cssBuilder = new CSSBuilder();
    ruleSet(TestGrid$testGridTemplateRows_repeat$lambda)(cssBuilder);
    test.asserter.assertEquals_lzc6tz$('Unexpected generated CSS block', trimIndent('\n            grid-template-rows: repeat(auto-fill);\n\n            '), cssBuilder.toString());
  };
  TestGrid.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TestGrid',
    interfaces: []
  };
  var package$kotlinx = _.kotlinx || (_.kotlinx = {});
  var package$css = package$kotlinx.css || (package$kotlinx.css = {});
  package$css.TestColor = TestColor;
  package$css.TestGrid = TestGrid;
  suite('kotlinx.css', false, function () {
    suite('TestColor', false, function () {
      test_0('testParseRGB', false, function () {
        return (new TestColor()).testParseRGB();
      });
      test_0('testParseRGB2', false, function () {
        return (new TestColor()).testParseRGB2();
      });
      test_0('testParseRGB3', false, function () {
        return (new TestColor()).testParseRGB3();
      });
      test_0('testParseRGBa', false, function () {
        return (new TestColor()).testParseRGBa();
      });
      test_0('testParseRGBa_ValueCapping', false, function () {
        return (new TestColor()).testParseRGBa_ValueCapping();
      });
      test_0('testParseHSL', false, function () {
        return (new TestColor()).testParseHSL();
      });
      test_0('testParseHSL_Turn', false, function () {
        return (new TestColor()).testParseHSL_Turn();
      });
      test_0('testParseHSL_Grad', false, function () {
        return (new TestColor()).testParseHSL_Grad();
      });
      test_0('testParseHSL_Rad', false, function () {
        return (new TestColor()).testParseHSL_Rad();
      });
      test_0('testParseHSL_Deg', false, function () {
        return (new TestColor()).testParseHSL_Deg();
      });
      test_0('testParseHSLa', false, function () {
        return (new TestColor()).testParseHSLa();
      });
      test_0('testRGB2HSL', false, function () {
        return (new TestColor()).testRGB2HSL();
      });
      test_0('testHSL2RGB', false, function () {
        return (new TestColor()).testHSL2RGB();
      });
      test_0('testHSL2RGB2', false, function () {
        return (new TestColor()).testHSL2RGB2();
      });
      test_0('testLighten', false, function () {
        return (new TestColor()).testLighten();
      });
      test_0('testSaturate', false, function () {
        return (new TestColor()).testSaturate();
      });
      test_0('testBlackAlpha', false, function () {
        return (new TestColor()).testBlackAlpha();
      });
      test_0('testWhiteAlpha', false, function () {
        return (new TestColor()).testWhiteAlpha();
      });
      test_0('testWithAlpha', false, function () {
        return (new TestColor()).testWithAlpha();
      });
      test_0('testBlend', false, function () {
        return (new TestColor()).testBlend();
      });
    });
    suite('TestGrid', false, function () {
      test_0('testGridAutoColumns', false, function () {
        return (new TestGrid()).testGridAutoColumns();
      });
      test_0('testGridAutoColumns_dims', false, function () {
        return (new TestGrid()).testGridAutoColumns_dims();
      });
      test_0('testGridAutoColumns_auto', false, function () {
        return (new TestGrid()).testGridAutoColumns_auto();
      });
      test_0('testGridAutoColumns_fitContent', false, function () {
        return (new TestGrid()).testGridAutoColumns_fitContent();
      });
      test_0('testGridAutoColumns_maxContent', false, function () {
        return (new TestGrid()).testGridAutoColumns_maxContent();
      });
      test_0('testGridAutoColumns_minContent', false, function () {
        return (new TestGrid()).testGridAutoColumns_minContent();
      });
      test_0('testGridAutoColumns_minMax1', false, function () {
        return (new TestGrid()).testGridAutoColumns_minMax1();
      });
      test_0('testGridAutoColumns_minMax2', false, function () {
        return (new TestGrid()).testGridAutoColumns_minMax2();
      });
      test_0('testAutoFlow_initial', false, function () {
        return (new TestGrid()).testAutoFlow_initial();
      });
      test_0('testAutoFlow_inherit', false, function () {
        return (new TestGrid()).testAutoFlow_inherit();
      });
      test_0('testAutoFlow_unset', false, function () {
        return (new TestGrid()).testAutoFlow_unset();
      });
      test_0('testAutoFlow_column', false, function () {
        return (new TestGrid()).testAutoFlow_column();
      });
      test_0('testAutoFlow_columnDense', false, function () {
        return (new TestGrid()).testAutoFlow_columnDense();
      });
      test_0('testAutoFlow_dense', false, function () {
        return (new TestGrid()).testAutoFlow_dense();
      });
      test_0('testAutoFlow_row', false, function () {
        return (new TestGrid()).testAutoFlow_row();
      });
      test_0('testAutoFlow_rowDense', false, function () {
        return (new TestGrid()).testAutoFlow_rowDense();
      });
      test_0('testGridAutoRows', false, function () {
        return (new TestGrid()).testGridAutoRows();
      });
      test_0('testGridAutoRows_dims', false, function () {
        return (new TestGrid()).testGridAutoRows_dims();
      });
      test_0('testGridAutoRows_auto', false, function () {
        return (new TestGrid()).testGridAutoRows_auto();
      });
      test_0('testGridAutoRows_fitContent', false, function () {
        return (new TestGrid()).testGridAutoRows_fitContent();
      });
      test_0('testGridAutoRows_maxContent', false, function () {
        return (new TestGrid()).testGridAutoRows_maxContent();
      });
      test_0('testGridAutoRows_minContent', false, function () {
        return (new TestGrid()).testGridAutoRows_minContent();
      });
      test_0('testGridAutoRows_minMax1', false, function () {
        return (new TestGrid()).testGridAutoRows_minMax1();
      });
      test_0('testGridAutoRows_minMax2', false, function () {
        return (new TestGrid()).testGridAutoRows_minMax2();
      });
      test_0('testGridTemplateRows_repeat', false, function () {
        return (new TestGrid()).testGridTemplateRows_repeat();
      });
    });
  });
  Kotlin.defineModule('kotlin-css-js_test', _);
  return _;
}(typeof this['kotlin-css-js_test'] === 'undefined' ? {} : this['kotlin-css-js_test'], kotlin, this['kotlin-css-js'], this['kotlin-test']);
