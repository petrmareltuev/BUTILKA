{"version":3,"file":"BUTILKA.js","sources":["../../../src/main/kotlin/react/RBuilder.kt","../../../src/main/kotlin/styled/StyledTags.kt","../../../../../src/jsMain/kotlin/GlobalStyles.kt","util/Standard.kt","../../../../../src/jsMain/kotlin/Main.kt","../../../../../src/jsMain/kotlin/view/Application.kt","../../../src/main/kotlin/styled/StyledComponents.kt"],"sourcesContent":["package react\n\nimport kotlinext.js.*\nimport kotlin.reflect.*\n\n@DslMarker\nannotation class ReactDsl\n\n@ReactDsl\nopen class RBuilder {\n    val childList = mutableListOf<Any>()\n\n    fun child(element: ReactElement): ReactElement {\n        childList.add(element)\n        return element\n    }\n\n    operator fun String.unaryPlus() {\n        childList.add(this)\n    }\n\n    fun <P : RProps> child(type: Any, props: P, children: List<Any>) =\n        child(createElement(type, props, *children.toTypedArray()))\n\n    fun <P : RProps> child(type: Any, props: P, handler: RHandler<P>): ReactElement {\n        val children = with(RElementBuilder(props)) {\n            handler()\n            childList\n        }\n        return child(type, props, children)\n    }\n\n    operator fun <P : RProps> RClass<P>.invoke(handler: RHandler<P>) =\n        child(this, jsObject {}, handler)\n\n    operator fun <T> RProvider<T>.invoke(value: T, handler: RHandler<RProviderProps<T>>) =\n        child(this, jsObject { this.value = value }, handler)\n\n    operator fun <T> RConsumer<T>.invoke(handler: RBuilder.(T) -> Unit) =\n        child(this, jsObject<RConsumerProps<T>> {\n            this.children = { value ->\n                buildElements { handler(value) }\n            }\n        }) {}\n\n    fun <P : RProps> RClass<P>.node(\n        props: P,\n        children: List<Any> = emptyList()\n    ) = child(this, clone(props), children)\n\n    fun <P : RProps, C : Component<P, *>> child(klazz: KClass<C>, handler: RHandler<P>): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass(handler)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> child(noinline handler: RHandler<P>) =\n        child(C::class, handler)\n\n    fun <P : RProps, C : Component<P, *>> node(\n        klazz: KClass<C>,\n        props: P,\n        children: List<Any> = emptyList()\n    ): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass.node(props, children)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> node(props: P, children: List<Any> = emptyList()) =\n        node(C::class, props, children)\n\n    fun RProps.children() {\n        childList.addAll(Children.toArray(children))\n    }\n}\n\nopen class RBuilderMultiple : RBuilder() {\n}\n\nfun buildElements(handler: RBuilder.() -> Unit): dynamic {\n    val nodes = RBuilder().apply(handler).childList\n    return when {\n        nodes.size == 0 -> null\n        nodes.size == 1 -> nodes.first()\n        else -> createElement(Fragment, js {}, *nodes.toTypedArray())\n    }\n}\n\nopen class RBuilderSingle : RBuilder() {\n}\n\ninline fun buildElement(handler: RBuilder.() -> Unit): ReactElement? =\n    RBuilder().apply(handler).childList.first() as ReactElement?\n\nopen class RElementBuilder<out P : RProps>(open val attrs: P) : RBuilder() {\n    fun attrs(handler: P.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = attrs.key\n        set(value) {\n            attrs.key = value\n        }\n\n    var ref: RRef\n        get() = attrs.ref\n        set(value) {\n            attrs.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        attrs.ref(handler)\n    }\n}\n\ntypealias RHandler<P> = RElementBuilder<P>.() -> Unit\n\nfun <P : RProps> forwardRef(handler: RBuilder.(RProps, RRef) -> Unit): RClass<P> {\n    return rawForwardRef { props, ref ->\n        buildElements { handler(props, ref) }\n    }\n}\n\ntypealias FunctionalComponent<P> = (props: P) -> dynamic\n\n/**\n * Get functional component from [func]\n */\nfun <P : RProps> functionalComponent(\n    func: RBuilder.(props: P) -> Unit\n): FunctionalComponent<P> {\n    return { props: P ->\n        buildElements {\n            func(props)\n        }\n    }\n}\n\n/**\n * Append functional component [functionalComponent] as child of current builder\n */\nfun <P : RProps> RBuilder.child(\n    functionalComponent: FunctionalComponent<P>,\n    props: P = jsObject {},\n    handler: RHandler<P> = {}\n): ReactElement {\n    return child(functionalComponent, props, handler)\n}\n",null,"// import kotlinext.js.invoke // deprecated?\nimport kotlinx.css.*\nimport styled.StyledComponents\nimport styled.injectGlobal\n\nobject GlobalStyles {\n    fun inject() {\n        val styles = CSSBuilder(allowClasses = false).apply {\n            body {\n                margin(0.px)\n                padding(0.px)\n            }\n        }\n\n        StyledComponents.injectGlobal(styles.toString())\n    }\n} ","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","import kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Job\nimport react.buildElement\nimport react.dom.render\nimport view.ApplicationComponent\nimport kotlin.browser.document\nimport kotlin.coroutines.CoroutineContext\n\nprivate class Application: CoroutineScope {\n    override val coroutineContext: CoroutineContext = Job()\n\n    fun start() {\n        document.getElementById(\"react-app\")?.let {\n            render(buildElement {\n                child(ApplicationComponent::class) {\n\n                }\n            }, it)\n        }\n    }\n}\n\nfun main() {\n    GlobalStyles.inject()\n    Application().start()\n}",null,null],"names":[],"mappings":";;;;;;;;;;;;;;;;sBA0FA,mC;cAAA,uC;;;;;;;;aCvBA,0E;iBAAA,8E;8BA7DA,6C;;;;;ECDA,wB;IAAA,4B;G;EAGiB,sD;IACD,kBAAS,OAAF,CAAE,CAAT,C;IACA,mBAAU,OAAF,CAAE,CAAV,C;IACJ,W;EAAA,C;kCALR,Y;IACkD,gBAAjC,uBAA0B,KAA1B,C;IC2EjB,SD1EQ,0BAAK,iCAAL,C;IADJ,aC4EG,S;IDrEc,aAAjB,yBAAiB,EAAa,MAAO,WAApB,C;EACrB,C;;;;;;;EAVJ,oC;IAAA,mC;MAAA,kB;KAAA,4B;G;EEGA,uB;IACI,kCAAkD,K;G;;SAAlD,Y;MAAA,sC;K;;EAK+C,2D;IAEnC,W;EAAA,C;gCALZ,Y;IACa,Q;IAAT,KAAS,OAAT,QAAS,gBAAe,WAAf,CAAT,U;MJ+EO,gBAAX,mB;MGTA,SCpEY,gDAAmC,sCAAnC,C;MADJ,OJ8ER,MGRO,SHQmB,UAA1B,CI9EQ,O;KAMR,C;;;;;;EAGJ,gB;IACI,0BAAa,S;IACC,CAAd,iBAAc,S;EAClB,C;EH0C0F,8B;IAAE,oBAAI,aAAJ,EAAc,EAAd,C;G;EIrD5F,6B;IAAA,iC;IAAkC,sBAAW,mBAAX,EAA2C,IAA3C,C;IAC9B,yBAAe,qBAAI,gCAAJ,C;IAIf,sBAAY,qBAAI,6BAAJ,C;G;;;SAJZ,Y;aAAA,iF;K;;;;SAIA,Y;aAAA,2E;K;;EAJmB,qD;IACf,qBAAW,OAAH,EAAG,CAAX,EAAkB,OAAH,EAAG,CAAlB,C;IACJ,W;EAAA,C;EAEgB,kD;IACZ,4BAAkB,OAAH,EAAG,CAAlB,C;IACJ,W;EAAA,C;;;;;;;EAPJ,yC;IAAA,wC;MAAA,uB;KAAA,iC;G;;;;;;;;EAcA,4B;G;;;;;;EAEA,gC;;IAEQ,aAAQ,sB;G;;SAIR,Y;MAAQ,OAAA,UAAM,eAAe,iB;K;;iDAEjC,qB;IJ/BgC,kBAA1B,0BA4DgF,gBA5DhF,C;IE2EN,WGtBgD,IDnBpC,mBAAC,+BAAkB,QAAnB,C;IFyCZ,WEtCQ,mBAAC,6CAAD,C;IJrCR,wBE4EO,WF5EsC,SAA7C,C;EIuCA,C;;;;;;;;;;;;;;;;;;;;"}