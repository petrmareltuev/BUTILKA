{"version":3,"file":"BUTILKA.js","sources":["../../../src/main/kotlin/react/RBuilder.kt","../../../src/main/kotlin/react/dom/ReactDOMTags.kt","../../../../../src/commonMain/kotlin/RequestsDataTypes.kt","../../../../../src/jsMain/kotlin/GlobalStyles.kt","util/Standard.kt","../../../../../src/jsMain/kotlin/Main.kt","../../../../../src/jsMain/kotlin/Request.kt","../../../../../src/jsMain/kotlin/view/Application.kt","../../../src/main/kotlin/react/dom/RDOMBuilder.kt"],"sourcesContent":["package react\n\nimport kotlinext.js.*\nimport kotlin.reflect.*\n\n@DslMarker\nannotation class ReactDsl\n\n@ReactDsl\nopen class RBuilder {\n    val childList = mutableListOf<Any>()\n\n    fun child(element: ReactElement): ReactElement {\n        childList.add(element)\n        return element\n    }\n\n    operator fun String.unaryPlus() {\n        childList.add(this)\n    }\n\n    fun <P : RProps> child(type: Any, props: P, children: List<Any>) =\n        child(createElement(type, props, *children.toTypedArray()))\n\n    fun <P : RProps> child(type: Any, props: P, handler: RHandler<P>): ReactElement {\n        val children = with(RElementBuilder(props)) {\n            handler()\n            childList\n        }\n        return child(type, props, children)\n    }\n\n    operator fun <P : RProps> RClass<P>.invoke(handler: RHandler<P>) =\n        child(this, jsObject {}, handler)\n\n    operator fun <T> RProvider<T>.invoke(value: T, handler: RHandler<RProviderProps<T>>) =\n        child(this, jsObject { this.value = value }, handler)\n\n    operator fun <T> RConsumer<T>.invoke(handler: RBuilder.(T) -> Unit) =\n        child(this, jsObject<RConsumerProps<T>> {\n            this.children = { value ->\n                buildElements { handler(value) }\n            }\n        }) {}\n\n    fun <P : RProps> RClass<P>.node(\n        props: P,\n        children: List<Any> = emptyList()\n    ) = child(this, clone(props), children)\n\n    fun <P : RProps, C : Component<P, *>> child(klazz: KClass<C>, handler: RHandler<P>): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass(handler)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> child(noinline handler: RHandler<P>) =\n        child(C::class, handler)\n\n    fun <P : RProps, C : Component<P, *>> node(\n        klazz: KClass<C>,\n        props: P,\n        children: List<Any> = emptyList()\n    ): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass.node(props, children)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> node(props: P, children: List<Any> = emptyList()) =\n        node(C::class, props, children)\n\n    fun RProps.children() {\n        childList.addAll(Children.toArray(children))\n    }\n}\n\nopen class RBuilderMultiple : RBuilder() {\n}\n\nfun buildElements(handler: RBuilder.() -> Unit): dynamic {\n    val nodes = RBuilder().apply(handler).childList\n    return when {\n        nodes.size == 0 -> null\n        nodes.size == 1 -> nodes.first()\n        else -> createElement(Fragment, js {}, *nodes.toTypedArray())\n    }\n}\n\nopen class RBuilderSingle : RBuilder() {\n}\n\ninline fun buildElement(handler: RBuilder.() -> Unit): ReactElement? =\n    RBuilder().apply(handler).childList.first() as ReactElement?\n\nopen class RElementBuilder<out P : RProps>(open val attrs: P) : RBuilder() {\n    fun attrs(handler: P.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = attrs.key\n        set(value) {\n            attrs.key = value\n        }\n\n    var ref: RRef\n        get() = attrs.ref\n        set(value) {\n            attrs.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        attrs.ref(handler)\n    }\n}\n\ntypealias RHandler<P> = RElementBuilder<P>.() -> Unit\n\nfun <P : RProps> forwardRef(handler: RBuilder.(RProps, RRef) -> Unit): RClass<P> {\n    return rawForwardRef { props, ref ->\n        buildElements { handler(props, ref) }\n    }\n}\n\ntypealias FunctionalComponent<P> = (props: P) -> dynamic\n\n/**\n * Get functional component from [func]\n */\nfun <P : RProps> functionalComponent(\n    func: RBuilder.(props: P) -> Unit\n): FunctionalComponent<P> {\n    return { props: P ->\n        buildElements {\n            func(props)\n        }\n    }\n}\n\n/**\n * Append functional component [functionalComponent] as child of current builder\n */\nfun <P : RProps> RBuilder.child(\n    functionalComponent: FunctionalComponent<P>,\n    props: P = jsObject {},\n    handler: RHandler<P> = {}\n): ReactElement {\n    return child(functionalComponent, props, handler)\n}\n","package react.dom\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\nimport react.*\n\ninline fun <T : Tag> RBuilder.tag(block: RDOMBuilder<T>.() -> Unit, noinline factory: (TagConsumer<Unit>) -> T): ReactElement =\n    child(RDOMBuilder(factory).apply {\n        block()\n    }.create())\n\ninline fun RBuilder.a(href: String? = null, target: String? = null, classes: String? = null, block: RDOMBuilder<A>.() -> Unit): ReactElement = tag(block) { A(attributesMapOf(\"href\", href, \"target\", target, \"class\", classes), it) }\n\ninline fun RBuilder.abbr(classes: String? = null, block: RDOMBuilder<ABBR>.() -> Unit): ReactElement = tag(block) { ABBR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.address(classes: String? = null, block: RDOMBuilder<ADDRESS>.() -> Unit): ReactElement = tag(block) { ADDRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.area(shape: AreaShape? = null, alt: String? = null, classes: String? = null, block: RDOMBuilder<AREA>.() -> Unit): ReactElement = tag(block) { AREA(attributesMapOf(\"Shape\", shape?.enumEncode(), \"alt\", alt, \"class\", classes), it) }\n\ninline fun RBuilder.article(classes: String? = null, block: RDOMBuilder<ARTICLE>.() -> Unit): ReactElement = tag(block) { ARTICLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.aside(classes: String? = null, block: RDOMBuilder<ASIDE>.() -> Unit): ReactElement = tag(block) { ASIDE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.audio(classes: String? = null, block: RDOMBuilder<AUDIO>.() -> Unit): ReactElement = tag(block) { AUDIO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.b(classes: String? = null, block: RDOMBuilder<B>.() -> Unit): ReactElement = tag(block) { B(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.base(classes: String? = null, block: RDOMBuilder<BASE>.() -> Unit): ReactElement = tag(block) { BASE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdi(classes: String? = null, block: RDOMBuilder<BDI>.() -> Unit): ReactElement = tag(block) { BDI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdo(classes: String? = null, block: RDOMBuilder<BDO>.() -> Unit): ReactElement = tag(block) { BDO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.blockQuote(classes: String? = null, block: RDOMBuilder<BLOCKQUOTE>.() -> Unit): ReactElement = tag(block) { BLOCKQUOTE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.body(classes: String? = null, block: RDOMBuilder<BODY>.() -> Unit): ReactElement = tag(block) { BODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.br(classes: String? = null, block: RDOMBuilder<BR>.() -> Unit): ReactElement = tag(block) { BR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.button(formEncType: ButtonFormEncType? = null, formMethod: ButtonFormMethod? = null, type: ButtonType? = null, classes: String? = null, block: RDOMBuilder<BUTTON>.() -> Unit): ReactElement = tag(block) { BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.canvas(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { CANVAS(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.canvas(classes: String? = null, block: RDOMBuilder<CANVAS>.() -> Unit): ReactElement = tag(block) { CANVAS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.caption(classes: String? = null, block: RDOMBuilder<CAPTION>.() -> Unit): ReactElement = tag(block) { CAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.cite(classes: String? = null, block: RDOMBuilder<CITE>.() -> Unit): ReactElement = tag(block) { CITE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.code(classes: String? = null, block: RDOMBuilder<CODE>.() -> Unit): ReactElement = tag(block) { CODE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.col(classes: String? = null, block: RDOMBuilder<COL>.() -> Unit): ReactElement = tag(block) { COL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.colGroup(classes: String? = null, block: RDOMBuilder<COLGROUP>.() -> Unit): ReactElement = tag(block) { COLGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.command(type: CommandType? = null, classes: String? = null, block: RDOMBuilder<COMMAND>.() -> Unit): ReactElement = tag(block) { COMMAND(attributesMapOf(\"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.dataList(classes: String? = null, block: RDOMBuilder<DATALIST>.() -> Unit): ReactElement = tag(block) { DATALIST(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dd(classes: String? = null, block: RDOMBuilder<DD>.() -> Unit): ReactElement = tag(block) { DD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.del(classes: String? = null, block: RDOMBuilder<DEL>.() -> Unit): ReactElement = tag(block) { DEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.details(classes: String? = null, block: RDOMBuilder<DETAILS>.() -> Unit): ReactElement = tag(block) { DETAILS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dfn(classes: String? = null, block: RDOMBuilder<DFN>.() -> Unit): ReactElement = tag(block) { DFN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dialog(classes: String? = null, block: RDOMBuilder<DIALOG>.() -> Unit): ReactElement = tag(block) { DIALOG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.div(classes: String? = null, block: RDOMBuilder<DIV>.() -> Unit): ReactElement = tag(block) { DIV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dl(classes: String? = null, block: RDOMBuilder<DL>.() -> Unit): ReactElement = tag(block) { DL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dt(classes: String? = null, block: RDOMBuilder<DT>.() -> Unit): ReactElement = tag(block) { DT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.em(classes: String? = null, block: RDOMBuilder<EM>.() -> Unit): ReactElement = tag(block) { EM(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.embed(classes: String? = null, block: RDOMBuilder<EMBED>.() -> Unit): ReactElement = tag(block) { EMBED(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.fieldSet(classes: String? = null, block: RDOMBuilder<FIELDSET>.() -> Unit): ReactElement = tag(block) { FIELDSET(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figcaption(classes: String? = null, block: RDOMBuilder<FIGCAPTION>.() -> Unit): ReactElement = tag(block) { FIGCAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figure(classes: String? = null, block: RDOMBuilder<FIGURE>.() -> Unit): ReactElement = tag(block) { FIGURE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.footer(classes: String? = null, block: RDOMBuilder<FOOTER>.() -> Unit): ReactElement = tag(block) { FOOTER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.form(action: String? = null, encType: FormEncType? = null, method: FormMethod? = null, classes: String? = null, block: RDOMBuilder<FORM>.() -> Unit): ReactElement = tag(block) { FORM(attributesMapOf(\"action\", action, \"enctype\", encType?.enumEncode(), \"method\", method?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.h1(classes: String? = null, block: RDOMBuilder<H1>.() -> Unit): ReactElement = tag(block) { H1(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h2(classes: String? = null, block: RDOMBuilder<H2>.() -> Unit): ReactElement = tag(block) { H2(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h3(classes: String? = null, block: RDOMBuilder<H3>.() -> Unit): ReactElement = tag(block) { H3(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h4(classes: String? = null, block: RDOMBuilder<H4>.() -> Unit): ReactElement = tag(block) { H4(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h5(classes: String? = null, block: RDOMBuilder<H5>.() -> Unit): ReactElement = tag(block) { H5(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h6(classes: String? = null, block: RDOMBuilder<H6>.() -> Unit): ReactElement = tag(block) { H6(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.head(block: RDOMBuilder<HEAD>.() -> Unit): ReactElement = tag(block) { HEAD(emptyMap, it) }\n\ninline fun RBuilder.header(classes: String? = null, block: RDOMBuilder<HEADER>.() -> Unit): ReactElement = tag(block) { HEADER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hGroup(classes: String? = null, block: RDOMBuilder<HGROUP>.() -> Unit): ReactElement = tag(block) { HGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hr(classes: String? = null, block: RDOMBuilder<HR>.() -> Unit): ReactElement = tag(block) { HR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.html(block: RDOMBuilder<HTML>.() -> Unit): ReactElement = tag(block) { HTML(emptyMap, it) }\n\ninline fun RBuilder.i(classes: String? = null, block: RDOMBuilder<I>.() -> Unit): ReactElement = tag(block) { I(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, block: RDOMBuilder<IFRAME>.() -> Unit): ReactElement = tag(block) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.img(alt: String? = null, src: String? = null, classes: String? = null, block: RDOMBuilder<IMG>.() -> Unit): ReactElement = tag(block) { IMG(attributesMapOf(\"alt\", alt, \"src\", src, \"class\", classes), it) }\n\ninline fun RBuilder.input(type: InputType? = null, formEncType: InputFormEncType? = null, formMethod: InputFormMethod? = null, name: String? = null, classes: String? = null, block: RDOMBuilder<INPUT>.() -> Unit): ReactElement = tag(block) { INPUT(attributesMapOf(\"type\", type?.enumEncode(), \"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.ins(classes: String? = null, block: RDOMBuilder<INS>.() -> Unit): ReactElement = tag(block) { INS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.kbd(classes: String? = null, block: RDOMBuilder<KBD>.() -> Unit): ReactElement = tag(block) { KBD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.keyGen(keyType: KeyGenKeyType? = null, classes: String? = null, block: RDOMBuilder<KEYGEN>.() -> Unit): ReactElement = tag(block) { KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.label(classes: String? = null, block: RDOMBuilder<LABEL>.() -> Unit): ReactElement = tag(block) { LABEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.legend(classes: String? = null, block: RDOMBuilder<LEGEND>.() -> Unit): ReactElement = tag(block) { LEGEND(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.li(classes: String? = null, block: RDOMBuilder<LI>.() -> Unit): ReactElement = tag(block) { LI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.link(href: String? = null, rel: String? = null, type: String? = null, block: RDOMBuilder<LINK>.() -> Unit): ReactElement = tag(block) { LINK(attributesMapOf(\"href\", href, \"rel\", rel, \"type\", type), it) }\n\ninline fun RBuilder.map(name: String? = null, classes: String? = null, block: RDOMBuilder<MAP>.() -> Unit): ReactElement = tag(block) { MAP(attributesMapOf(\"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.mark(classes: String? = null, block: RDOMBuilder<MARK>.() -> Unit): ReactElement = tag(block) { MARK(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.math(classes: String? = null, block: RDOMBuilder<MATH>.() -> Unit): ReactElement = tag(block) { MATH(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.mathml(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { MATHML(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.mathml(classes: String? = null, block: RDOMBuilder<MATHML>.() -> Unit): ReactElement = tag(block) { MATHML(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.meta(name: String? = null, content: String? = null, block: RDOMBuilder<META>.() -> Unit): ReactElement = tag(block) { META(attributesMapOf(\"name\", name, \"content\", content), it) }\n\ninline fun RBuilder.meter(classes: String? = null, block: RDOMBuilder<METER>.() -> Unit): ReactElement = tag(block) { METER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.nav(classes: String? = null, block: RDOMBuilder<NAV>.() -> Unit): ReactElement = tag(block) { NAV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.noScript(classes: String? = null, block: RDOMBuilder<NOSCRIPT>.() -> Unit): ReactElement = tag(block) { NOSCRIPT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.object_(classes: String? = null, block: RDOMBuilder<OBJECT>.() -> Unit): ReactElement = tag(block) { OBJECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ol(classes: String? = null, block: RDOMBuilder<OL>.() -> Unit): ReactElement = tag(block) { OL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.optGroup(label: String? = null, classes: String? = null, block: RDOMBuilder<OPTGROUP>.() -> Unit): ReactElement = tag(block) { OPTGROUP(attributesMapOf(\"label\", label, \"class\", classes), it) }\n\ninline fun RBuilder.option(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { OPTION(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.option(classes: String? = null, block: RDOMBuilder<OPTION>.() -> Unit): ReactElement = tag(block) { OPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.output(classes: String? = null, block: RDOMBuilder<OUTPUT>.() -> Unit): ReactElement = tag(block) { OUTPUT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.p(classes: String? = null, block: RDOMBuilder<P>.() -> Unit): ReactElement = tag(block) { P(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.param(name: String? = null, value: String? = null, block: RDOMBuilder<PARAM>.() -> Unit): ReactElement = tag(block) { PARAM(attributesMapOf(\"name\", name, \"value\", value), it) }\n\ninline fun RBuilder.pre(classes: String? = null, block: RDOMBuilder<PRE>.() -> Unit): ReactElement = tag(block) { PRE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.progress(classes: String? = null, block: RDOMBuilder<PROGRESS>.() -> Unit): ReactElement = tag(block) { PROGRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.q(classes: String? = null, block: RDOMBuilder<Q>.() -> Unit): ReactElement = tag(block) { Q(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rp(classes: String? = null, block: RDOMBuilder<RP>.() -> Unit): ReactElement = tag(block) { RP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rt(classes: String? = null, block: RDOMBuilder<RT>.() -> Unit): ReactElement = tag(block) { RT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ruby(classes: String? = null, block: RDOMBuilder<RUBY>.() -> Unit): ReactElement = tag(block) { RUBY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.samp(classes: String? = null, block: RDOMBuilder<SAMP>.() -> Unit): ReactElement = tag(block) { SAMP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.script(type: String? = null, src: String? = null, block: RDOMBuilder<SCRIPT>.() -> Unit): ReactElement = tag(block) { SCRIPT(attributesMapOf(\"type\", type, \"src\", src), it) }\n\ninline fun RBuilder.section(classes: String? = null, block: RDOMBuilder<SECTION>.() -> Unit): ReactElement = tag(block) { SECTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.select(classes: String? = null, block: RDOMBuilder<SELECT>.() -> Unit): ReactElement = tag(block) { SELECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.small(classes: String? = null, block: RDOMBuilder<SMALL>.() -> Unit): ReactElement = tag(block) { SMALL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.source(classes: String? = null, block: RDOMBuilder<SOURCE>.() -> Unit): ReactElement = tag(block) { SOURCE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.span(classes: String? = null, block: RDOMBuilder<SPAN>.() -> Unit): ReactElement = tag(block) { SPAN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.strong(classes: String? = null, block: RDOMBuilder<STRONG>.() -> Unit): ReactElement = tag(block) { STRONG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.style(type: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { STYLE(attributesMapOf(\"type\", type), it) }\ninline fun RBuilder.style(type: String? = null, block: RDOMBuilder<STYLE>.() -> Unit): ReactElement = tag(block) { STYLE(attributesMapOf(\"type\", type), it) }\n\ninline fun RBuilder.sub(classes: String? = null, block: RDOMBuilder<SUB>.() -> Unit): ReactElement = tag(block) { SUB(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.sup(classes: String? = null, block: RDOMBuilder<SUP>.() -> Unit): ReactElement = tag(block) { SUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.svg(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { SVG(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.svg(classes: String? = null, block: RDOMBuilder<SVG>.() -> Unit): ReactElement = tag(block) { SVG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.table(classes: String? = null, block: RDOMBuilder<TABLE>.() -> Unit): ReactElement = tag(block) { TABLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.tbody(classes: String? = null, block: RDOMBuilder<TBODY>.() -> Unit): ReactElement = tag(block) { TBODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.td(classes: String? = null, block: RDOMBuilder<TD>.() -> Unit): ReactElement = tag(block) { TD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, block: RDOMBuilder<TEXTAREA>.() -> Unit): ReactElement = tag(block) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.tfoot(classes: String? = null, block: RDOMBuilder<TFOOT>.() -> Unit): ReactElement = tag(block) { TFOOT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.th(scope: ThScope? = null, classes: String? = null, block: RDOMBuilder<TH>.() -> Unit): ReactElement = tag(block) { TH(attributesMapOf(\"scope\", scope?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.thead(classes: String? = null, block: RDOMBuilder<THEAD>.() -> Unit): ReactElement = tag(block) { THEAD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.time(classes: String? = null, block: RDOMBuilder<TIME>.() -> Unit): ReactElement = tag(block) { TIME(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.title(content: String = \"\"): ReactElement = tag({ +content }) { TITLE(emptyMap, it) }\ninline fun RBuilder.title(block: RDOMBuilder<TITLE>.() -> Unit): ReactElement = tag(block) { TITLE(emptyMap, it) }\n\ninline fun RBuilder.tr(classes: String? = null, block: RDOMBuilder<TR>.() -> Unit): ReactElement = tag(block) { TR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ul(classes: String? = null, block: RDOMBuilder<UL>.() -> Unit): ReactElement = tag(block) { UL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.var_(classes: String? = null, block: RDOMBuilder<VAR>.() -> Unit): ReactElement = tag(block) { VAR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.video(classes: String? = null, block: RDOMBuilder<VIDEO>.() -> Unit): ReactElement = tag(block) { VIDEO(attributesMapOf(\"class\", classes), it) }\n","package ru.butilka\n\ninterface RequestsDataTypes\n\ndata class LoginData(\n        var username:String,\n        var password: String\n)  : RequestsDataTypes\n\n\ndata class User(\n        var username:String,\n        var password:String,\n        var full_name:String,\n        var organization:String,\n        var certificate_id:String,\n        var personal_id:String,\n        var issued:String,\n        var duty:String,\n        var phone:String,\n        var email:String) {\n    override fun toString(): String {\n        return \"{\\\"username\\\":\\\"${username}\\\",\" +\n                \"\\\"password\\\":\\\"${password}\\\",\" +\n                \"\\\"full_name\\\":\\\"${full_name}\\\",\" +\n                \"\\\"organization\\\":\\\"${organization}\\\",\" +\n                \"\\\"certificate_id\\\":\\\"${certificate_id}\\\",\" +\n                \"\\\"personal_id\\\":\\\"${personal_id}\\\",\" +\n                \"\\\"issued\\\":\\\"${issued}\\\",\" +\n                \"\\\"duty\\\":\\\"${duty}\\\",\" +\n                \"\\\"phone\\\":\\\"${phone}\\\",\" +\n                \"\\\"email\\\":\\\"${email}\\\"}\"\n\n    }\n}\n\ndata class CaseInfo(\n        var username: String,\n        var password: String,\n        var participant:String,\n        var victim:String,\n        var witness:String,\n        var comment:String\n):RequestsDataTypes{\n    override fun toString(): String {\n        return  \"{\\\"username\\\":\\\"${username}\\\",\" +\n                \"\\\"password\\\":\\\"${password}\\\",\" +\n                \"\\\"participant\\\":\\\"${participant}\\\",\" +\n                \"\\\"victim\\\":\\\"${victim}\\\",\" +\n                \"\\\"witness\\\":\\\"${witness}\\\",\" +\n                \"\\\"comment\\\":\\\"${comment}\\\"}\"\n    }\n}\n",null,null,"import kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Job\nimport react.buildElement\nimport react.dom.render\nimport view.ApplicationComponent\nimport kotlin.browser.document\nimport kotlin.coroutines.CoroutineContext\n\nprivate class Application: CoroutineScope {\n    override val coroutineContext: CoroutineContext = Job()\n\n    fun start() {\n        document.getElementById(\"react-app\")?.let {\n            render(buildElement {\n                child(ApplicationComponent::class) {\n\n                }\n            }, it)\n        }\n    }\n}\n\nfun main() {\n    GlobalStyles.inject()\n    Application().start()\n}","import org.w3c.xhr.XMLHttpRequest\n\nprivate const val serverURL = \"http://0.0.0.0:8080\"\n\ninternal fun httpGET(url: String, callback: (String) -> Unit) {\n    val param1 = \"Petr\"\n    val params = \"login=$param1\"\n    val urlRequest = \"$serverURL$url?$params\"\n    console.log(params)\n\n    val xmlHttp = XMLHttpRequest()\n    xmlHttp.open(\"GET\", urlRequest)\n    xmlHttp.onload = {\n        if (xmlHttp.readyState == 4.toShort() && xmlHttp.status == 200.toShort()) {\n            callback.invoke(xmlHttp.responseText)\n        }\n        else{\n            console.log(xmlHttp.readyState.toString() + \"  \" + xmlHttp.status)\n        }\n    }\n    xmlHttp.send()\n}\n\ninternal fun httpPOST(url: String, body:String, callback: (String) -> Unit) {\n    //TODO check body\n    //TODO create session or send username and password\n    val xmlHttp = XMLHttpRequest()\n    xmlHttp.open(\"POST\", serverURL +url,true)\n\n    xmlHttp.setRequestHeader(\"Accept\", \"*/*\")\n    xmlHttp.setRequestHeader(\"Accept-Language\", \"en-US,en;q=0.5\")\n    xmlHttp.setRequestHeader(\"Content-Type\", \"application/json\")\n    //text/plain;charset=UTF-8\n\n    xmlHttp.onload = {\n\n        if (xmlHttp.readyState == 4.toShort() && xmlHttp.status == 200.toShort()) {\n            callback.invoke(xmlHttp.responseText)\n        }\n        else{\n            console.log(xmlHttp.readyState.toString() + \"  \" + xmlHttp.status)\n        }\n    }\n    xmlHttp.send(body)\n\n}","package view\n\nimport httpPOST\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.css.marginBottom\nimport kotlinx.css.padding\nimport kotlinx.css.px\nimport react.*\nimport ru.butilka.LoginData\nimport ru.butilka.User\nimport styled.StyleSheet\nimport kotlinx.html.InputType\nimport kotlinx.html.js.onChangeFunction\nimport kotlinx.html.js.onClickFunction\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport react.dom.*\n\ninternal val Event.inputValue: String\n    get() = (target as? HTMLInputElement)?.value ?: (target as? HTMLTextAreaElement)?.value ?: \"\"\n\nprivate object ApplicationStyles: StyleSheet(\"ApplicationStyles\", isStatic = true) {\n    val wrapper by css {\n        padding(32.px, 16.px)\n    }\n\n    val post by css {\n        marginBottom = 32.px\n    }\n}\n\n\ninterface LoginPageState : RState{\n    var username:String\n    var password:String\n    var errorMessage:String\n}\n\nclass ApplicationComponent : RComponent<RProps, LoginPageState>() {\n\n    override fun LoginPageState.init(){\n        username = \"\"\n        password = \"\"\n        errorMessage = \"\"\n    }\n\n    override fun RBuilder.render() {\n        div(\"\") {\n            div {\n                h1 { +\"Login\" }\n            }\n\n            div {\n                p {\n                    input(type = InputType.text, name = \"login\") {\n                        attrs {\n                            placeholder = \"\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\n                            onChangeFunction = {\n                                state.username = it.inputValue\n                                setState{\n                                    errorMessage = \"\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            div {\n                p {\n                    input(type = InputType.password, name = \"password\") {\n                        attrs {\n                            placeholder = \"\u041f\u0430\u0440\u043e\u043b\u044c\"\n                            onChangeFunction = {\n                                state.password = it.inputValue\n                                setState{\n                                    errorMessage = \"\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            div{\n                p {\n                    button(classes = \"App-buttons\") {\n                        span {\n                            +\"\u0412\u0425\u041e\u0414\"\n                        }\n                        attrs {\n                            onClickFunction = {\n                                it.preventDefault()\n                                doLogin()\n                            }\n                        }\n                    }\n                }\n            }\n\n            div {\n                h1{\n                    +state.errorMessage\n                }\n            }\n        }\n    }\n\n    private fun doLogin() {\n        val loginData = LoginData(state.username, state.password)\n        httpPOST(\"/login\",loginData.toString(),::loginResponse)\n    }\n\n    private fun loginResponse(response: String){\n        if (response == \"Wrong username or password\") {\n            setState {\n                errorMessage = response\n            }\n        }\n        else{\n            setState {\n                errorMessage = \"good\"\n                val user = JSON.parse<User>(response)\n                logInUser(user)\n\n            }\n        }\n    }\n}\n\n\ninternal var currentUser :User? = null\n\ninternal fun logInUser(user: User){\n    currentUser = user\n}\n\ninternal fun logOutUser(){\n    currentUser = null\n}\n\n/*\ninterface ApplicationProps: RProps {\n    var coroutineScope: CoroutineScope\n}\n\nclass ApplicationState: RState\n\nclass ApplicationComponent: RComponent<ApplicationProps, ApplicationState>() {\n    init {\n        state = ApplicationState()\n    }\n\n    private val coroutineContext\n        get() = props.coroutineScope.coroutineContext\n\n    override fun RBuilder.render() {\n        styledDiv {\n            css {\n                +ApplicationStyles.wrapper\n            }\n\n            +\"Kotlin multiplatform react application demo\"\n        }\n    }\n}\n*/\n\n","package react.dom\n\nimport kotlinext.js.*\nimport kotlinx.html.*\nimport org.w3c.dom.events.*\nimport react.*\n\nclass InnerHTML(\n    val __html: String\n)\n\nexternal interface WithClassName : RProps {\n    var className: String?\n}\n\nexternal interface DOMProps : WithClassName {\n    var dangerouslySetInnerHTML: InnerHTML?\n}\n\nopen class RDOMBuilder<out T : Tag>(factory: (TagConsumer<Unit>) -> T) : RBuilder() {\n    fun setProp(attribute: String, value: Any?) {\n        val key = fixAttributeName(attribute)\n        props.asDynamic()[key] = value\n    }\n\n    val consumer = object : TagConsumer<Unit> {\n        override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n            setProp(attribute, value)\n        }\n\n        override fun onTagComment(content: CharSequence) {\n            throw IllegalStateException(\"Comments are not supported\")\n        }\n\n        override fun onTagContent(content: CharSequence): Unit {\n            childList.add(content)\n        }\n\n        override fun onTagContentEntity(entity: Entities): Unit {\n            childList.add(entity.text)\n        }\n\n        override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n            val sb = StringBuilder()\n            object : Unsafe {\n                override fun String.unaryPlus() {\n                    sb.append(this)\n                }\n            }.block()\n            props.dangerouslySetInnerHTML = InnerHTML(sb.toString())\n        }\n\n        override fun onTagStart(tag: Tag) {\n            throw IllegalStateException(\"Don't nest tags inside props block\")\n        }\n\n        override fun onTagEnd(tag: Tag) {\n            throw IllegalStateException(\"Don't nest tags inside props block\")\n        }\n\n        override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n            setProp(event, value)\n        }\n\n        override fun finalize() {}\n    }\n\n    val attrs: T = factory(consumer)\n\n    operator fun Tag.get(name: String) = props.asDynamic()[name]\n    operator fun Tag.set(name: String, value: Any) {\n        props.asDynamic()[name] = value\n    }\n\n    // See https://facebook.github.io/react/docs/forms.html\n    var INPUT.defaultChecked: Boolean\n        get() = this[\"defaultChecked\"] ?: false\n        set(value) {\n            this[\"defaultChecked\"] = value\n        }\n\n    var SELECT.values: Set<String>\n        get() {\n            val valuesArr: Array<String> = this[\"value\"] ?: arrayOf()\n            return valuesArr.toSet()\n        }\n        set(value) {\n            this[\"value\"] = value.toTypedArray()\n        }\n\n    var SELECT.value: String\n        get() = \"\"\n        set(value) {\n            values = setOf(value)\n        }\n\n    protected val props: DOMProps = jsObject {}\n\n    init {\n        attrs.attributesEntries.forEach { setProp(it.key, it.value) }\n    }\n\n    inline fun attrs(handler: T.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = props.key\n        set(value) {\n            props.key = value\n        }\n\n    var ref: RRef\n        get() = props.ref\n        set(value) {\n            props.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        props.ref(handler)\n    }\n\n    open fun create(): ReactElement = createElement(attrs.tagName, props, *childList.toTypedArray())\n}\n\n\n"],"names":[],"mappings":"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"}