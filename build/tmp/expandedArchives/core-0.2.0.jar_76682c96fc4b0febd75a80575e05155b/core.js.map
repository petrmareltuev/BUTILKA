{"version":3,"file":"core.js","sources":["generated/_Arrays.kt","generated/_Collections.kt","kotlin/collections.kt","collections/Maps.kt","../../../src/main/kotlin/react/RBuilder.kt","util/Preconditions.kt","collections/Collections.kt","arrayUtils.kt","text/regex/RegexExtensions.kt","../../../src/main/kotlin/react/ReactComponent.kt","../../../../src/main/kotlin/materialui/components/MaterialElementBuilder.kt","../../../src/main/kotlin/kotlinext/js/Helpers.kt","../../../../../../../../../dummy.kt","../../../../src/main/kotlin/materialui/components/MaterialStyle.kt","../../../../src/main/kotlin/materialui/components/StandardProps.kt","../../../../src/main/kotlin/materialui/components/appbar/AppBarElementBuilder.kt","../../../../src/main/kotlin/materialui/components/appbar/appBar.kt","util/Standard.kt","../../../../src/main/kotlin/materialui/components/appbar/enums/AppBarColor.kt","../../../../src/main/kotlin/materialui/components/appbar/enums/AppBarPosition.kt","../../../../src/main/kotlin/materialui/components/appbar/enums/AppBarStyle.kt","../../../../src/main/kotlin/materialui/components/avatar/AvatarElementBuilder.kt","../../../../src/main/kotlin/materialui/components/avatar/avatar.kt","../../../../src/main/kotlin/materialui/components/avatar/enum/AvatarStyle.kt","../../../../src/main/kotlin/materialui/components/backdrop/BackdropElementBuilder.kt","../../../../src/main/kotlin/materialui/components/backdrop/backdrop.kt","../../../../src/main/kotlin/materialui/components/backdrop/enum/BackdropStyle.kt","../../../../src/main/kotlin/materialui/components/badge/BadgeElementBuilder.kt","../../../../src/main/kotlin/materialui/components/badge/badge.kt","../../../../src/main/kotlin/materialui/components/badge/enums/BadgeColor.kt","../../../../src/main/kotlin/materialui/components/badge/enums/BadgeStyle.kt","../../../../src/main/kotlin/materialui/components/badge/enums/BadgeVariant.kt","../../../../src/main/kotlin/materialui/components/bottomnavigation/BottomNavigationElementBuilder.kt","../../../../src/main/kotlin/materialui/components/bottomnavigation/bottomNavigation.kt","../../../../src/main/kotlin/materialui/components/bottomnavigationaction/BottomNavigationActionElementBuilder.kt","../../../../src/main/kotlin/materialui/components/bottomnavigationaction/bottomNavigationAction.kt","../../../../src/main/kotlin/materialui/components/button/ButtonElementBuilder.kt","../../../../src/main/kotlin/materialui/components/button/button.kt","../../../../src/main/kotlin/materialui/components/button/enums/ButtonColor.kt","../../../../src/main/kotlin/materialui/components/button/enums/ButtonSize.kt","../../../../src/main/kotlin/materialui/components/button/enums/ButtonStyle.kt","../../../../src/main/kotlin/materialui/components/button/enums/ButtonVariant.kt","../../../../src/main/kotlin/materialui/components/buttonbase/ButtonBaseElementBuilder.kt","../../../../src/main/kotlin/materialui/components/buttonbase/TouchRippleElementBuilder.kt","../../../../src/main/kotlin/materialui/components/buttonbase/buttonBase.kt","../../../../src/main/kotlin/materialui/components/buttonbase/enums/ButtonBaseStyle.kt","../../../../src/main/kotlin/materialui/components/buttonbase/enums/ButtonStyle.kt","../../../../src/main/kotlin/materialui/components/buttonbase/enums/TouchRippleStyle.kt","../../../../src/main/kotlin/materialui/components/buttonbase/touchRipple.kt","../../../../src/main/kotlin/materialui/components/card/CardElementBuilder.kt","../../../../src/main/kotlin/materialui/components/card/card.kt","../../../../src/main/kotlin/materialui/components/cardactionarea/CardActionAreaElementBuilder.kt","../../../../src/main/kotlin/materialui/components/cardactionarea/cardActionArea.kt","../../../../src/main/kotlin/materialui/components/cardactions/CardActionsElementBuilder.kt","../../../../src/main/kotlin/materialui/components/cardactions/cardActions.kt","../../../../src/main/kotlin/materialui/components/cardactions/enums/CardActionsStyle.kt","../../../../src/main/kotlin/materialui/components/cardcontent/CardContentElementBuilder.kt","../../../../src/main/kotlin/materialui/components/cardcontent/cardContent.kt","../../../../src/main/kotlin/materialui/components/cardheader/CardHeaderElementBuilder.kt","../../../../src/main/kotlin/materialui/components/cardheader/cardHeader.kt","../../../../src/main/kotlin/materialui/components/cardheader/enums/CardHeaderStyle.kt","../../../../src/main/kotlin/materialui/components/cardmedia/CardMediaElementBuilder.kt","../../../../src/main/kotlin/materialui/components/cardmedia/cardmedia.kt","../../../../src/main/kotlin/materialui/components/cardmedia/enums/CardMediaStyle.kt","../../../../src/main/kotlin/materialui/components/checkbox/CheckboxElementBuilder.kt","../../../../src/main/kotlin/materialui/components/checkbox/checkbox.kt","../../../../src/main/kotlin/materialui/components/checkbox/enums/CheckboxColor.kt","../../../../src/main/kotlin/materialui/components/checkbox/enums/CheckboxStyle.kt","../../../../src/main/kotlin/materialui/components/chip/ChipElementBuilder.kt","../../../../src/main/kotlin/materialui/components/chip/chip.kt","../../../../src/main/kotlin/materialui/components/chip/enums/ChipColor.kt","../../../../src/main/kotlin/materialui/components/chip/enums/ChipStyle.kt","../../../../src/main/kotlin/materialui/components/chip/enums/ChipVariant.kt","../../../../src/main/kotlin/materialui/components/circularprogress/CircularProgressElementBuilder.kt","../../../../src/main/kotlin/materialui/components/circularprogress/circularprogress.kt","../../../../src/main/kotlin/materialui/components/circularprogress/enums/CircularProgressColor.kt","../../../../src/main/kotlin/materialui/components/circularprogress/enums/CircularProgressStyle.kt","../../../../src/main/kotlin/materialui/components/circularprogress/enums/CircularProgressVariant.kt","../../../../src/main/kotlin/materialui/components/clickawaylistener/ClickAwayListenerBuilder.kt","../../../../src/main/kotlin/materialui/components/clickawaylistener/clickAwayListener.kt","../../../../src/main/kotlin/materialui/components/clickawaylistener/enums/ClickAwayMouseEvent.kt","../../../../src/main/kotlin/materialui/components/clickawaylistener/enums/ClickAwayTouchEvent.kt","../../../../src/main/kotlin/materialui/components/collapse/CollapseElementBuilder.kt","../../../../src/main/kotlin/materialui/components/collapse/collapse.kt","../../../../src/main/kotlin/materialui/components/collapse/enums/CollapseStyle.kt","../../../../src/main/kotlin/materialui/components/cssbaseline/cssBaseline.kt","../../../../src/main/kotlin/materialui/components/dialog/DialogElementBuilder.kt","../../../../src/main/kotlin/materialui/components/dialog/dialog.kt","../../../../src/main/kotlin/materialui/components/dialog/enums/DialogMaxWidth.kt","../../../../src/main/kotlin/materialui/components/dialog/enums/DialogScroll.kt","../../../../src/main/kotlin/materialui/components/dialog/enums/DialogStyle.kt","../../../../src/main/kotlin/materialui/components/dialogactions/DialogActionsElementBuilder.kt","../../../../src/main/kotlin/materialui/components/dialogactions/dialogActions.kt","../../../../src/main/kotlin/materialui/components/dialogactions/enums/DialogActionsStyle.kt","../../../../src/main/kotlin/materialui/components/dialogcontent/DialogContentElementBuilder.kt","../../../../src/main/kotlin/materialui/components/dialogcontent/dialogContent.kt","../../../../src/main/kotlin/materialui/components/dialogcontenttext/DialogContentTextElementBuilder.kt","../../../../src/main/kotlin/materialui/components/dialogcontenttext/dialogContentText.kt","../../../../src/main/kotlin/materialui/components/dialogtitle/DialogTitleElementBuilder.kt","../../../../src/main/kotlin/materialui/components/dialogtitle/dialogTitle.kt","../../../../src/main/kotlin/materialui/components/divider/DividerElementBuilder.kt","../../../../src/main/kotlin/materialui/components/divider/divider.kt","../../../../src/main/kotlin/materialui/components/divider/enums/DividerStyle.kt","../../../../src/main/kotlin/materialui/components/divider/enums/DividerVariant.kt","../../../../src/main/kotlin/materialui/components/drawer/DrawerElementBuilder.kt","../../../../src/main/kotlin/materialui/components/drawer/drawer.kt","../../../../src/main/kotlin/materialui/components/drawer/enums/DrawerAnchor.kt","../../../../src/main/kotlin/materialui/components/drawer/enums/DrawerStyle.kt","../../../../src/main/kotlin/materialui/components/drawer/enums/DrawerVariant.kt","../../../../src/main/kotlin/materialui/components/expansionpanel/ExpansionPanelElementBuilder.kt","../../../../src/main/kotlin/materialui/components/expansionpanel/enums/ExpansionPanelStyle.kt","../../../../src/main/kotlin/materialui/components/expansionpanel/expansionPanel.kt","../../../../src/main/kotlin/materialui/components/expansionpanelactions/ExpansionPanelActionsElementBuilder.kt","../../../../src/main/kotlin/materialui/components/expansionpanelactions/enums/ExpansionPanelActionsStyle.kt","../../../../src/main/kotlin/materialui/components/expansionpanelactions/expansionPanelActions.kt","../../../../src/main/kotlin/materialui/components/expansionpaneldetails/ExpansionPanelDetailsElementBuilder.kt","../../../../src/main/kotlin/materialui/components/expansionpaneldetails/expansionPanelDetails.kt","../../../../src/main/kotlin/materialui/components/expansionpanelsummary/ExpansionPanelSummaryElementBuilder.kt","../../../../src/main/kotlin/materialui/components/expansionpanelsummary/enums/ExpansionPanelSummaryStyle.kt","../../../../src/main/kotlin/materialui/components/expansionpanelsummary/expansionPanelSummary.kt","../../../../src/main/kotlin/materialui/components/fab/FabElementBuilder.kt","../../../../src/main/kotlin/materialui/components/fab/enums/FabStyle.kt","../../../../src/main/kotlin/materialui/components/fab/enums/FabVariant.kt","../../../../src/main/kotlin/materialui/components/fab/fab.kt","../../../../src/main/kotlin/materialui/components/fade/FadeElementBuilder.kt","../../../../src/main/kotlin/materialui/components/fade/fade.kt","../../../../src/main/kotlin/materialui/components/filledinput/FilledInputElementBuilder.kt","../../../../src/main/kotlin/materialui/components/filledinput/enums/FilledInputStyle.kt","../../../../src/main/kotlin/materialui/components/filledinput/filledInput.kt","../../../../src/main/kotlin/materialui/components/formcontrol/FormControlElementBuilder.kt","../../../../src/main/kotlin/materialui/components/formcontrol/enums/FormControlMargin.kt","../../../../src/main/kotlin/materialui/components/formcontrol/enums/FormControlStyle.kt","../../../../src/main/kotlin/materialui/components/formcontrol/enums/FormControlVariant.kt","../../../../src/main/kotlin/materialui/components/formcontrol/formControl.kt","../../../../src/main/kotlin/materialui/components/formcontrollabel/FormControlLabelElementBuilder.kt","../../../../src/main/kotlin/materialui/components/formcontrollabel/enums/FormControlLabelPlacement.kt","../../../../src/main/kotlin/materialui/components/formcontrollabel/enums/FormControlLabelStyle.kt","../../../../src/main/kotlin/materialui/components/formcontrollabel/formControlLabel.kt","../../../../src/main/kotlin/materialui/components/formgroup/FormGroupElementBuilder.kt","../../../../src/main/kotlin/materialui/components/formgroup/enums/FormGroupStyle.kt","../../../../src/main/kotlin/materialui/components/formgroup/formGroup.kt","../../../../src/main/kotlin/materialui/components/formhelpertext/FormHelperTextElementBuilder.kt","../../../../src/main/kotlin/materialui/components/formhelpertext/enums/FormHelperTextMargin.kt","../../../../src/main/kotlin/materialui/components/formhelpertext/enums/FormHelperTextStyle.kt","../../../../src/main/kotlin/materialui/components/formhelpertext/enums/FormHelperTextVariant.kt","../../../../src/main/kotlin/materialui/components/formhelpertext/formHelperText.kt","../../../../src/main/kotlin/materialui/components/formlabel/FormLabelElementBuilder.kt","../../../../src/main/kotlin/materialui/components/formlabel/enums/FormLabelStyle.kt","../../../../src/main/kotlin/materialui/components/formlabel/formLabel.kt","../../../../src/main/kotlin/materialui/components/grid/GridElementBuilder.kt","../../../../src/main/kotlin/materialui/components/grid/enums/GridAlignContent.kt","../../../../src/main/kotlin/materialui/components/grid/enums/GridAlignItems.kt","../../../../src/main/kotlin/materialui/components/grid/enums/GridDirection.kt","../../../../src/main/kotlin/materialui/components/grid/enums/GridJustify.kt","../../../../src/main/kotlin/materialui/components/grid/enums/GridStyle.kt","../../../../src/main/kotlin/materialui/components/grid/enums/GridWrap.kt","../../../../src/main/kotlin/materialui/components/grid/grid.kt","../../../../src/main/kotlin/materialui/components/gridlist/GridListElementBuilder.kt","../../../../src/main/kotlin/materialui/components/gridlist/gridList.kt","../../../../src/main/kotlin/materialui/components/gridlisttile/GridListTileElementBuilder.kt","../../../../src/main/kotlin/materialui/components/gridlisttile/enums/GridListTitleStyle.kt","../../../../src/main/kotlin/materialui/components/gridlisttile/gridListTile.kt","../../../../src/main/kotlin/materialui/components/gridlisttilebar/GridListTileBarElementBuilder.kt","../../../../src/main/kotlin/materialui/components/gridlisttilebar/enums/GridListTileBarActionPosition.kt","../../../../src/main/kotlin/materialui/components/gridlisttilebar/enums/GridListTileBarTitlePosition.kt","../../../../src/main/kotlin/materialui/components/gridlisttilebar/enums/GridListTitleBarStyle.kt","../../../../src/main/kotlin/materialui/components/gridlisttilebar/gridListTileBar.kt","../../../../src/main/kotlin/materialui/components/grow/GrowElementBuilder.kt","../../../../src/main/kotlin/materialui/components/grow/grow.kt","../../../../src/main/kotlin/materialui/components/hidden/HiddenElementBuilder.kt","../../../../src/main/kotlin/materialui/components/hidden/enums/HiddenImplementation.kt","../../../../src/main/kotlin/materialui/components/hidden/enums/HiddenWidth.kt","../../../../src/main/kotlin/materialui/components/hidden/hidden.kt","../../../../src/main/kotlin/materialui/components/icon/IconElementBuilder.kt","../../../../src/main/kotlin/materialui/components/icon/enums/IconColor.kt","../../../../src/main/kotlin/materialui/components/icon/enums/IconFontSize.kt","../../../../src/main/kotlin/materialui/components/icon/enums/IconStyle.kt","../../../../src/main/kotlin/materialui/components/icon/icon.kt","../../../../src/main/kotlin/materialui/components/iconbutton/IconButtonElementBuilder.kt","../../../../src/main/kotlin/materialui/components/iconbutton/enums/IconButtonStyle.kt","../../../../src/main/kotlin/materialui/components/iconbutton/iconButton.kt","../../../../src/main/kotlin/materialui/components/input/InputElementBuilder.kt","../../../../src/main/kotlin/materialui/components/input/enums/InputStyle.kt","../../../../src/main/kotlin/materialui/components/input/input.kt","../../../../src/main/kotlin/materialui/components/inputadornment/InputAdornmentElementBuilder.kt","../../../../src/main/kotlin/materialui/components/inputadornment/enums/InputAdornmentPosition.kt","../../../../src/main/kotlin/materialui/components/inputadornment/enums/InputAdornmentStyle.kt","../../../../src/main/kotlin/materialui/components/inputadornment/enums/InputAdornmentVariant.kt","../../../../src/main/kotlin/materialui/components/inputadornment/inputAdornment.kt","../../../../src/main/kotlin/materialui/components/inputbase/InputBaseElementBuilder.kt","../../../../src/main/kotlin/materialui/components/inputbase/enums/InputBaseStyle.kt","../../../../src/main/kotlin/materialui/components/inputbase/enums/InputMargin.kt","../../../../src/main/kotlin/materialui/components/inputbase/inputBase.kt","../../../../src/main/kotlin/materialui/components/inputlabel/InputLabelElementBuilder.kt","../../../../src/main/kotlin/materialui/components/inputlabel/enums/InputLabelMargin.kt","../../../../src/main/kotlin/materialui/components/inputlabel/enums/InputLabelStyle.kt","../../../../src/main/kotlin/materialui/components/inputlabel/enums/InputLabelVariant.kt","../../../../src/main/kotlin/materialui/components/inputlabel/inputLabel.kt","../../../../src/main/kotlin/materialui/components/internal/SwitchBaseElementBuilder.kt","../../../../src/main/kotlin/materialui/components/linearprogress/LinearProgressElementBuilder.kt","../../../../src/main/kotlin/materialui/components/linearprogress/enums/LinearProgressColor.kt","../../../../src/main/kotlin/materialui/components/linearprogress/enums/LinearProgressStyle.kt","../../../../src/main/kotlin/materialui/components/linearprogress/enums/LinearProgressVariant.kt","../../../../src/main/kotlin/materialui/components/linearprogress/linearProgress.kt","../../../../src/main/kotlin/materialui/components/link/LinkElementBuilder.kt","../../../../src/main/kotlin/materialui/components/link/enums/LinkStyle.kt","../../../../src/main/kotlin/materialui/components/link/enums/LinkUnderline.kt","../../../../src/main/kotlin/materialui/components/link/link.kt","../../../../src/main/kotlin/materialui/components/list/ListElementBuilder.kt","../../../../src/main/kotlin/materialui/components/list/enums/ListStyle.kt","../../../../src/main/kotlin/materialui/components/list/list.kt","../../../../src/main/kotlin/materialui/components/listitem/ButtonListItemElementBuilder.kt","../../../../src/main/kotlin/materialui/components/listitem/ListItemElementBuilder.kt","../../../../src/main/kotlin/materialui/components/listitem/enums/ListItemAlignItem.kt","../../../../src/main/kotlin/materialui/components/listitem/enums/ListItemStyle.kt","../../../../src/main/kotlin/materialui/components/listitem/listItem.kt","../../../../src/main/kotlin/materialui/components/listitemavatar/ListItemAvatarElementBuilder.kt","../../../../src/main/kotlin/materialui/components/listitemavatar/enums/ListItemAvaterStyle.kt","../../../../src/main/kotlin/materialui/components/listitemavatar/listItemAvatar.kt","../../../../src/main/kotlin/materialui/components/listitemicon/ListItemIconElementBuilder.kt","../../../../src/main/kotlin/materialui/components/listitemicon/listItemIcon.kt","../../../../src/main/kotlin/materialui/components/listitemsecondaryaction/ListItemSecondaryActionElementBuilder.kt","../../../../src/main/kotlin/materialui/components/listitemsecondaryaction/listItemSecondaryAction.kt","../../../../src/main/kotlin/materialui/components/listitemtext/ListItemTextElementBuilder.kt","../../../../src/main/kotlin/materialui/components/listitemtext/enums/ListItemTextStyle.kt","../../../../src/main/kotlin/materialui/components/listitemtext/listItemText.kt","../../../../src/main/kotlin/materialui/components/listsubheader/ListSubheaderElementBuilder.kt","../../../../src/main/kotlin/materialui/components/listsubheader/enums/ListSubheaderColor.kt","../../../../src/main/kotlin/materialui/components/listsubheader/enums/ListSubheaderStyle.kt","../../../../src/main/kotlin/materialui/components/listsubheader/listSubheader.kt","../../../../src/main/kotlin/materialui/components/menu/MenuElementBuilder.kt","../../../../src/main/kotlin/materialui/components/menu/enums/MenuStyle.kt","../../../../src/main/kotlin/materialui/components/menu/menu.kt","../../../../src/main/kotlin/materialui/components/menuitem/MenuItemElementBuilder.kt","../../../../src/main/kotlin/materialui/components/menuitem/enums/MenuItemStyle.kt","../../../../src/main/kotlin/materialui/components/menuitem/menuItem.kt","../../../../src/main/kotlin/materialui/components/menulist/MenuListElementBuilder.kt","../../../../src/main/kotlin/materialui/components/menulist/menuList.kt","../../../../src/main/kotlin/materialui/components/mobilestepper/MobileStepperElementBuilder.kt","../../../../src/main/kotlin/materialui/components/mobilestepper/enums/MobileStepperPosition.kt","../../../../src/main/kotlin/materialui/components/mobilestepper/enums/MobileStepperVariant.kt","../../../../src/main/kotlin/materialui/components/mobilestepper/mobileStepper.kt","../../../../src/main/kotlin/materialui/components/modal/ModalElementBuilder.kt","../../../../src/main/kotlin/materialui/components/modal/enums/ModalStyle.kt","../../../../src/main/kotlin/materialui/components/modal/modal.kt","../../../../src/main/kotlin/materialui/components/nativeselect/NativeSelectElementBuilder.kt","../../../../src/main/kotlin/materialui/components/nativeselect/enums/NativeSelectStyle.kt","../../../../src/main/kotlin/materialui/components/nativeselect/enums/NativeSelectVariant.kt","../../../../src/main/kotlin/materialui/components/nativeselect/nativeSelect.kt","../../../../src/main/kotlin/materialui/components/nossr/NoSsrElementBuilder.kt","../../../../src/main/kotlin/materialui/components/nossr/noSsr.kt","../../../../src/main/kotlin/materialui/components/outlinedinput/OutlinedInputElementBuilder.kt","../../../../src/main/kotlin/materialui/components/outlinedinput/enums/OutlinedInputStyle.kt","../../../../src/main/kotlin/materialui/components/outlinedinput/outlinedInput.kt","../../../../src/main/kotlin/materialui/components/paper/PaperElementBuilder.kt","../../../../src/main/kotlin/materialui/components/paper/enums/PaperStyle.kt","../../../../src/main/kotlin/materialui/components/paper/paper.kt","../../../../src/main/kotlin/materialui/components/popover/PopoverElementBuilder.kt","../../../../src/main/kotlin/materialui/components/popover/enums/PopoverOriginHorizontal.kt","../../../../src/main/kotlin/materialui/components/popover/enums/PopoverOriginVertical.kt","../../../../src/main/kotlin/materialui/components/popover/enums/PopoverReference.kt","../../../../src/main/kotlin/materialui/components/popover/enums/PopoverStyle.kt","../../../../src/main/kotlin/materialui/components/popover/popover.kt","../../../../src/main/kotlin/materialui/components/popper/PopperElementBuilder.kt","../../../../src/main/kotlin/materialui/components/popper/enums/PopperPlacement.kt","../../../../src/main/kotlin/materialui/components/popper/popper.kt","../../../../src/main/kotlin/materialui/components/portal/PortalElementBuilder.kt","../../../../src/main/kotlin/materialui/components/portal/portal.kt","../../../../src/main/kotlin/materialui/components/radio/RadioElementBuilder.kt","../../../../src/main/kotlin/materialui/components/radio/enums/RadioColor.kt","../../../../src/main/kotlin/materialui/components/radio/enums/RadioStyle.kt","../../../../src/main/kotlin/materialui/components/radio/radio.kt","../../../../src/main/kotlin/materialui/components/radiogroup/RadioGroupElementBuilder.kt","../../../../src/main/kotlin/materialui/components/radiogroup/radioGroup.kt","../../../../src/main/kotlin/materialui/components/rootref/RootRefElementBuilder.kt","../../../../src/main/kotlin/materialui/components/rootref/rootRef.kt","../../../../src/main/kotlin/materialui/components/select/SelectElementBuilder.kt","../../../../src/main/kotlin/materialui/components/select/enums/SelectStyle.kt","../../../../src/main/kotlin/materialui/components/select/enums/SelectVariant.kt","../../../../src/main/kotlin/materialui/components/select/select.kt","../../../../src/main/kotlin/materialui/components/slide/SlideElementBuilder.kt","../../../../src/main/kotlin/materialui/reacttransiton/RTransitionProps.kt","../../../../src/main/kotlin/materialui/components/slide/enums/SlideDirection.kt","../../../../src/main/kotlin/materialui/components/slide/slide.kt","../../../../src/main/kotlin/materialui/components/snackbar/SnackbarElementBuilder.kt","../../../../src/main/kotlin/materialui/components/snackbar/enums/SnackbarOriginHorizontal.kt","../../../../src/main/kotlin/materialui/components/snackbar/enums/SnackbarOriginVertical.kt","../../../../src/main/kotlin/materialui/components/snackbar/enums/SnackbarStyle.kt","../../../../src/main/kotlin/materialui/components/snackbar/snackbar.kt","../../../../src/main/kotlin/materialui/components/snackbarcontent/SnackbarContentElementBuilder.kt","../../../../src/main/kotlin/materialui/components/snackbarcontent/enums/SnackbarContentStyle.kt","../../../../src/main/kotlin/materialui/components/snackbarcontent/snackbarContent.kt","../../../../src/main/kotlin/materialui/components/step/StepElementBuilder.kt","../../../../src/main/kotlin/materialui/components/step/enums/StepOrientation.kt","../../../../src/main/kotlin/materialui/components/step/enums/StepStyle.kt","../../../../src/main/kotlin/materialui/components/step/step.kt","../../../../src/main/kotlin/materialui/components/stepbutton/StepButtonElementBuilder.kt","../../../../src/main/kotlin/materialui/components/stepbutton/enums/StepButtonStyle.kt","../../../../src/main/kotlin/materialui/components/stepbutton/stepButton.kt","../../../../src/main/kotlin/materialui/components/stepconnector/StepConnectorElementBuilder.kt","../../../../src/main/kotlin/materialui/components/stepconnector/enums/StepConnectorStyle.kt","../../../../src/main/kotlin/materialui/components/stepconnector/stepConnector.kt","../../../../src/main/kotlin/materialui/components/stepcontent/StepContentElementBuilder.kt","../../../../src/main/kotlin/materialui/components/stepcontent/enums/StepContentStyle.kt","../../../../src/main/kotlin/materialui/components/stepcontent/stepContent.kt","../../../../src/main/kotlin/materialui/components/stepicon/StepIconElementBuilder.kt","../../../../src/main/kotlin/materialui/components/stepicon/enums/StepIconStyle.kt","../../../../src/main/kotlin/materialui/components/stepicon/stepIcon.kt","../../../../src/main/kotlin/materialui/components/steplabel/StepLabelElementBuilder.kt","../../../../src/main/kotlin/materialui/components/steplabel/enums/StepLabelStyle.kt","../../../../src/main/kotlin/materialui/components/steplabel/stepLabel.kt","../../../../src/main/kotlin/materialui/components/stepper/StepperElementBuilder.kt","../../../../src/main/kotlin/materialui/components/stepper/enums/StepperStyle.kt","../../../../src/main/kotlin/materialui/components/stepper/stepper.kt","../../../../src/main/kotlin/materialui/components/svgicon/SvgIconElementBuilder.kt","../../../../src/main/kotlin/materialui/components/svgicon/enums/SvgIconColor.kt","../../../../src/main/kotlin/materialui/components/svgicon/enums/SvgIconFontSize.kt","../../../../src/main/kotlin/materialui/components/svgicon/enums/SvgIconStyle.kt","../../../../src/main/kotlin/materialui/components/svgicon/svgIcon.kt","../../../../src/main/kotlin/materialui/components/swipeabledrawer/SwipeableDrawerElementBuilder.kt","../../../../src/main/kotlin/materialui/components/swipeabledrawer/swipeableDrawer.kt","../../../../src/main/kotlin/materialui/components/switches/SwitchElementBuilder.kt","../../../../src/main/kotlin/materialui/components/switches/enums/SwitchColor.kt","../../../../src/main/kotlin/materialui/components/switches/enums/SwitchStyle.kt","../../../../src/main/kotlin/materialui/components/switches/switch.kt","../../../../src/main/kotlin/materialui/components/tab/TabElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tab/enums/TabStyle.kt","../../../../src/main/kotlin/materialui/components/tab/enums/TabTextColor.kt","../../../../src/main/kotlin/materialui/components/tab/tab.kt","../../../../src/main/kotlin/materialui/components/table/TableElementBuilder.kt","../../../../src/main/kotlin/materialui/components/table/enums/TablePadding.kt","../../../../src/main/kotlin/materialui/components/table/table.kt","../../../../src/main/kotlin/materialui/components/tablebody/TableBodyElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tablebody/tableBody.kt","../../../../src/main/kotlin/materialui/components/tablecell/TableCellElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tablecell/enums/TableCellAlign.kt","../../../../src/main/kotlin/materialui/components/tablecell/enums/TableCellPadding.kt","../../../../src/main/kotlin/materialui/components/tablecell/enums/TableCellSortDirection.kt","../../../../src/main/kotlin/materialui/components/tablecell/enums/TableCellStyle.kt","../../../../src/main/kotlin/materialui/components/tablecell/enums/TableCellVariant.kt","../../../../src/main/kotlin/materialui/components/tablecell/tableCell.kt","../../../../src/main/kotlin/materialui/components/tablefooter/TableFooterElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tablefooter/tableFooter.kt","../../../../src/main/kotlin/materialui/components/tablehead/TableHeadElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tablehead/tableHead.kt","../../../../src/main/kotlin/materialui/components/tablepagination/TablePaginationElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tablepagination/enums/TablePaginationStyle.kt","../../../../src/main/kotlin/materialui/components/tablepagination/tablePagination.kt","../../../../src/main/kotlin/materialui/components/tablerow/TableRowElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tablerow/enums/TableRowStyle.kt","../../../../src/main/kotlin/materialui/components/tablerow/tableRow.kt","../../../../src/main/kotlin/materialui/components/tablesortlabel/TableSortLabelElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tablesortlabel/enums/TableSortLabelDirection.kt","../../../../src/main/kotlin/materialui/components/tablesortlabel/tableSortLabel.kt","../../../../src/main/kotlin/materialui/components/tabs/TabIndicatorElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tabs/TabsElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tabs/enums/TabsIndicatorColor.kt","../../../../src/main/kotlin/materialui/components/tabs/enums/TabsScrollButtons.kt","../../../../src/main/kotlin/materialui/components/tabs/enums/TabsStyle.kt","../../../../src/main/kotlin/materialui/components/tabs/enums/TabsTextColor.kt","../../../../src/main/kotlin/materialui/components/tabs/enums/TabsVariant.kt","../../../../src/main/kotlin/materialui/components/tabs/tabIndicator.kt","../../../../src/main/kotlin/materialui/components/tabs/tabs.kt","../../../../src/main/kotlin/materialui/components/textfield/TextFieldElementBuilder.kt","../../../../src/main/kotlin/materialui/components/textfield/textField.kt","../../../../src/main/kotlin/materialui/components/toolbar/ToolbarElementBuilder.kt","../../../../src/main/kotlin/materialui/components/toolbar/enums/ToolbarStyle.kt","../../../../src/main/kotlin/materialui/components/toolbar/enums/ToolbarVariant.kt","../../../../src/main/kotlin/materialui/components/toolbar/toolbar.kt","../../../../src/main/kotlin/materialui/components/tooltip/TooltipElementBuilder.kt","../../../../src/main/kotlin/materialui/components/tooltip/enums/TooltipPlacement.kt","../../../../src/main/kotlin/materialui/components/tooltip/enums/TooltipStyle.kt","../../../../src/main/kotlin/materialui/components/tooltip/tooltip.kt","../../../../src/main/kotlin/materialui/components/typography/TypographyElementBuilder.kt","../../../../src/main/kotlin/materialui/components/typography/enums/TypographyAlign.kt","../../../../src/main/kotlin/materialui/components/typography/enums/TypographyColor.kt","../../../../src/main/kotlin/materialui/components/typography/enums/TypographyStyle.kt","../../../../src/main/kotlin/materialui/components/typography/enums/TypographyVariant.kt","../../../../src/main/kotlin/materialui/components/typography/typography.kt","../../../../src/main/kotlin/materialui/components/zoom/ZoomElementBuilder.kt","../../../../src/main/kotlin/materialui/components/zoom/zoom.kt","../../../../src/main/kotlin/materialui/reacteventlistener/REventListenerBuilder.kt","../../../../src/main/kotlin/materialui/reacttransiton/RTransitionBuilder.kt","../../../../src/main/kotlin/materialui/reacttransiton/RTransitionGroupBuilder.kt","../../../../src/main/kotlin/materialui/reacttransiton/RTransitionGroupProps.kt","../../../../src/main/kotlin/materialui/styles/CssPropertiesDelegate.kt","../../../../src/main/kotlin/materialui/styles/StylesSet.kt","generated/_Maps.kt","../../../../src/main/kotlin/materialui/styles/breakpoint/Breakpoint.kt","../../../../src/main/kotlin/materialui/styles/breakpoint/BreakpointValues.kt","../../../../src/main/kotlin/materialui/styles/breakpoint/Breakpoints.kt","../../../../src/main/kotlin/materialui/styles/breakpoint/BreakpointsDelegate.kt","../../../../src/main/kotlin/materialui/styles/breakpoint/options/BreakpointValuesOptions.kt","../../../../src/main/kotlin/materialui/styles/breakpoint/options/BreakpointsOptions.kt","../../../../src/main/kotlin/materialui/styles/createBreakpoints.kt","../../../../src/main/kotlin/materialui/styles/createMixins.kt","../../../../src/main/kotlin/materialui/styles/createMuiTheme.kt","../../../../src/main/kotlin/materialui/styles/createPalette.kt","../../../../src/main/kotlin/materialui/styles/createTypography.kt","../../../../src/main/kotlin/materialui/styles/mixins/Mixins.kt","../../../../src/main/kotlin/materialui/styles/mixins/MixinsDelegate.kt","../../../../src/main/kotlin/materialui/styles/mixins/options/MixinsOptions.kt","../../../../src/main/kotlin/materialui/styles/muitheme/MuiTheme.kt","../../../../src/main/kotlin/materialui/styles/muitheme/options/MuiThemeOptions.kt","../../../../src/main/kotlin/materialui/styles/muithemeprovider/MuiThemeProviderBuilder.kt","../../../../src/main/kotlin/materialui/styles/muithemeprovider/muiThemeProvider.kt","../../../../src/main/kotlin/materialui/styles/palette/CommonColors.kt","../../../../src/main/kotlin/materialui/styles/palette/GreyColors.kt","../../../../src/main/kotlin/materialui/styles/palette/GreyType.kt","../../../../src/main/kotlin/materialui/styles/palette/Palette.kt","../../../../src/main/kotlin/materialui/styles/palette/PaletteColor.kt","../../../../src/main/kotlin/materialui/styles/palette/PaletteType.kt","../../../../src/main/kotlin/materialui/styles/palette/TypeAction.kt","../../../../src/main/kotlin/materialui/styles/palette/TypeBackground.kt","../../../../src/main/kotlin/materialui/styles/palette/TypeText.kt","../../../../src/main/kotlin/materialui/styles/palette/options/CommonColorsOptions.kt","../../../../src/main/kotlin/materialui/styles/palette/options/GreyColorsOptions.kt","../../../../src/main/kotlin/materialui/styles/palette/options/PaletteColorOptions.kt","../../../../src/main/kotlin/materialui/styles/palette/options/PaletteOptions.kt","../../../../src/main/kotlin/materialui/styles/palette/options/TypeActionOptions.kt","../../../../src/main/kotlin/materialui/styles/palette/options/TypeBackgroundOptions.kt","../../../../src/main/kotlin/materialui/styles/palette/options/TypeTextOptions.kt","../../../../src/main/kotlin/materialui/styles/shadow/ShadowDelegate.kt","generated/_Sequences.kt","../../../../src/main/kotlin/materialui/styles/transitions/Easing.kt","../../../../src/main/kotlin/materialui/styles/transitions/Transitions.kt","../../../../src/main/kotlin/materialui/styles/transitions/TransitionsDelegate.kt","../../../../src/main/kotlin/materialui/styles/transitions/options/EasingOptions.kt","../../../../src/main/kotlin/materialui/styles/transitions/options/TransitionsOptions.kt","../../../../src/main/kotlin/materialui/styles/typography/FontStyle.kt","../../../../src/main/kotlin/materialui/styles/typography/TypographyStyle.kt","../../../../src/main/kotlin/materialui/styles/typography/options/FontStyleOptions.kt","../../../../src/main/kotlin/materialui/styles/typography/options/TypographyOptions.kt","../../../../src/main/kotlin/materialui/styles/typography/options/TypographyStyleOptions.kt","../../../../src/main/kotlin/materialui/styles/withStyles.kt"],"sourcesContent":["/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","package react\n\nimport kotlinext.js.*\nimport kotlin.reflect.*\n\n@DslMarker\nannotation class ReactDsl\n\n@ReactDsl\nopen class RBuilder {\n    val childList = mutableListOf<Any>()\n\n    fun child(element: ReactElement): ReactElement {\n        childList.add(element)\n        return element\n    }\n\n    operator fun String.unaryPlus() {\n        childList.add(this)\n    }\n\n    fun <P : RProps> child(type: Any, props: P, children: List<Any>) =\n        child(createElement(type, props, *children.toTypedArray()))\n\n    fun <P : RProps> child(type: Any, props: P, handler: RHandler<P>): ReactElement {\n        val children = with(RElementBuilder(props)) {\n            handler()\n            childList\n        }\n        return child(type, props, children)\n    }\n\n    operator fun <P : RProps> RClass<P>.invoke(handler: RHandler<P>) =\n        child(this, jsObject {}, handler)\n\n    operator fun <T> RProvider<T>.invoke(value: T, handler: RHandler<RProviderProps<T>>) =\n        child(this, jsObject { this.value = value }, handler)\n\n    operator fun <T> RConsumer<T>.invoke(handler: RBuilder.(T) -> Unit) =\n        child(this, jsObject<RConsumerProps<T>> {\n            this.children = { value ->\n                buildElements { handler(value) }\n            }\n        }) {}\n\n    fun <P : RProps> RClass<P>.node(\n        props: P,\n        children: List<Any> = emptyList()\n    ) = child(this, clone(props), children)\n\n    fun <P : RProps, C : Component<P, *>> child(klazz: KClass<C>, handler: RHandler<P>): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass(handler)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> child(noinline handler: RHandler<P>) =\n        child(C::class, handler)\n\n    fun <P : RProps, C : Component<P, *>> node(\n        klazz: KClass<C>,\n        props: P,\n        children: List<Any> = emptyList()\n    ): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass.node(props, children)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> node(props: P, children: List<Any> = emptyList()) =\n        node(C::class, props, children)\n\n    fun RProps.children() {\n        childList.addAll(Children.toArray(children))\n    }\n}\n\nopen class RBuilderMultiple : RBuilder() {\n}\n\nfun buildElements(handler: RBuilder.() -> Unit): dynamic {\n    val nodes = RBuilder().apply(handler).childList\n    return when {\n        nodes.size == 0 -> null\n        nodes.size == 1 -> nodes.first()\n        else -> createElement(Fragment, js {}, *nodes.toTypedArray())\n    }\n}\n\nopen class RBuilderSingle : RBuilder() {\n}\n\ninline fun buildElement(handler: RBuilder.() -> Unit): ReactElement? =\n    RBuilder().apply(handler).childList.first() as ReactElement?\n\nopen class RElementBuilder<out P : RProps>(open val attrs: P) : RBuilder() {\n    fun attrs(handler: P.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = attrs.key\n        set(value) {\n            attrs.key = value\n        }\n\n    var ref: RRef\n        get() = attrs.ref\n        set(value) {\n            attrs.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        attrs.ref(handler)\n    }\n}\n\ntypealias RHandler<P> = RElementBuilder<P>.() -> Unit\n\nfun <P : RProps> forwardRef(handler: RBuilder.(RProps, RRef) -> Unit): RClass<P> {\n    return rawForwardRef { props, ref ->\n        buildElements { handler(props, ref) }\n    }\n}\n\ntypealias FunctionalComponent<P> = (props: P) -> dynamic\n\n/**\n * Get functional component from [func]\n */\nfun <P : RProps> functionalComponent(\n    func: RBuilder.(props: P) -> Unit\n): FunctionalComponent<P> {\n    return { props: P ->\n        buildElements {\n            func(props)\n        }\n    }\n}\n\n/**\n * Append functional component [functionalComponent] as child of current builder\n */\nfun <P : RProps> RBuilder.child(\n    functionalComponent: FunctionalComponent<P>,\n    props: P = jsObject {},\n    handler: RHandler<P> = {}\n): ReactElement {\n    return child(functionalComponent, props, handler)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","package react\n\nimport kotlinext.js.*\n\n// Props\nexternal interface RProps\n\nval RProps.children: Any get() = asDynamic().children\nvar RProps.key: String\n    get() = error(\"key cannot be read from props\")\n    set(value) {\n        asDynamic().key = value\n    }\n\nvar RProps.ref: RRef\n    get() = error(\"ref cannot be read from props\")\n    set(value) {\n        asDynamic().ref = value\n    }\n\nfun <T> RProps.ref(ref: (T?) -> Unit) {\n    asDynamic().ref = ref\n}\n\n// State\nexternal interface RState\n\nclass BoxedState<T>(var state: T) : RState\n\n// Error info\nexternal interface RErrorInfo\n\nval RErrorInfo.componentStack: Any get() = asDynamic().componentStack\n\n// TODO: Should extend RComponentClassStatics, but has problems with generic params\nexternal interface RClass<in P : RProps> : RComponentClassStatics<RProps, RState, RContext<Any>?>\n\nexternal interface RComponentClassStatics<P : RProps, S : RState, C : RContext<Any>?> {\n    var displayName: String?\n\n    var defaultProps: P?\n\n    var contextType: C\n\n    var getDerivedStateFromProps: ((P, S) -> S?)?\n\n    var getDerivedStateFromError: ((Throwable) -> S?)?\n}\n\nexternal interface RProviderProps<T> : RProps {\n    var value: T\n}\n\nexternal interface RProvider<T> : RClass<RProviderProps<T>>\n\nexternal interface RConsumerProps<T> : RProps {\n    var children: (T) -> Any\n}\n\nexternal interface RConsumer<T> : RClass<RConsumerProps<T>>\n\n// Context (16.3+)\nexternal interface RContext<T> {\n    val Provider: RProvider<T>\n    val Consumer: RConsumer<T>\n}\n\n// Refs (16.3+)\nexternal interface RRef\n\nexternal interface RReadableRef<out T> : RRef {\n    val current: T?\n}\n\nfun <S : RState> Component<*, S>.setState(buildState: S.() -> Unit) =\n    setState({ assign(it, buildState) })\n\ninline fun <P : RProps> rFunction(\n    displayName: String,\n    crossinline render: RBuilder.(P) -> Unit\n): RClass<P> {\n    val fn = { props: P -> buildElements { render(props) } } as RClass<P>\n    fn.displayName = displayName\n    return fn\n}\n\nabstract class RComponent<P : RProps, S : RState> : Component<P, S> {\n    constructor() : super() {\n        state = jsObject { init() }\n    }\n\n    constructor(props: P) : super(props) {\n        state = jsObject { init(props) }\n    }\n\n    open fun S.init() {}\n    // if you use this method, don't forget to pass props to the constructor first\n    open fun S.init(props: P) {}\n\n    fun RBuilder.children() {\n        props.children()\n    }\n\n    abstract fun RBuilder.render()\n\n    override fun render() = buildElements { render() }\n}\n",null,"package kotlinext.js\n\ninline fun <T : Any> jsObject(builder: T.() -> Unit): T {\n    val obj: T = js(\"({})\")\n    return obj.apply {\n        builder()\n    }\n}\n\ninline fun js(builder: dynamic.() -> Unit): dynamic = jsObject(builder)\n\nfun <T : Any> clone(obj: T) = objectAssign(jsObject<T> {}, obj)\n\ninline fun <T : Any> assign(obj: T, builder: T.() -> Unit) = clone(obj).apply(builder)\n\nfun <T, R : T> assign(dest: R, src: T): R {\n    console.warn(\"kotlinext.js.assign is deprecated, use kotlinext.js.objectAssign instead\")\n    return objectAssign(dest, src)\n}\n\nfun toPlainObjectStripNull(obj: Any) = js {\n    for (key in Object.keys(obj)) {\n        val value = obj.asDynamic()[key]\n        if (value != null) this[key] = value\n    }\n}\n",null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence of [IndexedValue] for each element of the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;;uBAojRA,gD;gCC3xOA,yD;oBC3wCA,qC;;;;;;;iBCyCA,0C;;;sBCmCA,mC;cAAA,uC;;;;;;;;;;;;sCCjEA,mD;;;;;kBCmDA,0C;;;;;;;;;;;;;;;;;;2BHZA,oD;;;;gBInDA,K;2BNqzCA,oD;;;;mBOxzCA,qC;;;;;;;;;;;;;;sBCmEA,guBAAe,OAAf,C;IAHA,gB;ICTA,UAAa,E;IDab,qBCZO,G;ID0CP,iCAAyB,kB;IACzB,mCAA8B,kB;IAC9B,mCAA8B,kB;IAGpB,qBAAN,UAAM,EAAQ,QAAR,C;IACN,sCAAkB,UAAM,QAAxB,C;EAzC2D,C;;IAQ3D,gCAAQ,OAAO,qCAAsB,SAAtB,CAAP,CAAR,C;EACJ,C;;IVuiRO,kBAAM,eUpiRD,QVoiRc,OAAb,C;IA6UA,Q;IAAb,wBUj3RY,QVi3RZ,gB;MAAa,WUj3RD,QVi3RZ,M;mBACI,W;MUl3RuB,IAAC,MVk3RE,IUl3RF,aAAD;QAAM,QVk3RH,IUl3RG,a;MVk3RjB,YAAZ,WAAY,EUl3R2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CVk3R3B,C;;IUl3RZ,gCVm3RG,WUn3RH,C;EACJ,C;;ITwwCO,kBAAM,eAAa,wBSrwCd,QTqwCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OS10CD,QT00CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MS30CuB,IAAC,MT20CE,IS30CF,aAAD;QAAM,QT20CH,IS30CG,a;MT20CjB,YAAZ,WAAY,ES30C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CT20C3B,C;;IS30CZ,gCT40CG,WS50CH,C;EACJ,C;;IV+hRO,kBAAM,eU5hRD,QV4hRc,OAAb,C;IA6UA,Q;IAAb,wBUz2RY,QVy2RZ,gB;MAAa,WUz2RD,QVy2RZ,M;mBACI,W;MU12RuB,IAAC,MV02RE,IU12RF,aAAD;QAAM,QV02RH,IU12RG,a;MV02RjB,YAAZ,WAAY,EU12R2B,QAAO,KAAP,CV02R3B,C;;IU12RZ,gCV22RG,WU32RH,C;EACJ,C;;IAWc,Q;IARV,IAAI,QAAS,UAAb,C;MACI,M;;ICjCR,UAAa,E;IDoCT,iBCnCG,G;IV6iDS,U;IAAA,SSxgDZ,QTwgDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MSxgDO,IAAC,MTwgDK,OSxgDL,aAAD;QAAM,QTwgDA,OSxgDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,oCAAU,yDAAV,C;EACJ,C;;;WAEA,4F;EAAA,C;;IAAA,6FE7CJ,OF6CI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGE9CJ,SF8CI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGE/CJ,SF+CI,C;EAAA,C;;IAQ+B,gBAA3B,MAAO,MAAK,kBAAL,C;IVg9UK,Q;IAAhB,wBAAgB,SAAhB,gB;MAAgB,cAAA,SAAhB,M;MUh9UgD,qBVg9UnB,OUh9UmB,EAAa,0BVg9UhC,OUh9UgC,CAAb,C;;IAE5C,OAAO,2BAAc,SAAd,EAAoB,UAApB,SR3CuD,YQ2C3B,cR3C2B,CQ2CvD,E;EACX,C;;;;;;;IGzDJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;EAFJ,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;;;;;IAFJ,yC;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,QAAA,wE;;EAAA,C;;;ICQoD,iBAAY,GAAZ,C;EAAA,C;;IAG1C,iBAAY,QAAS,aAArB,C;EAAA,C;;IAGN,UAAY,QAAS,aAArB,IAA6B,K;EACjC,C;uFAEA,yB;IAAA,8B;IAAA,0B;IAAA,yD;MACW,gB;MAAD,U;MAAA,KAAC,2BAAY,QAAS,aAArB,0DAAD,U;QAAuE,kBAAhB,Y;Qd8pBtD,sB;;UAyXS,U;UAAhB,yD;YAAgB,cAAhB,mB;YAAsB,IcvhC8D,OduhChD,OcvhCmD,WAAH,SduhC9D,C;cAAwB,qBAAO,O;cAAP,uB;;;UAC9C,qBAAO,I;;;QcxhCD,Sd8pBN,kB;;;Qc9pBM,a;MAAA,a;IAAA,C;GADV,C;;IAII,UAAY,QAAS,aAArB,IAA6B,uC;EACjC,C;;ICRI,+BAAoC,IAApC,EAA0C,QAA1C,EAAoD,OAApD,C;IAKA,+BAA+B,kB;IAC/B,kCAAqC,kB;EAVN,C;;If+iRxB,kBAAM,eeziRD,QfyiRc,OAAb,C;IA6UA,Q;IAAb,wBet3RY,Qfs3RZ,gB;MAAa,Wet3RD,Qfs3RZ,M;MACI,WAAY,Wev3RW,Gfu3RG,Iev3RA,MAAH,Efu3RG,Iev3RY,OAAf,Cfu3RX,C;;Iev3RZ,gCfw3RG,Wex3RH,C;EACJ,C;;;WAEA,sF;EAAA,C;;IDEA,6BAAqB,gDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;ECF7B,C;;;WACA,4F;EAAA,C;;IDCA,gCAAqB,mDAArB,IFtBJ,QEsBiC,WFtBjC,QEsBiC,kB;ECD7B,C;;;;;;;;ICAmE,ebwCzB,UaxCyB,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA9E,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,aAAzD,C;IAAoF,KC4D5F,a;ID5DE,+BC6DK,WD7D4F,SAAjG,C;EAAA,C;;IAGwE,kBAAlE,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,OAAzD,C;IAAwE,KCyDhF,a;IDzDE,+BC0DK,WD1DgF,SAArF,C;EAAA,C;;IEvBN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,4D;IAAS,4D;IAAS,gE;IAAW,4D;EAFjC,C;;;IAEI,wB;IAAA,mC;EAAA,C;;;IAAS,wB;IAAA,mC;EAAA,C;;;IAAS,wB;IAAA,qC;EAAA,C;;;IAAW,wB;IAAA,mC;EAAA,C;;;;;;;IAFjC,qJ;EAAA,C;;;IAAA,a;MAAA,e;QAAA,wC;MAAA,e;QAAA,wC;MAAA,iB;QAAA,0C;MAAA,e;QAAA,wC;MAAA,QAAA,mF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,8D;IAAO,oE;IAAU,gE;IAAQ,gE;IAAQ,oE;EAFrC,C;;;IAEI,2B;IAAA,oC;EAAA,C;;;IAAO,2B;IAAA,uC;EAAA,C;;;IAAU,2B;IAAA,qC;EAAA,C;;;IAAQ,2B;IAAA,qC;EAAA,C;;;IAAQ,2B;IAAA,uC;EAAA,C;;;;;;;IAFrC,mM;EAAA,C;;;IAAA,a;MAAA,a;QAAA,yC;MAAA,gB;QAAA,4C;MAAA,c;QAAA,0C;MAAA,c;QAAA,0C;MAAA,gB;QAAA,4C;MAAA,QAAA,sF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,sD;IACA,wE;IACA,8E;IACA,0E;IACA,0E;IACA,8E;IACA,sE;IACA,sE;IACA,0E;EAVJ,C;;;IAEI,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,yC;EAAA,C;;;IACA,wB;IAAA,4C;EAAA,C;;;IACA,wB;IAAA,0C;EAAA,C;;;IACA,wB;IAAA,0C;EAAA,C;;;IACA,wB;IAAA,4C;EAAA,C;;;IACA,wB;IAAA,wC;EAAA,C;;;IACA,wB;IAAA,wC;EAAA,C;;;IACA,wB;IAAA,0C;EAAA,C;;;;;;;IAVJ,sX;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,qC;MAAA,qB;QAAA,8C;MAAA,wB;QAAA,iD;MAAA,sB;QAAA,+C;MAAA,sB;QAAA,+C;MAAA,wB;QAAA,iD;MAAA,oB;QAAA,6C;MAAA,oB;QAAA,6C;MAAA,sB;QAAA,+C;MAAA,QAAA,mF;;EAAA,C;;;ICgBI,kCAAuC,IAAvC,EAA6C,QAA7C,EAAuD,OAAvD,C;IAKA,kCAA6B,kB;IAC7B,4BAAwB,kB;IACxB,2CAAsC,kB;IACtC,+BAA0B,kB;IAC1B,6BAAwB,kB;IACxB,gCAA2B,kB;EAdI,C;;IrB6iRxB,kBAAM,eqBviRD,QrBuiRc,OAAb,C;IA6UA,Q;IAAb,wBqBp3RY,QrBo3RZ,gB;MAAa,WqBp3RD,QrBo3RZ,M;MACI,WAAY,WqBr3RW,GrBq3RG,IqBr3RA,MAAH,ErBq3RG,IqBr3RY,OAAf,CrBq3RX,C;;IqBr3RZ,gCrBs3RG,WqBt3RH,C;EACJ,C;;;WAEA,4F;EAAA,C;;IAAA,6FTtBJ,QSsBI,C;EAAA,C;;;WACA,iF;EAAA,C;;IAAA,kFTvBJ,GSuBI,C;EAAA,C;;;WACA,8G;EAAA,C;;IAAA,+GTxBJ,iBSwBI,C;EAAA,C;;;WACA,sF;EAAA,C;;IAAA,uFTzBJ,KSyBI,C;EAAA,C;;;WACA,kF;EAAA,C;;IAAA,mFT1BJ,GS0BI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFT3BJ,MS2BI,C;EAAA,C;;IAUe,Q;IVnCf,UAAa,E;IU4BT,YV3BG,G;IU6BwB,kBAA3B,QlB6BsC,UkB7BtC,EAAa,YAAb,C;IAAiC,KJiDrC,a;IhB+9CgB,U;IAAA,SgB99CT,WIlDqC,kBpBghD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MoBhhDyD,UpBghD5C,OE9zCmC,I;MkBlNc,YpBghDjD,OEjzCmC,M;MkB9NxD,MAAM,GAAN,IAAa,K;;IAIjB,qCAAW,uDAAX,C;EACJ,C;;;;;;;;ICZmE,enBmCzB,UmBnCyB,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA9E,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,aAAzD,C;IAAoF,KLuD5F,a;IKvDE,+BLwDK,WKxD4F,SAAjG,C;EAAA,C;;IAGwE,kBAAlE,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,OAAzD,C;IAAwE,KLoDhF,a;IKpDE,+BLqDK,WKrDgF,SAArF,C;EAAA,C;;IC5BN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,sD;IACA,sE;IACA,oD;EAJJ,C;;;IAEI,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,wC;EAAA,C;;;IACA,wB;IAAA,+B;EAAA,C;;;;;;;IAJJ,8G;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,qC;MAAA,oB;QAAA,6C;MAAA,W;QAAA,oC;MAAA,QAAA,kF;;EAAA,C;;;IZCI,UAAa,E;IaQb,8BAAkC,IAAlC,EbPO,GaOP,C;IAEU,qBAAN,UAAM,EAAQ,QAAR,C;EALe,C;;IxBmjRlB,kBAAM,ewB1iRD,QxB0iRc,OAAb,C;IA6UA,Q;IAAb,wBwBv3RY,QxBu3RZ,gB;MAAa,WwBv3RD,QxBu3RZ,M;mBACI,W;MwBx3RuB,IAAC,MxBw3RE,IwBx3RF,aAAD;QAAM,QxBw3RH,IwBx3RG,a;MxBw3RjB,YAAZ,WAAY,EwBx3R2B,QAAO,KAAP,CxBw3R3B,C;;IwBx3RZ,gCxBy3RG,WwBz3RH,C;EACJ,C;;IvB8wCO,kBAAM,eAAa,wBuB3wCd,QvB2wCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OuBh1CD,QvBg1CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MuBj1CuB,IAAC,MvBi1CE,IuBj1CF,aAAD;QAAM,QvBi1CH,IuBj1CG,a;MvBi1CjB,YAAZ,WAAY,EuBj1C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CvBi1C3B,C;;IuBj1CZ,gCvBk1CG,WuBl1CH,C;EACJ,C;;IxBqiRO,kBAAM,ewBliRD,QxBkiRc,OAAb,C;IA6UA,Q;IAAb,wBwB/2RY,QxB+2RZ,gB;MAAa,WwB/2RD,QxB+2RZ,M;mBACI,W;MwBh3RuB,IAAC,MxBg3RE,IwBh3RF,aAAD;QAAM,QxBg3RH,IwBh3RG,a;MxBg3RjB,YAAZ,WAAY,EwBh3R2B,QAAO,KAAP,CxBg3R3B,C;;IwBh3RZ,gCxBi3RG,WwBj3RH,C;EACJ,C;;IAW6B,Q;IARzB,IAAI,QAAS,UAAb,C;MACI,M;;Ib3BR,UAAa,E;Ia8BT,iBb7BG,G;IV6iDS,U;IAAA,SuB9gDZ,QvB8gDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MuB9gDO,IAAC,MvB8gDK,OuB9gDL,aAAD;QAAM,QvB8gDA,OuB9gDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,UAAY,SAAZ,IAAyB,yD;EAC7B,C;;IAEmD,+BAAqB,I;EAAK,C;;IbrC7E,UAAa,E;IACN,GaqCsF,CAAK,OAAL,S;IbrCtF,GaqC6G,CAAK,OAAL,C;IAAjD,+BbrC5D,G;EaqC6H,C;;;;;;;;ICpB/D,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,KR6D3E,a;IQ7DE,+BR8DK,WQ9D2E,SAAhF,C;EAAA,C;;ICnBN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IACA,oE;EAHJ,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IACA,0B;IAAA,uC;EAAA,C;;;;;;;IAHJ,gF;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,iB;QAAA,4C;MAAA,QAAA,sF;;EAAA,C;;;ICiBI,kCAAsC,IAAtC,EAA4C,QAA5C,EAAsD,OAAtD,C;IAKA,sCAAuC,kB;IACvC,8BAA8B,kB;IAC9B,mCAA+B,kB;IAC/B,6BAAwB,kB;IACxB,kCAA8B,kB;IAC9B,iCAAkC,kB;EAdJ,C;;I3B4iRvB,kBAAM,e2BtiRD,Q3BsiRc,OAAb,C;IA6UA,Q;IAAb,wB2Bn3RY,Q3Bm3RZ,gB;MAAa,W2Bn3RD,Q3Bm3RZ,M;MACI,WAAY,W2Bp3RW,G3Bo3RG,I2Bp3RA,MAAH,E3Bo3RG,I2Bp3RY,OAAf,C3Bo3RX,C;;I2Bp3RZ,gC3Bq3RG,W2Br3RH,C;EACJ,C;;;WAEA,mG;EAAA,C;;IAAA,oGfvBJ,YeuBI,C;EAAA,C;;;WACA,oF;EAAA,C;;IbFA,4BAAqB,+CAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EaE7B,C;;;WACA,6F;EAAA,C;;IAAA,8FfzBJ,SeyBI,C;EAAA,C;;;WACA,iF;EAAA,C;;IAAA,kFf1BJ,Ge0BI,C;EAAA,C;;;WACA,2F;EAAA,C;;IAAA,4Ff3BJ,Qe2BI,C;EAAA,C;;;WACA,yF;EAAA,C;;IbNA,+BAAqB,iDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EaM7B,C;;IvB8DW,kBAAX,mB;IuB5D+E,KVmD/E,a;IUnDmD,yCvB4DnD,MaRO,WbQmB,UAA1B,CuB5DmD,C;EAAmC,C;;;;;;;;ICFrB,gBzBiCvB,UyBjCuB,EAAc,EAAd,C;EAAkB,C;;IAAE,kBAA7E,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,EAAuD,YAAvD,C;IAAmF,KXqD3F,a;IWrDE,+BXsDK,WWtD2F,SAAhG,C;EAAA,C;;IAGsE,kBAAhE,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,EAAuD,OAAvD,C;IAAsE,KXkD9E,a;IWlDE,+BXmDK,WWnD8E,SAAnF,C;EAAA,C;;IC9BN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,oC;IAAA,C;IAEI,0D;IAAS,0D;IAAS,8D;IAAW,sD;EAFjC,C;;;IAEI,uB;IAAA,kC;EAAA,C;;;IAAS,uB;IAAA,kC;EAAA,C;;;IAAS,uB;IAAA,oC;EAAA,C;;;IAAW,uB;IAAA,gC;EAAA,C;;;;;;;IAFjC,+I;EAAA,C;;;IAAA,a;MAAA,e;QAAA,uC;MAAA,e;QAAA,uC;MAAA,iB;QAAA,yC;MAAA,a;QAAA,qC;MAAA,QAAA,iF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,oC;IAAA,C;IAEI,oD;IACA,sD;IACA,oE;IACA,wE;IACA,gE;IACA,8D;IACA,kD;EARJ,C;;;IAEI,uB;IAAA,+B;EAAA,C;;;IACA,uB;IAAA,gC;EAAA,C;;;IACA,uB;IAAA,uC;EAAA,C;;;IACA,uB;IAAA,yC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,oC;EAAA,C;;;IACA,uB;IAAA,8B;EAAA,C;;;;;;;IARJ,6P;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,oC;MAAA,a;QAAA,qC;MAAA,oB;QAAA,4C;MAAA,sB;QAAA,8C;MAAA,kB;QAAA,0C;MAAA,iB;QAAA,yC;MAAA,W;QAAA,mC;MAAA,QAAA,iF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,gE;IAAU,sD;EAFd,C;;;IAEI,yB;IAAA,qC;EAAA,C;;;IAAU,yB;IAAA,gC;EAAA,C;;;;;;;IAFd,4E;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,0C;MAAA,W;QAAA,qC;MAAA,QAAA,mF;;EAAA,C;;;ICWI,kCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,OAAjE,C;IACA,oCAAgC,kB;IAChC,+BAAuB,kB;EANkB,C;;;WAKzC,0G;EAAA,C;;IAAA,2GpBbJ,UoBaI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGpBdJ,KoBcI,C;EAAA,C;;;;;;;;ICOgI,e9BwCtF,U8BxCsF,EAAa,EAAb,C;EAAiB,C;;IADvH,yB;MAAA,YAAqB,I;IACoG,kBAA3I,mCAA+B,yBAA/B,EAA0D,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA1D,EAAsH,uBAAtH,C;IAAiJ,KhB4DzJ,a;IgB5DE,+BhB6DK,WgB7DyJ,SAA9J,C;EAAA,C;;IAEiC,yB;MAAA,YAAqB,I;IAC+E,kBAA/H,mCAA+B,yBAA/B,EAA0D,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA1D,EAAsH,OAAtH,C;IAAqI,KhByD7I,a;IgBzDE,+BhB0DK,WgB1D6I,SAAlJ,C;EAAA,C;;ICRF,oCAAyD,IAAzD,EAA+D,QAA/D,EAAyE,OAAzE,C;IAEA,8BAA+B,kB;IAC/B,+BAAgC,kB;IAChC,iCAA8B,kB;IAC9B,mCAA+B,kB;IAC/B,+BAAuB,kB;EAVwB,C;;;WAM/C,oG;EAAA,C;;IAAA,qGtBlBJ,IsBkBI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uGtBnBJ,KsBmBI,C;EAAA,C;;;WACA,2G;EAAA,C;;IAAA,4GtBpBJ,QsBoBI,C;EAAA,C;;;WACA,8G;EAAA,C;;IAAA,+GtBrBJ,SsBqBI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uGtBtBJ,KsBsBI,C;EAAA,C;;I9BoEW,kBAAX,mB;I8BlE+D,KjByD/D,a;IiBzD2C,iC9BkE3C,MaRO,WbQmB,UAA1B,C8BlE2C,C;EAA2B,C;;I9BkE3D,kBAAX,mB;I8BjEiE,KjBwDjE,a;IiBxD4C,kC9BiE5C,MaRO,WbQmB,UAA1B,C8BjE4C,C;EAA4B,C;;;;;;;;ICA2B,kBhCoCzD,UgCpCyD,EAAgB,EAAhB,C;EAAoB,C;;IAAE,kBAAjH,yCAAqC,+BAArC,EAA+E,OAAT,QAAS,CAA/E,EAAyF,6BAAzF,C;IAAuH,KlBwD/H,a;IkBxDE,+BlByDK,WkBzD+H,SAApI,C;EAAA,C;;IAGwG,kBAAlG,yCAAqC,+BAArC,EAA+E,OAAT,QAAS,CAA/E,EAAyF,OAAzF,C;IAAwG,KlBqDhH,a;IkBrDE,+BlBsDK,WkBtDgH,SAArH,C;EAAA,C;;ICZF,oCAAyC,IAAzC,EAA+C,QAA/C,EAAyD,OAAzD,C;IAKA,+BAA+B,kB;IAC/B,mCAA+B,kB;IAC/B,8BAAyB,kB;IACzB,8BAA0B,kB;IAC1B,8BAA6B,kB;IAC7B,iCAAmC,kB;EAdJ,C;;IpC8iRxB,kBAAM,eoCxiRD,QpCwiRc,OAAb,C;IA6UA,Q;IAAb,wBoCr3RY,QpCq3RZ,gB;MAAa,WoCr3RD,QpCq3RZ,M;MACI,WAAY,WoCt3RW,GpCs3RG,IoCt3RA,MAAH,EpCs3RG,IoCt3RY,OAAf,CpCs3RX,C;;IoCt3RZ,gCpCu3RG,WoCv3RH,C;EACJ,C;;;WAEA,sF;EAAA,C;;ItBCA,6BAAqB,gDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EsBD7B,C;;;WACA,8F;EAAA,C;;IAAA,+FxBtBJ,SwBsBI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qFxBvBJ,IwBuBI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qFxBxBJ,IwBwBI,C;EAAA,C;;;WACA,oF;EAAA,C;;ItBHA,4BAAqB,+CAArB,IFtBJ,IEsBiC,WFtBjC,IEsBiC,kB;EsBG7B,C;;;WACA,0F;EAAA,C;;ItBJA,+BAAqB,kDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EsBI7B,C;;;;;;;;ICDmE,kBlCoCzB,UkCpCyB,EAAgB,EAAhB,C;EAAoB,C;;IAAE,kBAAjF,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,aAAzD,C;IAAuF,KpBwD/F,a;IoBxDE,+BpByDK,WoBzD+F,SAApG,C;EAAA,C;;IAGwE,kBAAlE,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,OAAzD,C;IAAwE,KpBqDhF,a;IoBrDE,+BpBsDK,WoBtDgF,SAArF,C;EAAA,C;;IC3BN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,4D;IAAS,4D;IAAS,4D;IAAS,gE;EAF/B,C;;;IAEI,wB;IAAA,mC;EAAA,C;;;IAAS,wB;IAAA,mC;EAAA,C;;;IAAS,wB;IAAA,mC;EAAA,C;;;IAAS,wB;IAAA,qC;EAAA,C;;;;;;;IAF/B,qJ;EAAA,C;;;IAAA,a;MAAA,e;QAAA,wC;MAAA,e;QAAA,wC;MAAA,e;QAAA,wC;MAAA,iB;QAAA,0C;MAAA,QAAA,mF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,oC;IAAA,C;IAEI,sD;IAAO,wD;IAAQ,sD;EAFnB,C;;;IAEI,uB;IAAA,gC;EAAA,C;;;IAAO,uB;IAAA,iC;EAAA,C;;;IAAQ,uB;IAAA,gC;EAAA,C;;;;;;;IAFnB,wG;EAAA,C;;;IAAA,a;MAAA,a;QAAA,qC;MAAA,c;QAAA,sC;MAAA,a;QAAA,qC;MAAA,QAAA,kF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,sD;IACA,wD;IACA,sD;IACA,oE;IACA,wE;IACA,sD;IACA,oE;IACA,wE;IACA,8D;IACA,4E;IACA,iF;IACA,iE;IACA,+E;IACA,mF;IACA,2D;IACA,yE;IACA,6E;IACA,qD;IACA,qE;IACA,uE;IACA,+D;IACA,uE;IACA,uD;IACA,iE;IACA,iE;IACA,iE;EA3BJ,C;;;IAEI,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,iC;EAAA,C;;;IACA,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,uC;EAAA,C;;;IACA,wB;IAAA,yC;EAAA,C;;;IACA,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,uC;EAAA,C;;;IACA,wB;IAAA,yC;EAAA,C;;;IACA,wB;IAAA,oC;EAAA,C;;;IACA,wB;IAAA,2C;EAAA,C;;;IACA,wB;IAAA,6C;EAAA,C;;;IACA,wB;IAAA,qC;EAAA,C;;;IACA,wB;IAAA,4C;EAAA,C;;;IACA,wB;IAAA,8C;EAAA,C;;;IACA,wB;IAAA,kC;EAAA,C;;;IACA,wB;IAAA,yC;EAAA,C;;;IACA,wB;IAAA,2C;EAAA,C;;;IACA,wB;IAAA,+B;EAAA,C;;;IACA,wB;IAAA,uC;EAAA,C;;;IACA,wB;IAAA,wC;EAAA,C;;;IACA,wB;IAAA,oC;EAAA,C;;;IACA,wB;IAAA,wC;EAAA,C;;;IACA,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,qC;EAAA,C;;;IACA,wB;IAAA,qC;EAAA,C;;;IACA,wB;IAAA,qC;EAAA,C;;;;;;;IA3BJ,k+B;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,qC;MAAA,a;QAAA,sC;MAAA,Y;QAAA,qC;MAAA,mB;QAAA,4C;MAAA,qB;QAAA,8C;MAAA,Y;QAAA,qC;MAAA,mB;QAAA,4C;MAAA,qB;QAAA,8C;MAAA,gB;QAAA,yC;MAAA,uB;QAAA,gD;MAAA,yB;QAAA,kD;MAAA,iB;QAAA,0C;MAAA,wB;QAAA,iD;MAAA,0B;QAAA,mD;MAAA,c;QAAA,uC;MAAA,qB;QAAA,8C;MAAA,uB;QAAA,gD;MAAA,W;QAAA,oC;MAAA,mB;QAAA,4C;MAAA,oB;QAAA,6C;MAAA,gB;QAAA,yC;MAAA,oB;QAAA,6C;MAAA,Y;QAAA,qC;MAAA,iB;QAAA,0C;MAAA,iB;QAAA,0C;MAAA,iB;QAAA,0C;MAAA,QAAA,mF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IAAM,kE;IAAU,oE;EAFpB,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IAAM,0B;IAAA,sC;EAAA,C;;;IAAU,0B;IAAA,uC;EAAA,C;;;;;;;IAFpB,sH;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,gB;QAAA,2C;MAAA,iB;QAAA,4C;MAAA,QAAA,qF;;EAAA,C;;;ICiBI,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,mCAA4B,kB;IAC5B,sCAAkC,kB;IAClC,kCAA8B,kB;IAC9B,uCAAmC,kB;IACnC,4CAAwC,kB;IACxC,qCAAiC,kB;IACjC,+CAA0C,kB;IAC1C,wCAA8C,kB;IAC9C,0CAAqC,kB;IACrC,8BAA8B,kB;EAlBkC,C;;I1C4iRzD,kBAAM,e0CtiRD,Q1CsiRc,OAAb,C;IA6UA,Q;IAAb,wB0Cn3RY,Q1Cm3RZ,gB;MAAa,W0Cn3RD,Q1Cm3RZ,M;MACI,WAAY,W0Cp3RW,G1Co3RG,I0Cp3RA,MAAH,E1Co3RG,I0Cp3RY,OAAf,C1Co3RX,C;;I0Cp3RZ,gC1Cq3RG,W0Cr3RH,C;EACJ,C;;;WAEA,kG;EAAA,C;;IAAA,mG9BvBJ,S8BuBI,C;EAAA,C;;;WACA,wG;EAAA,C;;IAAA,yG9BxBJ,Y8BwBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG9BzBJ,Q8ByBI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2G9B1BJ,a8B0BI,C;EAAA,C;;;WACA,oH;EAAA,C;;IAAA,qH9B3BJ,kB8B2BI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uG9B5BJ,W8B4BI,C;EAAA,C;;;WACA,0H;EAAA,C;;IAAA,2H9B7BJ,qB8B6BI,C;EAAA,C;;;WACA,4G;EAAA,C;;IAAA,6G9B9BJ,c8B8BI,C;EAAA,C;;;WACA,gH;EAAA,C;;IAAA,iH9B/BJ,gB8B+BI,C;EAAA,C;;;WACA,wF;EAAA,C;;I5BVA,4BAAqB,mDAArB,IFtBJ,IEsBiC,WFtBjC,IEsBiC,kB;E4BU7B,C;;I/B9BA,UAAa,E;I+BgC2E,K/B9BpF,CADG,GACH,C;I+B8BwD,6C/B/BrD,G+B+BqD,C;EAAmC,C;;;;;;;ICtB/F,mCAAgD,IAAhD,EAAsD,QAAtD,EAAgE,qCAAhE,C;IAKA,+BAA4B,e;EARA,C;;I3CijRrB,kBAAM,e2C5iRD,Q3C4iRc,OAAb,C;IA6UA,Q;IAAb,wB2Cz3RY,Q3Cy3RZ,gB;MAAa,W2Cz3RD,Q3Cy3RZ,M;MACI,WAAY,W2C13RW,G3C03RG,I2C13RA,MAAH,E3C03RG,I2C13RY,OAAf,C3C03RX,C;;I2C13RZ,gC3C23RG,W2C33RH,C;EACJ,C;;;WAEA,8F;EAAA,C;;IAAA,+F/BjBJ,M+BiBI,C;EAAA,C;;IALkE,gBxCiDxB,UwCjDwB,EAAc,EAAd,C;EAAkB,C;;;;;;;;ICoBT,kBzC6BjC,UyC7BiC,EAAgB,EAAhB,C;EAAoB,C;;IAAE,kBAAzF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA+F,K3BiDvG,a;I2BjDE,+B3BkDK,W2BlDuG,SAA5G,C;EAAA,C;;IAGgF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,K3B8CxF,a;I2B9CE,+B3B+CK,W2B/CwF,SAA7F,C;EAAA,C;;IClCN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,8D;IACA,sE;IACA,8E;EAJJ,C;;;IAEI,4B;IAAA,oC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,4C;EAAA,C;;;;;;;IAJJ,+H;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,yC;MAAA,gB;QAAA,6C;MAAA,oB;QAAA,iD;MAAA,QAAA,2F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IAAM,4D;IAAQ,4D;IAAQ,0D;EAF1B,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IAAM,0B;IAAA,kC;EAAA,C;;;IAAQ,0B;IAAA,kC;EAAA,C;;;IAAQ,0B;IAAA,iC;EAAA,C;;;;;;;IAF1B,8I;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,c;QAAA,uC;MAAA,c;QAAA,uC;MAAA,a;QAAA,sC;MAAA,QAAA,uF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,0C;IAAA,C;IAEI,gE;IACA,oE;IAAQ,kF;IAAe,kF;IACvB,kE;IAAO,gF;IAAc,gF;EAJzB,C;;;IAEI,6B;IAAA,qC;EAAA,C;;;IACA,6B;IAAA,uC;EAAA,C;;;IAAQ,6B;IAAA,8C;EAAA,C;;;IAAe,6B;IAAA,8C;EAAA,C;;;IACvB,6B;IAAA,sC;EAAA,C;;;IAAO,6B;IAAA,6C;EAAA,C;;;IAAc,6B;IAAA,6C;EAAA,C;;;;;;;IAJzB,+S;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,0C;MAAA,c;QAAA,4C;MAAA,qB;QAAA,mD;MAAA,qB;QAAA,mD;MAAA,a;QAAA,2C;MAAA,oB;QAAA,kD;MAAA,oB;QAAA,kD;MAAA,QAAA,4F;;EAAA,C;;;;ICiB+E,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,K/B+DjF,a;I+B/DE,+B/BgEK,W+BhEiF,SAAtF,C;EAAA,C;;ICNF,+BAAkC,IAAlC,EAAwC,QAAxC,EAAkD,OAAlD,C;IACA,gCAA4B,kB;EALC,C;;;WAK7B,sF;EAAA,C;;IAAA,uFrCbJ,MqCaI,C;EAAA,C;;;;;;;;ICO+D,e/CyCrB,U+CzCqB,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA1E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAgF,KjC6DxF,a;IiC7DE,+BjC8DK,WiC9DwF,SAA7F,C;EAAA,C;;IAGoE,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KjC0D5E,a;IiC1DE,+BjC2DK,WiC3D4E,SAAjF,C;EAAA,C;;ICbF,oCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,OAAjE,C;EAJuC,C;;;;;;;;ICY4C,kBjD2CzC,UiD3CyC,EAAgB,EAAhB,C;EAAoB,C;;IAAE,kBAAjG,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAuG,KnC+D/G,a;ImC/DE,+BnCgEK,WmChE+G,SAApH,C;EAAA,C;;IAGwF,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,KnC4DhG,a;ImC5DE,+BnC6DK,WmC7DgG,SAArG,C;EAAA,C;;ICTF,kCAA8C,IAA9C,EAA6D,SAAT,QAAS,CAA7D,EAAuE,qCAAvE,C;IAKA,8CAA0C,kB;EARd,C;;IrDijRrB,kBAAM,eqD5iRD,QrD4iRc,OAAb,C;IA6UA,Q;IAAb,wBqDz3RY,QrDy3RZ,gB;MAAa,WqDz3RD,QrDy3RZ,M;MACI,WAAY,WqD13RW,GrD03RG,IqD13RA,MAAH,ErD03RG,IqD13RY,OAAf,CrD03RX,C;;IqD13RZ,gCrD23RG,WqD33RH,C;EACJ,C;;;WAEA,yH;EAAA,C;;IAAA,0HzCjBJ,oByCiBI,C;EAAA,C;;IALyE,elDiD/B,UkDjD+B,EAAa,EAAb,C;EAAiB,C;;;;;;;;ICIf,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,KrCiEjF,a;IqCjEE,+BrCkEK,WqClEiF,SAAtF,C;EAAA,C;;ICfN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,0C;IAAA,C;IAEI,gE;IAAM,gG;IAAsB,oE;EAFhC,C;;;IAEI,6B;IAAA,qC;EAAA,C;;;IAAM,6B;IAAA,qD;EAAA,C;;;IAAsB,6B;IAAA,uC;EAAA,C;;;;;;;IAFhC,wI;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,0C;MAAA,4B;QAAA,0D;MAAA,c;QAAA,4C;MAAA,QAAA,6F;;EAAA,C;;;ICSI,kCAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;EAJoC,C;;;;;;;;ICYkF,etD2C5E,UsD3C4E,EAAa,EAAb,C;EAAiB,C;;IADlH,yB;MAAA,YAAqB,I;IAC+F,kBAAjI,8BAA0B,oBAA1B,EAAgD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAhD,EAA4G,kBAA5G,C;IAAuI,KxC+D/I,a;IwC/DE,+BxCgEK,WwChE+I,SAApJ,C;EAAA,C;;IAE4B,yB;MAAA,YAAqB,I;IAC0E,kBAArH,8BAA0B,oBAA1B,EAAgD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAhD,EAA4G,OAA5G,C;IAA2H,KxC4DnI,a;IwC5DE,+BxC6DK,WwC7DmI,SAAxI,C;EAAA,C;;ICHF,kCAA2C,IAA3C,EAAiD,QAAjD,EAA2D,OAA3D,C;IAKA,gCAAiC,kB;IACjC,gCAAiC,kB;IACjC,2CAAuC,kB;IACvC,mCAAoC,kB;IACpC,kDAA6C,kB;IAC7C,+BAAgC,kB;IAChC,8CAAyC,kB;EAfN,C;;IAM/B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,4F;EAAA,C;;IAAA,6F9CvBJ,M8CuBI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6F9CxBJ,M8CwBI,C;EAAA,C;;;WACA,kH;EAAA,C;;IAAA,mH9CzBJ,iB8CyBI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mG9C1BJ,S8C0BI,C;EAAA,C;;;WACA,gI;EAAA,C;;IAAA,iI9C3BJ,wB8C2BI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2F9C5BJ,K8C4BI,C;EAAA,C;;;WACA,wH;EAAA,C;;IAAA,yH9C7BJ,oB8C6BI,C;EAAA,C;;ItD6DW,kBAAX,mB;IsD3DmE,KzCkDnE,a;IyClD6C,mCtD2D7C,MaRO,WbQmB,UAA1B,CsD3D6C,C;EAA6B,C;;ItD2D/D,kBAAX,mB;IsD1DmE,KzCiDnE,a;IyCjD6C,mCtD0D7C,MaRO,WbQmB,UAA1B,CsD1D6C,C;EAA6B,C;;ItD0D/D,kBAAX,mB;IsDzDyE,KzCgDzE,a;IyChDgD,sCtDyDhD,MaRO,WbQmB,UAA1B,CsDzDgD,C;EAAgC,C;;ItDyDrE,kBAAX,mB;IsDxDiE,KzC+CjE,a;IyC/C4C,kCtDwD5C,MaRO,WbQmB,UAA1B,CsDxD4C,C;EAA4B,C;;IAGpE,qDAAsC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAAhE,C;EACJ,C;;IAEI,qDAAsC,aAAX,mBAAW,MAAe,IAAf,EAA6B,KAA7B,CAAoC,MAA1E,C;EACJ,C;;IAEI,iDAAkC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAA5D,C;EACJ,C;;IAEI,iDAAkC,aAAX,mBAAW,MAAe,IAAf,EAA6B,KAA7B,CAAoC,MAAtE,C;EACJ,C;;;;;;;;ICnB2E,exDiCjC,UwDjCiC,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAtF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA4F,K1CqDpG,a;I0CrDE,+B1CsDK,W0CtDoG,SAAzG,C;EAAA,C;;IAGgF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,K1CkDxF,a;I0ClDE,+B1CmDK,W0CnDwF,SAA7F,C;EAAA,C;;IC9BN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,8D;IAAM,kE;IAAQ,kE;IAAQ,oE;IAAS,gE;IAAO,wE;EAF1C,C;;;IAEI,4B;IAAA,oC;EAAA,C;;;IAAM,4B;IAAA,sC;EAAA,C;;;IAAQ,4B;IAAA,sC;EAAA,C;;;IAAQ,4B;IAAA,uC;EAAA,C;;;IAAS,4B;IAAA,qC;EAAA,C;;;IAAO,4B;IAAA,yC;EAAA,C;;;;;;;IAF1C,4O;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,yC;MAAA,c;QAAA,2C;MAAA,c;QAAA,2C;MAAA,e;QAAA,4C;MAAA,a;QAAA,0C;MAAA,iB;QAAA,8C;MAAA,QAAA,2F;;EAAA,C;;;ICYI,kCAA0C,IAA1C,EAAgD,QAAhD,EAA0D,OAA1D,C;IAKA,+BAA0B,kB;IAC1B,6BAAwB,kB;IACxB,+BAAuB,kB;EAXW,C;;IAM9B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,yF;EAAA,C;;IAAA,0FjDlBJ,KiDkBI,C;EAAA,C;;;WACA,qF;EAAA,C;;IAAA,sFjDnBJ,GiDmBI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FjDpBJ,KiDoBI,C;EAAA,C;;;;;;;;ICEyE,e3DuC/B,U2DvC+B,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAApF,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,gBAA/D,C;IAA0F,K7C2DlG,a;I6C3DE,+B7C4DK,W6C5DkG,SAAvG,C;EAAA,C;;IAG8E,kBAAxE,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,OAA/D,C;IAA8E,K7CwDtF,a;I6CxDE,+B7CyDK,W6CzDsF,SAA3F,C;EAAA,C;;ICxBN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,4D;IAAM,8D;EAFV,C;;;IAEI,2B;IAAA,mC;EAAA,C;;;IAAM,2B;IAAA,oC;EAAA,C;;;;;;;IAFV,8E;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,wC;MAAA,a;QAAA,yC;MAAA,QAAA,yF;;EAAA,C;;;ICYI,oCAAwC,IAAxC,EAA8C,QAA9C,C;IAKA,+BAAiC,kB;IACjC,uCAAmC,kB;IACnC,2CAA4C,kB;IAC5C,+BAA0B,kB;EAXD,C;;IAKrB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,wF;EAAA,C;;IlDIA,6BAAqB,kDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EkDJ7B,C;;;WACA,wG;EAAA,C;;IAAA,yGpDnBJ,aoDmBI,C;EAAA,C;;;WACA,gH;EAAA,C;;IAAA,iHpDpBJ,iBoDoBI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFpDrBJ,KoDqBI,C;EAAA,C;;;;;;;;ICHqE,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,KhD+D3E,a;IgD/DE,+BhDgEK,WgDhE2E,SAAhF,C;EAAA,C;;ICjBN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,gE;IAAS,oE;IAAW,gE;EAFxB,C;;;IAEI,0B;IAAA,qC;EAAA,C;;;IAAS,0B;IAAA,uC;EAAA,C;;;IAAW,0B;IAAA,qC;EAAA,C;;;;;;;IAFxB,wH;EAAA,C;;;IAAA,a;MAAA,e;QAAA,0C;MAAA,iB;QAAA,4C;MAAA,e;QAAA,0C;MAAA,QAAA,uF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IACA,gE;IACA,kE;IACA,4E;IACA,0E;IACA,8E;EAPJ,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IACA,0B;IAAA,qC;EAAA,C;;;IACA,0B;IAAA,sC;EAAA,C;;;IACA,0B;IAAA,2C;EAAA,C;;;IACA,0B;IAAA,0C;EAAA,C;;;IACA,0B;IAAA,4C;EAAA,C;;;;;;;IAPJ,qP;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,e;QAAA,0C;MAAA,gB;QAAA,2C;MAAA,qB;QAAA,gD;MAAA,oB;QAAA,+C;MAAA,sB;QAAA,iD;MAAA,QAAA,uF;;EAAA,C;;;ICkBI,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,gCAAiC,kB;IACjC,mCAA+B,kB;IAC/B,+BAA6B,kB;IAC7B,oCAAqC,kB;IACrC,8BAA+B,kB;IAC/B,+BAAgC,kB;IAChC,kCAAwC,kB;IACxC,kCAA6B,kB;IAC7B,iCAAiC,kB;EAjBJ,C;;IAMzB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,sF;EAAA,C;;IAAA,uFxDxBJ,MwDwBI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FxDzBJ,SwDyBI,C;EAAA,C;;;WACA,oF;EAAA,C;;ItDJA,6BAAqB,8CAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EsDI7B,C;;;WACA,8F;EAAA,C;;IAAA,+FxD3BJ,UwD2BI,C;EAAA,C;;;WACA,kF;EAAA,C;;IAAA,mFxD5BJ,IwD4BI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qFxD7BJ,KwD6BI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FxD9BJ,QwD8BI,C;EAAA,C;;;WACA,0F;EAAA,C;;;WACA,wF;EAAA,C;;ItDVA,+BAAqB,gDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EsDU7B,C;;IhE0DW,kBAAX,mB;IgExDmE,KnD+CnE,a;ImD/C6C,mChEwD7C,MaRO,WbQmB,UAA1B,CgExD6C,C;EAA6B,C;;IhEwD/D,kBAAX,mB;IgEvD2E,KnD8C3E,a;ImD9CiD,uChEuDjD,MaRO,WbQmB,UAA1B,CgEvDiD,C;EAAiC,C;;IhEuDvE,kBAAX,mB;IgEtD+D,KnD6C/D,a;ImD7C2C,iChEsD3C,MaRO,WbQmB,UAA1B,CgEtD2C,C;EAA2B,C;;IhEsD3D,kBAAX,mB;IgErDiE,KnD4CjE,a;ImD5C4C,kChEqD5C,MaRO,WbQmB,UAA1B,CgErD4C,C;EAA4B,C;;IACtC,8BAAyB,K;EAAM,C;;IAC/B,8BAAyB,K;EAAM,C;;;;;;;;ICTF,elE+BrB,UkE/BqB,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA1E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAgF,KpDmDxF,a;IoDnDE,+BpDoDK,WoDpDwF,SAA7F,C;EAAA,C;;IAGoE,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KpDgD5E,a;IoDhDE,+BpDiDK,WoDjD4E,SAAjF,C;EAAA,C;;IChCN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,wD;IAAS,wD;IAAS,4D;EAFtB,C;;;IAEI,sB;IAAA,iC;EAAA,C;;;IAAS,sB;IAAA,iC;EAAA,C;;;IAAS,sB;IAAA,mC;EAAA,C;;;;;;;IAFtB,4G;EAAA,C;;;IAAA,a;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,kD;IACA,kE;IACA,sE;IACA,4D;IACA,oF;IACA,wF;IACA,4D;IACA,oF;IACA,wF;IACA,0D;IACA,yE;IACA,6E;IACA,uD;IACA,+E;IACA,mF;IACA,uE;IACA,mD;IACA,2E;IACA,+E;IACA,qD;IACA,+D;IACA,uF;IACA,2F;IACA,uG;IACA,2G;EA1BJ,C;;;IAEI,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,sC;EAAA,C;;;IACA,sB;IAAA,wC;EAAA,C;;;IACA,sB;IAAA,mC;EAAA,C;;;IACA,sB;IAAA,+C;EAAA,C;;;IACA,sB;IAAA,iD;EAAA,C;;;IACA,sB;IAAA,mC;EAAA,C;;;IACA,sB;IAAA,+C;EAAA,C;;;IACA,sB;IAAA,iD;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;;IACA,sB;IAAA,yC;EAAA,C;;;IACA,sB;IAAA,2C;EAAA,C;;;IACA,sB;IAAA,gC;EAAA,C;;;IACA,sB;IAAA,4C;EAAA,C;;;IACA,sB;IAAA,8C;EAAA,C;;;IACA,sB;IAAA,wC;EAAA,C;;;IACA,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,0C;EAAA,C;;;IACA,sB;IAAA,4C;EAAA,C;;;IACA,sB;IAAA,+B;EAAA,C;;;IACA,sB;IAAA,oC;EAAA,C;;;IACA,sB;IAAA,gD;EAAA,C;;;IACA,sB;IAAA,kD;EAAA,C;;;IACA,sB;IAAA,wD;EAAA,C;;;IACA,sB;IAAA,0D;EAAA,C;;;;;;;IA1BJ,4hC;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mC;MAAA,oB;QAAA,2C;MAAA,sB;QAAA,6C;MAAA,iB;QAAA,wC;MAAA,6B;QAAA,oD;MAAA,+B;QAAA,sD;MAAA,iB;QAAA,wC;MAAA,6B;QAAA,oD;MAAA,+B;QAAA,sD;MAAA,gB;QAAA,uC;MAAA,uB;QAAA,8C;MAAA,yB;QAAA,gD;MAAA,c;QAAA,qC;MAAA,0B;QAAA,iD;MAAA,4B;QAAA,mD;MAAA,sB;QAAA,6C;MAAA,Y;QAAA,mC;MAAA,wB;QAAA,+C;MAAA,0B;QAAA,iD;MAAA,a;QAAA,oC;MAAA,kB;QAAA,yC;MAAA,8B;QAAA,qD;MAAA,gC;QAAA,uD;MAAA,sC;QAAA,6D;MAAA,wC;QAAA,+D;MAAA,QAAA,+E;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,4D;IAAS,8D;EAFb,C;;;IAEI,wB;IAAA,mC;EAAA,C;;;IAAS,wB;IAAA,oC;EAAA,C;;;;;;;IAFb,8E;EAAA,C;;;IAAA,a;MAAA,e;QAAA,wC;MAAA,gB;QAAA,yC;MAAA,QAAA,iF;;EAAA,C;;;ICaI,kCAAmD,IAAnD,EAAkE,SAAT,QAAS,CAAlE,EAA4E,0CAA5E,C;IAKA,+BAAyC,kB;IACzC,uCAAmC,kB;IACnC,8BAAyB,kB;IACzB,+BAAuB,kB;IACvB,mCAA8B,kB;IAC9B,+BAA0B,kB;IAC1B,iCAA6C,kB;EAdZ,C;;IAK7B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,gG;EAAA,C;;I3DGA,6BAAqB,0DAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;E2DH7B,C;;;WACA,gH;EAAA,C;;IAAA,iH7DpBJ,a6DoBI,C;EAAA,C;;;WACA,8F;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG7DtBJ,K6DsBI,C;EAAA,C;;;WACA,wG;EAAA,C;;IAAA,yG7DvBJ,S6DuBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG7DxBJ,K6DwBI,C;EAAA,C;;;WACA,oG;EAAA,C;;I3DHA,+BAAqB,4DAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;E2DG7B,C;;IAE6B,0BAAqB,I;EAAK,C;;IAC1B,0BAAqB,I;EAAK,C;;IAduB,etE+CpC,UsE/CoC,EAAa,EAAb,C;EAAiB,C;;;;;;;;ICSV,kBAA7E,mCAA+B,yBAA/B,EAAmE,OAAT,QAAS,CAAnE,C;IAAmF,KzD0D3F,a;IyD1DE,+BzD2DK,WyD3D2F,SAAhG,C;EAAA,C;;ICtBN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,gF;IAAS,oF;IAAW,gF;EAFxB,C;;;IAEI,kC;IAAA,6C;EAAA,C;;;IAAS,kC;IAAA,+C;EAAA,C;;;IAAW,kC;IAAA,6C;EAAA,C;;;;;;;IAFxB,gJ;EAAA,C;;;IAAA,a;MAAA,e;QAAA,kD;MAAA,iB;QAAA,oD;MAAA,e;QAAA,kD;MAAA,QAAA,uG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,0E;IACA,8E;IACA,4F;IACA,0F;IACA,8F;IACA,wE;IACA,8E;IACA,0F;IACA,wG;IACA,wG;EAXJ,C;;;IAEI,kC;IAAA,0C;EAAA,C;;;IACA,kC;IAAA,4C;EAAA,C;;;IACA,kC;IAAA,mD;EAAA,C;;;IACA,kC;IAAA,kD;EAAA,C;;;IACA,kC;IAAA,oD;EAAA,C;;;IACA,kC;IAAA,yC;EAAA,C;;;IACA,kC;IAAA,4C;EAAA,C;;;IACA,kC;IAAA,kD;EAAA,C;;;IACA,kC;IAAA,yD;EAAA,C;;;IACA,kC;IAAA,yD;EAAA,C;;;;;;;IAXJ,+e;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,+C;MAAA,c;QAAA,iD;MAAA,qB;QAAA,wD;MAAA,oB;QAAA,uD;MAAA,sB;QAAA,yD;MAAA,W;QAAA,8C;MAAA,c;QAAA,iD;MAAA,oB;QAAA,uD;MAAA,2B;QAAA,8D;MAAA,2B;QAAA,8D;MAAA,QAAA,uG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,iD;IAAA,C;IAEI,4F;IAAa,gG;IAAe,kF;EAFhC,C;;;IAEI,oC;IAAA,mD;EAAA,C;;;IAAa,oC;IAAA,qD;EAAA,C;;;IAAe,oC;IAAA,8C;EAAA,C;;;;;;;IAFhC,6J;EAAA,C;;;IAAA,a;MAAA,mB;QAAA,wD;MAAA,qB;QAAA,0D;MAAA,c;QAAA,mD;MAAA,QAAA,yG;;EAAA,C;;;IlECI,UAAa,E;ImEOb,iCAA8C,IAA9C,EnENO,GmEMP,C;EAF2B,C;;IAIuC,sB;MAAA,SAAkB,I;IAChF,IAAI,CAAC,MAAL,C;MACI,uBAAa,K;MACb,M;;IAGJ,uBAAa,KAAM,W;EACvB,C;;IACkE,sB;MAAA,SAAkB,I;IAChF,IAAI,CAAC,MAAL,C;MACI,uBAAa,K;MACb,M;;IAGJ,uBAAa,KAAM,W;EACvB,C;;;;;;;;ICP6D,kBAArD,6BAAyB,0BAAzB,C;IAA2D,K9D8DnE,a;I8D9DE,+B9D+DK,W8D/DmE,SAAxE,C;EAAA,C;;IClBN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,4E;IAAS,oF;IAAa,gF;EAF1B,C;;;IAEI,gC;IAAA,2C;EAAA,C;;;IAAS,gC;IAAA,+C;EAAA,C;;;IAAa,gC;IAAA,6C;EAAA,C;;;;;;;IAF1B,8I;EAAA,C;;;IAAA,a;MAAA,e;QAAA,gD;MAAA,mB;QAAA,oD;MAAA,iB;QAAA,kD;MAAA,QAAA,sG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,sF;IAAc,kF;EAFlB,C;;;IAEI,gC;IAAA,gD;EAAA,C;;;IAAc,gC;IAAA,8C;EAAA,C;;;;;;;IAFlB,qG;EAAA,C;;;IAAA,a;MAAA,oB;QAAA,qD;MAAA,kB;QAAA,mD;MAAA,QAAA,sG;;EAAA,C;;;ICiBI,kCAAyC,IAAzC,EAA+C,QAA/C,EAAyD,OAAzD,C;IAQA,+BAAuB,kB;IACvB,+BAA4B,kB;IAE5B,4BAA0B,kB;IAC1B,sCAAkC,kB;IAClC,uCAAmC,kB;IACnC,gCAA4B,kB;IAC5B,+BAA2B,kB;IAC3B,8BAA0B,kB;IAC1B,wCAAsE,kB;IACtE,iCAAuD,kB;IACvD,oCAA0D,kB;IAC1D,mCAAyD,kB;IACzD,gCAA6C,kB;IAC7C,mCAAgD,kB;IAChD,kCAA+C,kB;EA3Bd,C;;IlF4iR1B,kBAAM,ekFtiRD,QlFsiRc,OAAb,C;IA6UA,Q;IAAb,wBkFn3RY,QlFm3RZ,gB;MAAa,WkFn3RD,QlFm3RZ,M;MACI,WAAY,WkFp3RW,GlFo3RG,IkFp3RA,MAAH,ElFo3RG,IkFp3RY,OAAf,ClFo3RX,C;;IkFp3RZ,gClFq3RG,WkFr3RH,C;EACJ,C;;IAGY,OAAc,oBAAd,kBAAc,C;EAAd,C;;IACK,wCAAgC,KAAhC,C;EAAsC,C;;;WACvD,wF;EAAA,C;;IAAA,yFtE1BJ,KsE0BI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFtE3BJ,KsE2BI,C;EAAA,C;;;WAEA,kF;EAAA,C;;IAAA,mFtE7BJ,IsE6BI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uGtE9BJ,YsE8BI,C;EAAA,C;;;WACA,wG;EAAA,C;;IAAA,yGtE/BJ,asE+BI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FtEhCJ,MsEgCI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFtEjCJ,KsEiCI,C;EAAA,C;;;WACA,sF;EAAA,C;;IAAA,uFtElCJ,IsEkCI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2GtEnCJ,csEmCI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FtEpCJ,OsEoCI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mGtErCJ,UsEqCI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGtEtCJ,SsEsCI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FtEvCJ,MsEuCI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGtExCJ,SsEwCI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FtEzCJ,QsEyCI,C;EAAA,C;;IAE8B,6BAAwB,I;EAAK,C;;IACjB,6B;IvE1C1C,UAAa,E;IACN,GuEyCgE,CAAK,OAAL,S;IvEzChE,GuEyCuF,CAAK,KAAL,O;IAApD,evEzCnC,G;EuEyC2G,C;;IAC9F,6BAAwB,M;EAAO,C;;;;;;;;;WCxBvD,qE;EAAA,C;;IAAA,sEvErBA,iBuEqBA,C;EAAA,C;;;IAM2E,ehFkC7B,UgFlC6B,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAlF,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,eAA7D,C;IAAwF,KlEsDhG,a;IkEtDE,+BlEuDK,WkEvDgG,SAArG,C;EAAA,C;;IAG4E,kBAAtE,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,KlEmDpF,a;IkEnDE,+BlEoDK,WkEpDoF,SAAzF,C;EAAA,C;;IC7BN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,oE;IAAW,gE;IAAS,gE;IAAS,0E;EAFjC,C;;;IAEI,0B;IAAA,uC;EAAA,C;;;IAAW,0B;IAAA,qC;EAAA,C;;;IAAS,0B;IAAA,qC;EAAA,C;;;IAAS,0B;IAAA,0C;EAAA,C;;;;;;;IAFjC,kK;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,4C;MAAA,e;QAAA,0C;MAAA,e;QAAA,0C;MAAA,oB;QAAA,+C;MAAA,QAAA,uF;;EAAA,C;;;;ICe0B,+B;I1EdtB,UAAa,E;wBACN,G;;I0EaiF,kBAAX,mB;IAAiB,KpEiE9F,a;IoEjEE,+BAAM,8CnFF0D,YeoE3D,W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EAA2D,OAA3D,C;IAA0E,KpFuDlF,a;IoFvDE,+BpFwDK,WoFxDkF,SAAvF,C;EAAA,C;;ICzBN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,wD;IACA,gE;IACA,0D;IACA,0D;IACA,4D;EANJ,C;;;IAEI,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;;;;;IANJ,oL;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,c;QAAA,wC;MAAA,QAAA,qF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,sE;IAAW,8D;IAAO,gE;EAFtB,C;;;IAEI,2B;IAAA,wC;EAAA,C;;;IAAW,2B;IAAA,oC;EAAA,C;;;IAAO,2B;IAAA,qC;EAAA,C;;;;;;;IAFtB,wH;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,6C;MAAA,a;QAAA,yC;MAAA,c;QAAA,0C;MAAA,QAAA,uF;;EAAA,C;;;ICiBI,kCAAkC,IAAlC,EAAwC,QAAxC,EAAkD,gCAAlD,C;IAKA,gCAAiC,kB;IACjC,uCAAkC,kB;IAClC,mCAA8B,kB;IAC9B,oCAA+B,kB;IAC/B,iCAAuC,kB;IACvC,8BAA0B,kB;IAC1B,oCAA+B,kB;IAC/B,oCAA+B,kB;IAC/B,+BAA4B,kB;IAC5B,iCAAmC,kB;EAjBa,C;;IAK5C,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,wF;EAAA,C;;I1FDA,8BAAqB,iDAArB,IFtBJ,MEsBiC,WFtBjC,MEsBiC,kB;E0FC7B,C;;;WACA,sG;EAAA,C;;IAAA,uG5FxBJ,a4FwBI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+F5FzBJ,S4FyBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG5F1BJ,U4F0BI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2F5F3BJ,O4F2BI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qF5F5BJ,I4F4BI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG5F7BJ,U4F6BI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG5F9BJ,U4F8BI,C;EAAA,C;;;WACA,sF;EAAA,C;;IAAA,uF5F/BJ,K4F+BI,C;EAAA,C;;;WACA,0F;EAAA,C;;I1FVA,+BAAqB,kDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;E0FU7B,C;;IAE2C,wCAAmC,I;EAAK,C;;IACxD,qB;MAAA,QAAiB,I;IAAM,oB;MAAA,OAAgB,I;IAAQ,6B;I7FjC1E,UAAa,E;IACN,G6FgC2G,CAAK,OAAL,S;I7FhC3G,G6FgCkI,CAAK,MAAL,Q;IAA/D,0B7FhCnE,G;E6FgCwJ,C;;IAjB3G,erG2CV,UqG3CU,EAAa,EAAb,C;EAAiB,C;;;;;;;;ICYJ,kBAAzD,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,C;IAA+D,KxFmDvE,a;IwFnDE,+BxFoDK,WwFpDuE,SAA5E,C;EAAA,C;;IC7BN,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,wD;IAAM,sD;IAAK,0D;IAAO,4D;EAFtB,C;;;IAEI,yB;IAAA,iC;EAAA,C;;;IAAM,yB;IAAA,gC;EAAA,C;;;IAAK,yB;IAAA,kC;EAAA,C;;;IAAO,yB;IAAA,mC;EAAA,C;;;;;;;IAFtB,6I;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,sC;MAAA,W;QAAA,qC;MAAA,a;QAAA,uC;MAAA,c;QAAA,wC;MAAA,QAAA,oF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,sD;IACA,0D;IACA,wD;IACA,4E;IACA,8E;IACA,0E;IACA,gF;IACA,wF;IACA,sF;IACA,0F;IACA,6F;IACA,yD;EAbJ,C;;;IAEI,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,kC;EAAA,C;;;IACA,wB;IAAA,iC;EAAA,C;;;IACA,wB;IAAA,2C;EAAA,C;;;IACA,wB;IAAA,4C;EAAA,C;;;IACA,wB;IAAA,0C;EAAA,C;;;IACA,wB;IAAA,6C;EAAA,C;;;IACA,wB;IAAA,iD;EAAA,C;;;IACA,wB;IAAA,gD;EAAA,C;;;IACA,wB;IAAA,kD;EAAA,C;;;IACA,wB;IAAA,mD;EAAA,C;;;IACA,wB;IAAA,iC;EAAA,C;;;;;;;IAbJ,+f;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,qC;MAAA,c;QAAA,uC;MAAA,a;QAAA,sC;MAAA,uB;QAAA,gD;MAAA,wB;QAAA,iD;MAAA,sB;QAAA,+C;MAAA,yB;QAAA,kD;MAAA,6B;QAAA,sD;MAAA,4B;QAAA,qD;MAAA,8B;QAAA,uD;MAAA,+B;QAAA,wD;MAAA,a;QAAA,sC;MAAA,QAAA,mF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,oE;IAAW,sE;IAAY,oE;EAF3B,C;;;IAEI,0B;IAAA,uC;EAAA,C;;;IAAW,0B;IAAA,wC;EAAA,C;;;IAAY,0B;IAAA,uC;EAAA,C;;;;;;;IAF3B,6H;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,4C;MAAA,kB;QAAA,6C;MAAA,iB;QAAA,4C;MAAA,QAAA,qF;;EAAA,C;;;ICeI,+BAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;IAKA,uCAAiC,kB;IACjC,yCAAqC,kB;IACrC,kCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,kCAAiD,kB;EAbV,C;;IAMnC,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,8G;EAAA,C;;IAAA,+GjGrBJ,aiGqBI,C;EAAA,C;;;WACA,kH;EAAA,C;;IAAA,mHjGtBJ,eiGsBI,C;EAAA,C;;;WACA,oG;EAAA,C;;IAAA,qGjGvBJ,QiGuBI,C;EAAA,C;;;WACA,oG;EAAA,C;;IAAA,qGjGxBJ,QiGwBI,C;EAAA,C;;;WACA,oG;EAAA,C;;IAAA,qGjGzBJ,QiGyBI,C;EAAA,C;;IlGvBA,UAAa,E;IkGyBqE,KlGvB9E,CADG,GACH,C;IkGuBqD,0ClGxBlD,GkGwBkD,C;EAAgC,C;;;;;;;IC1B7F,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,sE;IACA,4E;IACA,8E;IACA,8E;EALJ,C;;;IA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G,SAAnH,C;EAAA,C;;ICZF,oCAAsC,IAAtC,EAA4C,QAA5C,EAAsD,OAAtD,C;IAEA,+BAA+B,kB;IAC/B,8BAAyB,kB;IACzB,8BAA6B,kB;IAC7B,iCAAgC,kB;EATJ,C;;;WAM5B,mF;EAAA,C;;I1GKA,6BAAqB,6CAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;E0GL7B,C;;;WACA,iF;EAAA,C;;IAAA,kF5GlBJ,I4GkBI,C;EAAA,C;;;WACA,iF;EAAA,C;;I1GGA,4BAAqB,4CAArB,IFtBJ,IEsBiC,WFtBjC,IEsBiC,kB;E0GH7B,C;;;WACA,uF;EAAA,C;;I1GEA,+BAAqB,+CAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;E0GF7B,C;;;;;;;ICnBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,kC;IAAA,C;IAEI,gD;IACA,kD;IACA,sD;IACA,0D;IACA,wD;IACA,gE;IACA,wD;IACA,gE;IACA,0D;IACA,4D;EAXJ,C;;;IAEI,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,gC;EAAA,C;;;IACA,qB;IAAA,kC;EAAA,C;;;IACA,qB;IAAA,iC;EAAA,C;;;IACA,qB;IAAA,qC;EAAA,C;;;IACA,qB;IAAA,iC;EAAA,C;;;IACA,qB;IAAA,qC;EAAA,C;;;IACA,qB;IAAA,kC;EAAA,C;;;IACA,qB;IAAA,mC;EAAA,C;;;;;;;IAXJ,qV;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,e;QAAA,qC;MAAA,iB;QAAA,uC;MAAA,gB;QAAA,sC;MAAA,oB;QAAA,0C;MAAA,gB;QAAA,sC;MAAA,oB;QAAA,0C;MAAA,iB;QAAA,uC;MAAA,kB;QAAA,wC;MAAA,QAAA,6E;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,oC;IAAA,C;IAEI,sD;IAAO,4D;EAFX,C;;;IAEI,uB;IAAA,gC;EAAA,C;;;IAAO,uB;IAAA,mC;EAAA,C;;;;;;;IAFX,0E;EAAA,C;;;IAAA,a;MAAA,a;QAAA,qC;MAAA,gB;QAAA,wC;MAAA,QAAA,+E;;EAAA,C;;;;ICsBiE,kBxHsCnB,UwHtCmB,EAAgB,EAAhB,C;EAAoB,C;;IAAE,kBAA3E,sBAAkB,YAAlB,EAAyC,OAAT,QAAS,CAAzC,EAAmD,UAAnD,C;IAAiF,K1G0DzF,a;I0G1DE,+B1G2DK,W0G3DyF,SAA9F,C;EAAA,C;;IAGkE,kBAA5D,sBAAkB,YAAlB,EAAyC,OAAT,QAAS,CAAzC,EAAmD,OAAnD,C;IAAkE,K1GuD1E,a;I0GvDE,+B1GwDK,W0GxD0E,SAA/E,C;EAAA,C;;IClBF,qB;MjHNA,UAAa,E;MiHMb,QjHLO,G;;IiHMP,8BAA8B,IAA9B,EAAoC,KAApC,C;EAHqB,C;;IAKe,oBAAU,I;EAAK,C;;IAC7B,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IjHVzD,UAAa,E;IACN,GiHSyE,CAAK,OAAL,S;IjHTzE,GiHSgG,CAAK,MAAL,Q;IAAtC,oBjHT1D,G;EiHSsH,C;;;;;;;;ICGnF,kBAAlC,uBAAmB,aAAnB,C;IAAwC,K5GkEhD,a;I4GlEE,+B5GmEK,W4GnEgD,SAArD,C;EAAA,C;;ICJF,mCAA0C,IAA1C,EAAgD,QAAhD,C;IAKA,0CAAsC,kB;EARV,C;;IAKxB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,iH;EAAA,C;;IAAA,kHlHhBJ,gBkHgBI,C;EAAA,C;;;;;;;ICfJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,0C;IAAA,C;IAEI,gE;IACA,0E;IACA,sE;IACA,wE;IACA,gF;IACA,4E;IACA,kE;IACA,0E;IACA,kE;IACA,wF;IACA,qF;IACA,2F;IACA,uF;EAdJ,C;;;IAEI,6B;IAAA,qC;EAAA,C;;;IACA,6B;IAAA,0C;EAAA,C;;;IACA,6B;IAAA,wC;EAAA,C;;;IACA,6B;IAAA,yC;EAAA,C;;;IACA,6B;IAAA,6C;EAAA,C;;;IACA,6B;IAAA,2C;EAAA,C;;;IACA,6B;IAAA,sC;EAAA,C;;;IACA,6B;IAAA,0C;EAAA,C;;;IACA,6B;IAAA,sC;EAAA,C;;;IACA,6B;IAAA,iD;EAAA,C;;;IACA,6B;IAAA,+C;EAAA,C;;;IACA,6B;IAAA,kD;EAAA,C;;;IACA,6B;IAAA,gD;EAAA,C;;;;;;;IAdJ,ujB;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,0C;MAAA,iB;QAAA,+C;MAAA,e;QAAA,6C;MAAA,gB;QAAA,8C;MAAA,oB;QAAA,kD;MAAA,kB;QAAA,gD;MAAA,a;QAAA,2C;MAAA,iB;QAAA,+C;MAAA,a;QAAA,2C;MAAA,wB;QAAA,sD;MAAA,sB;QAAA,oD;MAAA,yB;QAAA,uD;MAAA,uB;QAAA,qD;MAAA,QAAA,6F;;EAAA,C;;;;ICgB+E,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,K/GgEjF,a;I+GhEE,+B/GiEK,W+GjEiF,SAAtF,C;EAAA,C;;ICFF,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,mCAA+B,kB;IAC/B,gCAAsC,kB;IACtC,kCAA8B,kB;IAC9B,iCAAwC,kB;EAd0B,C;;IAM9D,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,iG;EAAA,C;;IAAA,kGrHpBJ,QqHoBI,C;EAAA,C;;;WACA,2F;EAAA,C;;IAAA,4FrHrBJ,KqHqBI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oGrHtBJ,SqHsBI,C;EAAA,C;;;WACA,6F;EAAA,C;;InHDA,8BAAqB,sDAArB,IFtBJ,MEsBiC,WFtBjC,MEsBiC,kB;EmHC7B,C;;;WACA,iG;EAAA,C;;IAAA,kGrHxBJ,QqHwBI,C;EAAA,C;;;WACA,+F;EAAA,C;;InHHA,+BAAqB,uDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EmHG7B,C;;;;;;;ICxBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,2C;IAAA,C;IAEI,kE;IAAM,oE;IAAO,sE;EAFjB,C;;;IAEI,8B;IAAA,sC;EAAA,C;;;IAAM,8B;IAAA,uC;EAAA,C;;;IAAO,8B;IAAA,wC;EAAA,C;;;;;;;IAFjB,4H;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,2C;MAAA,a;QAAA,4C;MAAA,c;QAAA,6C;MAAA,QAAA,8F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,0C;IAAA,C;IAEI,gE;IACA,gF;IACA,8E;IACA,0E;EALJ,C;;;IAEI,6B;IAAA,qC;EAAA,C;;;IACA,6B;IAAA,6C;EAAA,C;;;IACA,6B;IAAA,4C;EAAA,C;;;IACA,6B;IAAA,0C;EAAA,C;;;;;;;IALJ,+K;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,0C;MAAA,oB;QAAA,kD;MAAA,mB;QAAA,iD;MAAA,iB;QAAA,+C;MAAA,QAAA,6F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,4C;IAAA,C;IAEI,4E;IAAU,4E;IAAU,wE;EAFxB,C;;;IAEI,+B;IAAA,2C;EAAA,C;;;IAAU,+B;IAAA,2C;EAAA,C;;;IAAU,+B;IAAA,yC;EAAA,C;;;;;;;IAFxB,sI;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,gD;MAAA,gB;QAAA,gD;MAAA,c;QAAA,8C;MAAA,QAAA,+F;;EAAA,C;;;;ICwBiF,elIoCnC,UkIpCmC,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAxF,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,EAAmE,kBAAnE,C;IAA8F,KpHwDtG,a;IoHxDE,+BpHyDK,WoHzDsG,SAA3G,C;EAAA,C;;IAGkF,kBAA5E,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,EAAmE,OAAnE,C;IAAkF,KpHqD1F,a;IoHrDE,+BpHsDK,WoHtD0F,SAA/F,C;EAAA,C;;ICdF,kCAAqD,IAArD,EAA2D,QAA3D,EAAqE,0CAArE,C;IAKA,iCAAyB,kB;IACzB,iCAAkC,kB;IAClC,kCAA8B,kB;IAC9B,kCAA2B,kB;IAC3B,+BAAgC,kB;IAChC,wCAAsD,kB;IACtD,8BAAyB,kB;IACzB,kCAAiD,kB;IACjD,+BAA0B,kB;EAhBO,C;;IAK7B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,oG;EAAA,C;;IAAA,qG1HnBJ,O0HmBI,C;EAAA,C;;;WACA,oG;EAAA,C;;IAAA,qG1HpBJ,O0HoBI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uG1HrBJ,Q0HqBI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uG1HtBJ,Q0HsBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG1HvBJ,K0HuBI,C;EAAA,C;;;WACA,kH;EAAA,C;;IxHFA,sCAAqB,mEAArB,IFtBJ,cEsBiC,WFtBjC,cEsBiC,kB;EwHE7B,C;;;WACA,8F;EAAA,C;;IAAA,+F1HzBJ,I0HyBI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uG1H1BJ,Q0H0BI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG1H3BJ,K0H2BI,C;EAAA,C;;IAE6B,oCAAU,CAAV,C;EAAY,C;;IACX,oCAAU,CAAV,C;EAAY,C;;IlI4D/B,kBAAX,mB;IkI3DqE,KrHkDrE,a;IqHlD8C,oClI2D9C,MaRO,WbQmB,UAA1B,CkI3D8C,C;EAA8B,C;;IlI2DjE,kBAAX,mB;IkI1DiE,KrHiDjE,a;IqHjD4C,kClI0D5C,MaRO,WbQmB,UAA1B,CkI1D4C,C;EAA4B,C;;IAlBD,iBnI+C7B,UmI/C6B,EAAe,EAAf,C;EAAmB,C;;;;;;;ICb9F,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mD;IAAA,C;IAEI,gF;IAAK,oF;IAAO,gF;IAAK,sF;EAFrB,C;;;IAEI,sC;IAAA,6C;EAAA,C;;;IAAK,sC;IAAA,+C;EAAA,C;;;IAAO,sC;IAAA,6C;EAAA,C;;;IAAK,sC;IAAA,gD;EAAA,C;;;;;;;IAFrB,gM;EAAA,C;;;IAAA,a;MAAA,W;QAAA,kD;MAAA,a;QAAA,oD;MAAA,W;QAAA,kD;MAAA,c;QAAA,qD;MAAA,QAAA,2G;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,0E;IACA,wG;IACA,oG;IACA,0G;IACA,kF;IACA,4E;EAPJ,C;;;IAEI,kC;IAAA,0C;EAAA,C;;;IACA,kC;IAAA,yD;EAAA,C;;;IACA,kC;IAAA,uD;EAAA,C;;;IACA,kC;IAAA,0D;EAAA,C;;;IACA,kC;IAAA,8C;EAAA,C;;;IACA,kC;IAAA,2C;EAAA,C;;;;;;;IAPJ,oT;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,+C;MAAA,2B;QAAA,8D;MAAA,yB;QAAA,4D;MAAA,4B;QAAA,+D;MAAA,gB;QAAA,mD;MAAA,a;QAAA,gD;MAAA,QAAA,uG;;EAAA,C;;;;ICwByF,kBAA7E,mCAA+B,yBAA/B,EAAmE,OAAT,QAAS,CAAnE,C;IAAmF,KxHwD3F,a;IwHxDE,+BxHyDK,WwHzD2F,SAAhG,C;EAAA,C;;ICbF,kCAAmC,IAAnC,EAAyC,QAAzC,EAAmD,mCAAnD,C;IAKA,6BAAyB,kB;EAR6B,C;;IAKlD,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,qF;EAAA,C;;IAAA,sF9HjBJ,G8HiBI,C;EAAA,C;;IALqD,evIiDX,UuIjDW,EAAa,EAAb,C;EAAiB,C;;;;;;;ICX1E,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,4D;IAAM,0D;EAFV,C;;;IAEI,2B;IAAA,mC;EAAA,C;;;IAAM,2B;IAAA,kC;EAAA,C;;;;;;;IAFV,4E;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,wC;MAAA,W;QAAA,uC;MAAA,QAAA,yF;;EAAA,C;;;;ICgB2E,kBAA/D,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,C;IAAqE,K3HgE7E,a;I2HhEE,+B3HiEK,W2HjE6E,SAAlF,C;EAAA,C;;ICFF,kCAA+C,IAA/C,EAAqD,QAArD,EAA+D,OAA/D,C;IAKA,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,gCAA4B,kB;IAC5B,iCAA6B,kB;IAC7B,+BAAyC,kB;IACzC,kCAA8B,kB;IAC9B,gCAA2C,kB;EAfJ,C;;IAMnC,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,oG;EAAA,C;;IAAA,qGjIpBJ,QiIoBI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FjIrBJ,KiIqBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGjItBJ,MiIsBI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mGjIvBJ,OiIuBI,C;EAAA,C;;;WACA,+F;EAAA,C;;I/HFA,6BAAqB,yDAArB,IFtBJ,MEsBiC,WFtBjC,MEsBiC,kB;E+HE7B,C;;;WACA,oG;EAAA,C;;IAAA,qGjIzBJ,QiIyBI,C;EAAA,C;;;WACA,iG;EAAA,C;;I/HJA,8BAAqB,0DAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;E+HI7B,C;;;;;;;ICzBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,8C;IAAA,C;IAEI,0E;EAFJ,C;;;IAEI,iC;IAAA,0C;EAAA,C;;;;;;;IAFJ,iD;EAAA,C;;;IAAA,a;MAAA,a;QAAA,+C;MAAA,QAAA,oG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,sE;IACA,wE;IACA,8E;IACA,oF;IACA,gF;IACA,4E;IACA,0E;IACA,8E;EATJ,C;;;IAEI,gC;IAAA,wC;EAAA,C;;;IACA,gC;IAAA,yC;EAAA,C;;;IACA,gC;IAAA,4C;EAAA,C;;;IACA,gC;IAAA,+C;EAAA,C;;;IACA,gC;IAAA,6C;EAAA,C;;;IACA,gC;IAAA,2C;EAAA,C;;;IACA,gC;IAAA,0C;EAAA,C;;;IACA,gC;IAAA,4C;EAAA,C;;;;;;;IATJ,iW;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,6C;MAAA,a;QAAA,8C;MAAA,gB;QAAA,iD;MAAA,mB;QAAA,oD;MAAA,iB;QAAA,kD;MAAA,e;QAAA,gD;MAAA,c;QAAA,+C;MAAA,gB;QAAA,iD;MAAA,QAAA,mG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,kF;IAAU,kF;IAAU,8E;EAFxB,C;;;IAEI,kC;IAAA,8C;EAAA,C;;;IAAU,kC;IAAA,8C;EAAA,C;;;IAAU,kC;IAAA,4C;EAAA,C;;;;;;;IAFxB,+I;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,mD;MAAA,gB;QAAA,mD;MAAA,c;QAAA,iD;MAAA,QAAA,qG;;EAAA,C;;;;ICyBuF,a9ImCzC,U8InCyC,EAAW,EAAX,C;EAAe,C;;IAAE,kBAA5F,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAkG,KhIuD1G,a;IgIvDE,+BhIwDK,WgIxD0G,SAA/G,C;EAAA,C;;IAGwF,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,KhIoDhG,a;IgIpDE,+BhIqDK,WgIrDgG,SAArG,C;EAAA,C;;IChBF,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,gCAA4B,kB;IAC5B,iCAA6B,kB;IAC7B,kCAA8B,kB;EAbgC,C;;IAM1D,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,+F;EAAA,C;;IAAA,gGtIlBJ,QsIkBI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FtInBJ,KsImBI,C;EAAA,C;;;WACA,2F;EAAA,C;;IAAA,4FtIpBJ,MsIoBI,C;EAAA,C;;;WACA,6F;EAAA,C;;IAAA,8FtIrBJ,OsIqBI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGtItBJ,QsIsBI,C;EAAA,C;;;;;;;ICrBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,4D;IACA,kE;IACA,oE;IACA,8D;IACA,gE;IACA,oE;IACA,oE;EARJ,C;;;IAEI,2B;IAAA,mC;EAAA,C;;;IACA,2B;IAAA,sC;EAAA,C;;;IACA,2B;IAAA,uC;EAAA,C;;;IACA,2B;IAAA,oC;EAAA,C;;;IACA,2B;IAAA,qC;EAAA,C;;;IACA,2B;IAAA,uC;EAAA,C;;;IACA,2B;IAAA,uC;EAAA,C;;;;;;;IARJ,8Q;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,wC;MAAA,e;QAAA,2C;MAAA,gB;QAAA,4C;MAAA,a;QAAA,yC;MAAA,c;QAAA,0C;MAAA,gB;QAAA,4C;MAAA,gB;QAAA,4C;MAAA,QAAA,yF;;EAAA,C;;;;ICuB6E,iBjJqC/B,UiJrC+B,EAAe,EAAf,C;EAAmB,C;;IAAE,kBAAtF,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,gBAA/D,C;IAA4F,KnIyDpG,a;ImIzDE,+BnI0DK,WmI1DoG,SAAzG,C;EAAA,C;;IAG8E,kBAAxE,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,OAA/D,C;IAA8E,KnIsDtF,a;ImItDE,+BnIuDK,WmIvDsF,SAA3F,C;EAAA,C;;ICdF,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,sCAA2C,kB;IAC3C,oCAAuC,kB;IACvC,mCAA+B,kB;IAC/B,mCAAqC,kB;IACrC,8BAA0B,kB;IAC1B,iCAAiC,kB;IACjC,4BAAoB,kB;IACpB,4BAAoB,kB;IACpB,4BAAoB,kB;IACpB,iCAAyB,kB;IACzB,8BAA2B,kB;IAC3B,4BAAoB,kB;IACpB,4BAAoB,kB;IACpB,sCAAkC,kB;EAtBL,C;;IAMzB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,kG;EAAA,C;;IvIIA,oCAAqB,qDAArB,IFtBJ,YEsBiC,WFtBjC,YEsBiC,kB;EuIJ7B,C;;;WACA,8F;EAAA,C;;IvIGA,kCAAqB,mDAArB,IFtBJ,UEsBiC,WFtBjC,UEsBiC,kB;EuIH7B,C;;;WACA,4F;EAAA,C;;IAAA,6FzIpBJ,SyIoBI,C;EAAA,C;;;WACA,4F;EAAA,C;;IvICA,iCAAqB,kDAArB,IFtBJ,SEsBiC,WFtBjC,SEsBiC,kB;EuID7B,C;;;WACA,kF;EAAA,C;;IAAA,mFzItBJ,IyIsBI,C;EAAA,C;;;WACA,wF;EAAA,C;;IvIDA,+BAAqB,gDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EuIC7B,C;;;WACA,8E;EAAA,C;;;WACA,8E;EAAA,C;;;WACA,8E;EAAA,C;;;WACA,wF;EAAA,C;;;WACA,kF;EAAA,C;;IvINA,4BAAqB,6CAArB,IFtBJ,IEsBiC,WFtBjC,IEsBiC,kB;EuIM7B,C;;;WACA,8E;EAAA,C;;;WACA,8E;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mGzI/BJ,YyI+BI,C;EAAA,C;;IAEW,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;;IAC7B,wBAAmB,C;EAAE,C;;IhJA9C,IAAI,EgJC8B,CAAL,cAAQ,EhJDjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;;IgJDgC,wBAAmB,C;EAAE,C;;IACpD,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;;IAC7B,wBAAmB,C;EAAE,C;;IhJH9C,IAAI,EgJI8B,CAAL,cAAQ,EhJJjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;;IgJEgC,wBAAmB,C;EAAE,C;;IACpD,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;;IAC7B,wBAAmB,C;EAAE,C;;IhJN9C,IAAI,EgJO8B,CAAL,cAAQ,EhJPjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;;IgJKgC,wBAAmB,C;EAAE,C;;IhJP/D,IAAI,CgJQ8B,UAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,gBAAS,CAAT,ChJR/D,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;;IgJMmE,6BAAwB,C;EAAE,C;;IAC5F,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;;IAC7B,wBAAmB,C;EAAE,C;;IhJV9C,IAAI,EgJW8B,CAAL,cAAQ,EhJXjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;;IgJSgC,wBAAmB,C;EAAE,C;;IACpD,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;;IAC7B,wBAAmB,C;EAAE,C;;IhJb9C,IAAI,EgJc8B,CAAL,cAAQ,EhJdjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;;IgJYgC,wBAAmB,C;EAAE,C;;;;;;;IC7CnE,e;IAC4B,oC;IAD5B,iB;IAAA,uB;EAC2B,C;;IAD3B,0C;IAAA,C;IAEI,uEAAQ,SAAR,C;IACA,qEAAO,QAAP,C;IACA,2EAAU,YAAV,C;IACA,uEAAQ,UAAR,C;IACA,iFAAa,eAAb,C;IACA,+EAAY,cAAZ,C;EAPJ,C;;;MAC4B,+B;IAAA,C;;;;IACxB,6B;IAAA,wC;EAAA,C;;;IACA,6B;IAAA,uC;EAAA,C;;;IACA,6B;IAAA,0C;EAAA,C;;;IACA,6B;IAAA,wC;EAAA,C;;;IACA,6B;IAAA,6C;EAAA,C;;;IACA,6B;IAAA,4C;EAAA,C;;IAEkC,qB;EAAA,C;;;;;;;IATtC,iQ;EAAA,C;;;IAAA,a;MAAA,e;QAAA,6C;MAAA,c;QAAA,4C;MAAA,iB;QAAA,+C;MAAA,e;QAAA,6C;MAAA,oB;QAAA,kD;MAAA,mB;QAAA,iD;MAAA,QAAA,sF;;EAAA,C;;;ICAA,e;IAC0B,oC;IAD1B,iB;IAAA,uB;EACyB,C;;IADzB,wC;IAAA,C;IAEI,uEAAU,YAAV,C;IACA,iEAAO,QAAP,C;IACA,mEAAQ,UAAR,C;IACA,mEAAQ,SAAR,C;IACA,qEAAS,UAAT,C;EANJ,C;;;MAC0B,+B;IAAA,C;;;;IACtB,2B;IAAA,wC;EAAA,C;;;IACA,2B;IAAA,qC;EAAA,C;;;IACA,2B;IAAA,sC;EAAA,C;;;IACA,2B;IAAA,sC;EAAA,C;;;IACA,2B;IAAA,uC;EAAA,C;;IAEkC,qB;EAAA,C;;;;;;;IARtC,uM;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,6C;MAAA,c;QAAA,0C;MAAA,e;QAAA,2C;MAAA,e;QAAA,2C;MAAA,gB;QAAA,4C;MAAA,QAAA,oF;;EAAA,C;;;ICAA,e;IACyB,oC;IADzB,iB;IAAA,uB;EACwB,C;;IADxB,uC;IAAA,C;IAEI,yDAAI,KAAJ,C;IACA,uEAAW,aAAX,C;IACA,+DAAO,QAAP,C;IACA,6EAAc,gBAAd,C;EALJ,C;;;MACyB,+B;IAAA,C;;;;IACrB,0B;IAAA,iC;EAAA,C;;;IACA,0B;IAAA,wC;EAAA,C;;;IACA,0B;IAAA,oC;EAAA,C;;;IACA,0B;IAAA,2C;EAAA,C;;IAEkC,qB;EAAA,C;;;;;;;IAPtC,+J;EAAA,C;;;IAAA,a;MAAA,W;QAAA,sC;MAAA,kB;QAAA,6C;MAAA,c;QAAA,yC;MAAA,qB;QAAA,gD;MAAA,QAAA,mF;;EAAA,C;;;ICAA,e;IACuB,oC;IADvB,iB;IAAA,uB;EACsB,C;;IADtB,qC;IAAA,C;IAEI,iEAAU,YAAV,C;IACA,2DAAO,QAAP,C;IACA,6DAAQ,UAAR,C;IACA,uEAAa,eAAb,C;IACA,qEAAY,cAAZ,C;IACA,qEAAY,cAAZ,C;EAPJ,C;;;MACuB,+B;IAAA,C;;;;IACnB,wB;IAAA,qC;EAAA,C;;;IACA,wB;IAAA,kC;EAAA,C;;;IACA,wB;IAAA,mC;EAAA,C;;;IACA,wB;IAAA,wC;EAAA,C;;;IACA,wB;IAAA,uC;EAAA,C;;;IACA,wB;IAAA,uC;EAAA,C;;IAEkC,qB;EAAA,C;;;;;;;IATtC,uO;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,0C;MAAA,c;QAAA,uC;MAAA,e;QAAA,wC;MAAA,oB;QAAA,6C;MAAA,mB;QAAA,4C;MAAA,mB;QAAA,4C;MAAA,QAAA,iF;;EAAA,C;;;ICAA,e;IACqB,oC;IADrB,iB;IAAA,uB;EACoB,C;;IADpB,mC;IAAA,C;IAEI,6DAAU,WAAV,C;IACA,mDAAK,MAAL,C;IACA,mEAAa,cAAb,C;IACA,6EAAkB,qBAAlB,C;IACA,2FAAyB,6BAAzB,C;IACA,qFAAsB,0BAAtB,C;IACA,mEAAa,gBAAb,C;IACA,6EAAkB,sBAAlB,C;IACA,+EAAmB,uBAAnB,C;IACA,qFAAsB,2BAAtB,C;IACA,kFAAoB,yBAApB,C;IACA,oFAAqB,yBAArB,C;IACA,oFAAqB,yBAArB,C;IACA,0FAAwB,6BAAxB,C;IACA,sFAAsB,2BAAtB,C;IACA,gGAA2B,gCAA3B,C;IACA,8FAA0B,+BAA1B,C;IACA,0EAAgB,mBAAhB,C;IACA,4EAAiB,qBAAjB,C;IACA,sFAAsB,0BAAtB,C;IACA,oFAAqB,yBAArB,C;IACA,oFAAqB,yBAArB,C;IACA,gEAAW,cAAX,C;IACA,kEAAY,eAAZ,C;IACA,kEAAY,eAAZ,C;IACA,kEAAY,eAAZ,C;IACA,kEAAY,eAAZ,C;IACA,gEAAW,cAAX,C;IACA,gEAAW,cAAX,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,4DAAS,YAAT,C;IACA,4DAAS,YAAT,C;IACA,4DAAS,YAAT,C;EA1CJ,C;;;MACqB,+B;IAAA,C;;;;IACjB,sB;IAAA,mC;EAAA,C;;;IACA,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,sC;EAAA,C;;;IACA,sB;IAAA,2C;EAAA,C;;;IACA,sB;IAAA,kD;EAAA,C;;;IACA,sB;IAAA,+C;EAAA,C;;;IACA,sB;IAAA,sC;EAAA,C;;;IACA,sB;IAAA,2C;EAAA,C;;;IACA,sB;IAAA,4C;EAAA,C;;;IACA,sB;IAAA,+C;EAAA,C;;;IACA,sB;IAAA,6C;EAAA,C;;;IACA,sB;IAAA,8C;EAAA,C;;;IACA,sB;IAAA,8C;EAAA,C;;;IACA,sB;IAAA,iD;EAAA,C;;;IACA,sB;IAAA,+C;EAAA,C;;;IACA,sB;IAAA,oD;EAAA,C;;;IACA,sB;IAAA,mD;EAAA,C;;;IACA,sB;IAAA,yC;EAAA,C;;;IACA,sB;IAAA,0C;EAAA,C;;;IACA,sB;IAAA,+C;EAAA,C;;;IACA,sB;IAAA,8C;EAAA,C;;;IACA,sB;IAAA,8C;EAAA,C;;;IACA,sB;IAAA,oC;EAAA,C;;;IACA,sB;IAAA,qC;EAAA,C;;;IACA,sB;IAAA,qC;EAAA,C;;;IACA,sB;IAAA,qC;EAAA,C;;;IACA,sB;IAAA,qC;EAAA,C;;;IACA,sB;IAAA,oC;EAAA,C;;;IACA,sB;IAAA,oC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;IAEkC,qB;EAAA,C;;;;;;;IA5CtC,mmD;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,wC;MAAA,Y;QAAA,mC;MAAA,oB;QAAA,2C;MAAA,yB;QAAA,gD;MAAA,gC;QAAA,uD;MAAA,6B;QAAA,oD;MAAA,oB;QAAA,2C;MAAA,yB;QAAA,gD;MAAA,0B;QAAA,i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AAY,EAAZ,C;EAAgB,C;;IAAE,kBAAzF,+BAA2B,qBAA3B,EAA2D,OAAT,QAAS,CAA3D,EAAqE,mBAArE,C;IAA+F,KhJ4DvG,a;IgJ5DE,+BhJ6DK,WgJ7DuG,SAA5G,C;EAAA,C;;IAGoF,kBAA9E,+BAA2B,qBAA3B,EAA2D,OAAT,QAAS,CAA3D,EAAqE,OAArE,C;IAAoF,KhJyD5F,a;IgJzDE,+BhJ0DK,WgJ1D4F,SAAjG,C;EAAA,C;;ICPF,kCAAmD,IAAnD,EAAyD,QAAzD,EAAmE,yCAAnE,C;IAKA,oCAAqC,kB;IACrC,wCAA0D,kB;IAC1D,kCAAmC,kB;IACnC,+BAAgC,kB;IAChC,uCAAwD,kB;EAZxB,C;;IAK5B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,yG;EAAA,C;;IAAA,0GtJtBJ,UsJsBI,C;EAAA,C;;;WACA,iH;EAAA,C;;IpJDA,sCAAqB,kEAArB,IFtBJ,cEsBiC,WFtBjC,cEsBiC,kB;EoJC7B,C;;;WACA,qG;EAAA,C;;IAAA,sGtJxBJ,QsJwBI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGtJzBJ,KsJyBI,C;EAAA,C;;;WACA,+G;EAAA,C;;IpJJA,qCAAqB,iEAArB,IFtBJ,aEsBiC,WFtBjC,aEsBiC,kB;EoJI7B,C;;I9JgEW,kBAAX,mB;I8J9D2E,KjJqD3E,a;IiJrDiD,uC9J8DjD,MaRO,WbQmB,UAA1B,C8J9DiD,C;EAAiC,C;;I9J8DvE,kBAAX,mB;I8J7DuE,KjJoDvE,a;IiJpD+C,qC9J6D/C,MaRO,WbQmB,UAA1B,C8J7D+C,C;EAA+B,C;;I9J6DnE,kBAAX,mB;I8J5DiE,KjJmDjE,a;IiJnD4C,kC9J4D5C,MaRO,WbQmB,UAA1B,C8J5D4C,C;EAA4B,C;;IAbH,e/J4C3B,U+J5C2B,EAAa,EAAb,C;EAAiB,C;;;;;;;IChB1F,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uD;IAAA,C;IAEI,0F;IAAM,4F;EAFV,C;;;IAEI,0C;IAAA,kD;EAAA,C;;;IAAM,0C;IAAA,mD;EAAA,C;;;;;;;IAFV,4G;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uD;MAAA,a;QAAA,wD;MAAA,QAAA,8G;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sD;IAAA,C;IAEI,sF;IAAK,4F;EAFT,C;;;IAEI,yC;IAAA,gD;EAAA,C;;;IAAK,yC;IAAA,mD;EAAA,C;;;;;;;IAFT,0G;EAAA,C;;;IAAA,a;MAAA,W;QAAA,qD;MAAA,c;QAAA,wD;MAAA,QAAA,6G;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,0E;IACA,wG;IACA,kG;IACA,0F;IACA,oF;IACA,8G;IACA,gH;IACA,4E;IACA,kF;IACA,sF;IACA,iH;EAZJ,C;;;IAEI,kC;IAAA,0C;EAAA,C;;;IACA,kC;IAAA,yD;EAAA,C;;;IACA,kC;IAAA,sD;EAAA,C;;;IACA,kC;IAAA,kD;EAAA,C;;;IACA,kC;IAAA,+C;EAAA,C;;;IACA,kC;IAAA,4D;EAAA,C;;;IACA,kC;IAAA,6D;EAAA,C;;;IACA,kC;IAAA,2C;EAAA,C;;;IACA,kC;IAAA,8C;EAAA,C;;;IACA,kC;IAAA,gD;EAAA,C;;;IACA,kC;IAAA,6D;EAAA,C;;;;;;;IAZJ,gkB;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,+C;MAAA,2B;QAAA,8D;MAAA,wB;QAAA,2D;MAAA,oB;QAAA,uD;MAAA,iB;QAAA,oD;MAAA,8B;QAAA,iE;MAAA,+B;QAAA,kE;MAAA,a;QAAA,gD;MAAA,gB;QAAA,mD;MAAA,kB;QAAA,qD;MAAA,+B;QAAA,kE;MAAA,QAAA,sG;;EAAA,C;;;;ICmBuF,kBAA3E,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,C;IAAiF,KrJ6DzF,a;IqJ7DE,+BrJ8DK,WqJ9DyF,SAA9F,C;EAAA,C;;I3JlBF,UAAa,E;I4JMb,8BAA8B,IAA9B,E5JLO,G4JKP,C;EAFqB,C;;IAIe,oBAAU,I;EAAK,C;;IAC7B,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;I5JTzD,UAAa,E;IACN,G4JQyE,CAAK,OAAL,S;I5JRzE,G4JQgG,CAAK,MAAL,Q;IAAtC,oB5JR1D,G;E4JQsH,C;;IACnG,oBAAU,M;EAAO,C;;;;;;;;ICOD,kBAAlC,uBAAmB,aAAnB,C;IAAwC,KvJ8DhD,a;IuJ9DE,+BvJ+DK,WuJ/DgD,SAArD,C;EAAA,C;;ICVF,qB;M9JPA,UAAa,E;M8JOb,Q9JNO,G;;I8JOP,wB;IAFA,gB;IACA,oB;EAFuB,C;;IAKb,QAAN,YAAM,C;EACV,C;;IAEe,kCAAc,SAAd,EAAoB,YAApB,SvKDmD,YuKCvB,cvKDuB,CuKCnD,E;EAAA,C;;IAEwB,iBAAO,CAAE,W;EAAW,C;;IxK8wCpD,kBAAM,eAAa,wBwK7wC0B,CxK6wC1B,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OwKl1CuC,CxKk1CvC,W;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WAAc,IwKn1CiC,WxKm1C/C,C;;IwKn1C6B,iBvKJqB,YDw1C3D,WCx1C2D,C;EuKIyB,C;;;;;;;ICjB/F,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,8C;IAAA,C;IAEI,oE;IAAI,sE;EAFR,C;;;IAEI,iC;IAAA,uC;EAAA,C;;;IAAI,iC;IAAA,wC;EAAA,C;;;;;;;IAFR,sF;EAAA,C;;;IAAA,a;MAAA,U;QAAA,4C;MAAA,W;QAAA,6C;MAAA,QAAA,4F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,kD;IAAI,kD;IAAI,kD;IAAI,kD;IAAI,kD;EAFpB,C;;;IAEI,wB;IAAA,8B;EAAA,C;;;IAAI,wB;IAAA,8B;EAAA,C;;;IAAI,wB;IAAA,8B;EAAA,C;;;IAAI,wB;IAAA,8B;EAAA,C;;;IAAI,wB;IAAA,8B;EAAA,C;;;;;;;IAFpB,6J;EAAA,C;;;IAAA,a;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,QAAA,mF;;EAAA,C;;;;IC2BkD,kBAAtC,yBAAqB,eAArB,C;IAA4C,K3JqDpD,a;I2JrDE,+B3JsDK,W2JtDoD,SAAzD,C;EAAA,C;;ICbF,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,+BAA6B,kB;IAC7B,kCAAmC,kB;EAVN,C;;IAMzB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,oF;EAAA,C;;I/JEA,6BAAqB,8CAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;E+JF7B,C;;;WACA,0F;EAAA,C;;I/JCA,gCAAqB,iDAArB,IFtBJ,QEsBiC,WFtBjC,QEsBiC,kB;E+JD7B,C;;;;;;;ICpBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,wD;IAAS,wD;IAAS,4D;IAAW,sD;IAAQ,oD;IAAO,0D;EAFhD,C;;;IAEI,sB;IAAA,iC;EAAA,C;;;IAAS,sB;IAAA,iC;EAAA,C;;;IAAS,sB;IAAA,mC;EAAA,C;;;IAAW,sB;IAAA,gC;EAAA,C;;;IAAQ,sB;IAAA,+B;EAAA,C;;;IAAO,sB;IAAA,kC;EAAA,C;;;;;;;IAFhD,6M;EAAA,C;;;IAAA,a;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,iB;QAAA,wC;MAAA,c;QAAA,qC;MAAA,a;QAAA,oC;MAAA,gB;QAAA,uC;MAAA,QAAA,+E;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,8D;IAAS,8D;IAAS,0D;IAAO,0D;EAF7B,C;;;IAEI,yB;IAAA,oC;EAAA,C;;;IAAS,yB;IAAA,oC;EAAA,C;;;IAAS,yB;IAAA,kC;EAAA,C;;;IAAO,yB;IAAA,kC;EAAA,C;;;;;;;IAF7B,mJ;EAAA,C;;;IAAA,a;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,QAAA,kF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,kD;IACA,kE;IACA,sE;IACA,gE;IACA,8D;IACA,oE;IACA,wE;IACA,oE;IACA,oE;EAVJ,C;;;IAEI,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,sC;EAAA,C;;;IACA,sB;IAAA,wC;EAAA,C;;;IACA,sB;IAAA,qC;EAAA,C;;;IACA,sB;IAAA,oC;EAAA,C;;;IACA,sB;IAAA,uC;EAAA,C;;;IACA,sB;IAAA,yC;EAAA,C;;;IACA,sB;IAAA,uC;EAAA,C;;;IACA,sB;IAAA,uC;EAAA,C;;;;;;;IAVJ,0V;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mC;MAAA,oB;QAAA,2C;MAAA,sB;QAAA,6C;MAAA,mB;QAAA,0C;MAAA,kB;QAAA,yC;MAAA,qB;QAAA,4C;MAAA,uB;QAAA,8C;MAAA,qB;QAAA,4C;MAAA,qB;QAAA,4C;MAAA,QAAA,+E;;EAAA,C;;;;ICoBmE,gB9KwCrB,U8KxCqB,EAAc,EAAd,C;EAAkB,C;;IAAE,kBAA3E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAiF,KhK4DzF,a;IgK5DE,+BhK6DK,WgK7DyF,SAA9F,C;EAAA,C;;IAGoE,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KhKyD5E,a;IgKzDE,+BhK0DK,WgK1D4E,SAAjF,C;EAAA,C;;ICVF,oCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAKA,+BAA+B,kB;EATG,C;;IlLgjR3B,kBAAM,ekL1iRD,QlL0iRc,OAAb,C;IA6UA,Q;IAAb,wBkLv3RY,QlLu3RZ,gB;MAAa,WkLv3RD,QlLu3RZ,M;MACI,WAAY,WkLx3RW,GlLw3RG,IkLx3RA,MAAH,ElLw3RG,IkLx3RY,OAAf,ClLw3RX,C;;IkLx3RZ,gClLy3RG,WkLz3RH,C;EACJ,C;;;WAEA,0F;EAAA,C;;IpKGA,6BAAqB,oDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EoKH7B,C;;;;;;;IClBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,8D;IACA,8E;IACA,8E;IACA,kF;IACA,sE;IACA,gE;EAPJ,C;;;IAEI,4B;IAAA,oC;EAAA,C;;;IACA,4B;IAAA,4C;EAAA,C;;;IACA,4B;IAAA,4C;EAAA,C;;;IACA,4B;IAAA,8C;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,qC;EAAA,C;;;;;;;IAPJ,8P;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,yC;MAAA,oB;QAAA,iD;MAAA,oB;QAAA,iD;MAAA,sB;QAAA,mD;MAAA,gB;QAAA,6C;MAAA,a;QAAA,0C;MAAA,QAAA,2F;;EAAA,C;;;;ICmB+E,kBjLyCjC,UiLzCiC,EAAgB,EAAhB,C;EAAoB,C;;IAAE,kBAAzF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA+F,KnK6DvG,a;ImK7DE,+BnK8DK,WmK9DuG,SAA5G,C;EAAA,C;;IAGgF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,KnK0DxF,a;ImK1DE,+BnK2DK,WmK3DwF,SAA7F,C;EAAA,C;;ICZF,mCAA+B,IAA/B,EAAqC,QAArC,C;IAKA,0CAAsC,kB;EARQ,C;;IAK1C,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,2G;EAAA,C;;IAAA,4GzKhBJ,gByKgBI,C;EAAA,C;;;;;;;ICfJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,oC;IAAA,C;IAEI,oD;IACA,kE;IACA,0D;IACA,4D;IACA,8D;IACA,sD;IACA,8D;IACA,8D;IACA,sD;IACA,4E;IACA,yE;IACA,+D;IACA,2E;EAdJ,C;;;IAEI,uB;IAAA,+B;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,kC;EAAA,C;;;IACA,uB;IAAA,mC;EAAA,C;;;IACA,uB;IAAA,oC;EAAA,C;;;IACA,uB;IAAA,gC;EAAA,C;;;IACA,uB;IAAA,oC;EAAA,C;;;IACA,uB;IAAA,oC;EAAA,C;;;IACA,uB;IAAA,gC;EAAA,C;;;IACA,uB;IAAA,2C;EAAA,C;;;IACA,uB;IAAA,yC;EAAA,C;;;IACA,uB;IAAA,oC;EAAA,C;;;IACA,uB;IAAA,0C;EAAA,C;;;;;;;IAdJ,+d;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,oC;MAAA,mB;QAAA,2C;MAAA,e;QAAA,uC;MAAA,gB;QAAA,wC;MAAA,iB;QAAA,yC;MAAA,a;QAAA,qC;MAAA,iB;QAAA,yC;MAAA,iB;QAAA,yC;MAAA,a;QAAA,qC;MAAA,wB;QAAA,gD;MAAA,sB;QAAA,8C;MAAA,iB;QAAA,yC;MAAA,uB;QAAA,+C;MAAA,QAAA,iF;;EAAA,C;;;;ICgBmE,kBAAvD,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,C;IAA6D,KtKgErE,a;IsKhEE,+BtKiEK,WsKjEqE,SAA1E,C;EAAA,C;;ICFF,kCAA+C,IAA/C,EAAqD,QAArD,EAA+D,OAA/D,C;IAKA,8CAA0C,kB;IAC1C,2CAAuC,kB;IACvC,kCAA6C,kB;IAC7C,iCAA2C,kB;EAZJ,C;;IAMnC,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,4H;EAAA,C;;IAAA,6H5KpBJ,oB4KoBI,C;EAAA,C;;;WACA,sH;EAAA,C;;IAAA,uH5KrBJ,iB4KqBI,C;EAAA,C;;;WACA,oG;EAAA,C;;I1KAA,gCAAqB,2DAArB,IFtBJ,QEsBiC,WFtBjC,QEsBiC,kB;E0KA7B,C;;;WACA,kG;EAAA,C;;I1KDA,+BAAqB,0DAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;E0KC7B,C;;;;;;;ICtBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,gD;IAAA,C;IAEI,8E;IAAO,0E;EAFX,C;;;IAEI,mC;IAAA,4C;EAAA,C;;;IAAO,mC;IAAA,0C;EAAA,C;;;;;;;IAFX,6F;EAAA,C;;;IAAA,a;MAAA,a;QAAA,iD;MAAA,W;QAAA,+C;MAAA,QAAA,sG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,sE;IACA,0E;IACA,wF;IACA,oF;IACA,sG;EANJ,C;;;IAEI,gC;IAAA,wC;EAAA,C;;;IACA,gC;IAAA,0C;EAAA,C;;;IACA,gC;IAAA,iD;EAAA,C;;;IACA,gC;IAAA,+C;EAAA,C;;;IACA,gC;IAAA,wD;EAAA,C;;;;;;;IANJ,iP;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,6C;MAAA,c;QAAA,+C;MAAA,qB;QAAA,sD;MAAA,mB;QAAA,oD;MAAA,4B;QAAA,6D;MAAA,QAAA,mG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,kF;IAAU,kF;IAAU,8E;EAFxB,C;;;IAEI,kC;IAAA,8C;EAAA,C;;;IAAU,kC;IAAA,8C;EAAA,C;;;IAAU,kC;IAAA,4C;EAAA,C;;;;;;;IAFxB,+I;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,mD;MAAA,gB;QAAA,mD;MAAA,c;QAAA,iD;MAAA,QAAA,qG;;EAAA,C;;;;ICsBuF,ezLsCzC,UyLtCyC,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA9F,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAoG,K3K0D5G,a;I2K1DE,+B3K2DK,W2K3D4G,SAAjH,C;EAAA,C;;IAGwF,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,K3KuDhG,a;I2KvDE,+B3KwDK,W2KxDgG,SAArG,C;EAAA,C;;ICHF,kCAAmC,IAAnC,EAAyC,QAAzC,EAAmD,mCAAnD,C;IAKA,sCAAiC,kB;IACjC,mCAA+B,kB;IAC/B,sCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,sCAAuC,kB;IACvC,+BAA2B,kB;IAC3B,mCAA+B,kB;IAC/B,4BAAuB,kB;IACvB,oCAA+B,kB;IAC/B,kCAA2B,kB;IAC3B,gCAAgC,kB;IAChC,mCAA+B,kB;IAC/B,8BAAyB,kB;IACzB,iCAAuC,kB;IACvC,kCAAwC,kB;IACxC,qCAAgC,kB;IAChC,kCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,8BAAyB,kB;IACzB,iCAA4B,kB;IAC5B,uCAAyC,kB;IACzC,8BAA4B,kB;IAC5B,+BAAuB,kB;EA9B+B,C;;IAKlD,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,uG;EAAA,C;;IAAA,wGjL5BJ,YiL4BI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGjL7BJ,SiL6BI,C;EAAA,C;;;WACA,uG;EAAA,C;;IAAA,wGjL9BJ,YiL8BI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGjL/BJ,QiL+BI,C;EAAA,C;;;WACA,uG;EAAA,C;;IAAA,wGjLhCJ,YiLgCI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FjLjCJ,KiLiCI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGjLlCJ,SiLkCI,C;EAAA,C;;;WACA,mF;EAAA,C;;IAAA,oFjLnCJ,EiLmCI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oGjLpCJ,UiLoCI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGjLrCJ,QiLqCI,C;EAAA,C;;;WACA,2F;EAAA,C;;I/KhBA,8BAAqB,oDAArB,IFtBJ,MEsBiC,WFtBjC,MEsBiC,kB;E+KgB7B,C;;;WACA,iG;EAAA,C;;IAAA,kGjLvCJ,SiLuCI,C;EAAA,C;;;WACA,uF;EAAA,C;;IAAA,wFjLxCJ,IiLwCI,C;EAAA,C;;;WACA,6F;EAAA,C;;IAAA,8FjLzCJ,OiLyCI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGjL1CJ,QiL0CI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sGjL3CJ,WiL2CI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGjL5CJ,QiL4CI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGjL7CJ,QiL6CI,C;EAAA,C;;;WACA,uF;EAAA,C;;IAAA,wFjL9CJ,IiL8CI,C;EAAA,C;;;WACA,6F;EAAA,C;;IAAA,8FjL/CJ,OiL+CI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2GjLhDJ,ciLgDI,C;EAAA,C;;;WACA,uF;EAAA,C;;I/K3BA,4BAAqB,kDAArB,IFtBJ,IEsBiC,WFtBjC,IEsBiC,kB;E+K2B7B,C;;;WACA,yF;EAAA,C;;IAAA,0FjLlDJ,KiLkDI,C;EAAA,C;;IAEkC,yCAAe,CAAf,C;EAAiB,C;;IACjB,yCAAe,CAAf,C;EAAiB,C;;IAChB,yCAAe,CAAf,C;EAAiB,C;;IACpB,yCAAe,CAAf,C;EAAiB,C;;IAChB,yCAAe,CAAE,WAAjB,C;EAA4B,C;;IAEzD,yCAA0B,eAAX,mBAAW,MAAuB,KAAvB,CAA1B,C;EACJ,C;;IAImC,IAAO,I;IAAtC,oCAA+B,cAAO,cAAP,MAAO,CAAP,6B;EACnC,C;;IASiB,Q;IlLvEjB,UAAa,E;IkLgET,YlL/DG,G;IkLiE0B,kBAA7B,U1LPsC,U0LOtC,EAAe,YAAf,C;IAAmC,K5KavC,a;IhB+9CgB,U;IAAA,SgB99CT,W4KduC,kB5L4+C9B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;M4L5+C2D,U5L4+C9C,OE9zCmC,I;M0L9KgB,Y5L4+CnD,OEjzCmC,M;M0L1LxD,MAAM,GAAN,IAAa,K;;IAIjB,uCAAa,uDAAb,C;EACJ,C;;IAEI,2CAA4B,eAAX,mBAAW,MAAuB,KAAvB,CAA5B,C;EACJ,C;;IAC0B,0BAAqB,C;EAAE,C;;IACvB,0BAAqB,C;EAAE,C;;IACpB,6BAAwB,C;EAAE,C;;IAC1B,6BAAwB,C;EAAE,C;;IAC5B,kCAAQ,CAAR,C;EAAU,C;;IACV,kCAAQ,CAAR,C;EAAU,C;;IACT,kCAAQ,CAAR,C;EAAU,C;;IACb,kCAAQ,CAAR,C;EAAU,C;;IACT,kCAAQ,CAAE,WAAV,C;EAAqB,C;;IA/DM,e1LsCX,U0LtCW,EAAa,EAAb,C;EAAiB,C;;;;;;;ICtB1E,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,4D;IACA,0E;IACA,kE;IACA,oE;IACA,4E;IACA,wE;IACA,8D;IACA,0E;IACA,sE;IACA,sE;IACA,+D;IACA,qF;IACA,iF;IACA,uE;IACA,mF;IACA,uF;IACA,mF;EAlBJ,C;;;IAEI,2B;IAAA,mC;EAAA,C;;;IACA,2B;IAAA,0C;EAAA,C;;;IACA,2B;IAAA,sC;EAAA,C;;;IACA,2B;IAAA,uC;EAAA,C;;;IACA,2B;IAAA,2C;EAAA,C;;;IACA,2B;IAAA,yC;EAAA,C;;;IACA,2B;IAAA,oC;EAAA,C;;;IACA,2B;IAAA,0C;EAAA,C;;;IACA,2B;IAAA,wC;EAAA,C;;;IACA,2B;IAAA,wC;EAAA,C;;;IACA,2B;IAAA,oC;EAAA,C;;;IACA,2B;IAAA,+C;EAAA,C;;;IACA,2B;IAAA,6C;EAAA,C;;;IACA,2B;IAAA,wC;EAAA,C;;;IACA,2B;IAAA,8C;EAAA,C;;;IACA,2B;IAAA,gD;EAAA,C;;;IACA,2B;IAAA,8C;EAAA,C;;;;;;;IAlBJ,usB;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,wC;MAAA,mB;QAAA,+C;MAAA,e;QAAA,2C;MAAA,gB;QAAA,4C;MAAA,oB;QAAA,gD;MAAA,kB;QAAA,8C;MAAA,a;QAAA,yC;MAAA,mB;QAAA,+C;MAAA,iB;QAAA,6C;MAAA,iB;QAAA,6C;MAAA,a;QAAA,yC;MAAA,wB;QAAA,oD;MAAA,sB;QAAA,kD;MAAA,iB;QAAA,6C;MAAA,uB;QAAA,mD;MAAA,yB;QAAA,qD;MAAA,uB;QAAA,mD;MAAA,QAAA,yF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,wD;IAAO,sD;EAFX,C;;;IAEI,wB;IAAA,iC;EAAA,C;;;IAAO,wB;IAAA,gC;EAAA,C;;;;;;;IAFX,wE;EAAA,C;;;IAAA,a;MAAA,a;QAAA,sC;MAAA,Y;QAAA,qC;MAAA,QAAA,sF;;EAAA,C;;;;ICwC2E,kBAA/D,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,C;IAAqE,K/KwC7E,a;I+KxCE,+B/KyCK,W+KzC6E,SAAlF,C;EAAA,C;;ICxBF,mCAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;IAKA,0CAAsC,kB;IACtC,0CAAkC,kB;IAClC,gCAAqC,kB;IACrC,gCAA4B,kB;IAC5B,iCAAuC,kB;EAbJ,C;;IAM/B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,gH;EAAA,C;;IAAA,iHrLtBJ,gBqLsBI,C;EAAA,C;;;WACA,gH;EAAA,C;;IAAA,iHrLvBJ,gBqLuBI,C;EAAA,C;;;WACA,4F;EAAA,C;;InLFA,8BAAqB,qDAArB,IFtBJ,MEsBiC,WFtBjC,MEsBiC,kB;EmLE7B,C;;;WACA,4F;EAAA,C;;IAAA,6FrLzBJ,MqLyBI,C;EAAA,C;;;WACA,8F;EAAA,C;;InLJA,+BAAqB,sDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EmLI7B,C;;IAWqC,Q;IARjC,IAAI,QjMiuMD,YAAQ,CiMjuMX,C;MACI,M;;ItL5BR,UAAa,E;IsL+BT,iBtL9BG,G;IXogVS,U;IAAhB,4BiMp+UI,QjMo+UJ,kB;MAAgB,ciMp+UZ,QjMo+UJ,Q;MiMp+UuB,IAAC,MjMo+UK,OiMp+UL,aAAD;QAAM,QjMo+UA,OiMp+UA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,sCAAiC,yD;EACrC,C;;;;;;;ICrCJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,0C;IAAA,C;IAEI,kE;EAFJ,C;;;IAEI,6B;IAAA,sC;EAAA,C;;;;;;;IAFJ,6C;EAAA,C;;;IAAA,a;MAAA,a;QAAA,2C;MAAA,QAAA,4F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,8D;IACA,oE;IACA,sE;IACA,gE;IACA,sE;IACA,4E;IACA,4E;IACA,kE;IACA,sE;IACA,kE;IACA,uE;EAZJ,C;;;IAEI,4B;IAAA,oC;EAAA,C;;;IACA,4B;IAAA,uC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,qC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,2C;EAAA,C;;;IACA,4B;IAAA,2C;EAAA,C;;;IACA,4B;IAAA,sC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,sC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;;;;;IAZJ,yb;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,yC;MAAA,e;QAAA,4C;MAAA,gB;QAAA,6C;MAAA,a;QAAA,0C;MAAA,gB;QAAA,6C;MAAA,mB;QAAA,gD;MAAA,mB;QAAA,gD;MAAA,c;QAAA,2C;MAAA,gB;QAAA,6C;MAAA,c;QAAA,2C;MAAA,gB;QAAA,6C;MAAA,QAAA,2F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,2C;IAAA,C;IAEI,0E;IAAU,0E;IAAU,sE;EAFxB,C;;;IAEI,8B;IAAA,0C;EAAA,C;;;IAAU,8B;IAAA,0C;EAAA,C;;;IAAU,8B;IAAA,wC;EAAA,C;;;;;;;IAFxB,mI;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,c;QAAA,6C;MAAA,QAAA,6F;;EAAA,C;;;;ICuB+E,iBlMqCjC,UkMrCiC,EAAe,EAAf,C;EAAmB,C;;IAAE,kBAAxF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA8F,KpLyDtG,a;IoLzDE,+BpL0DK,WoL1DsG,SAA3G,C;EAAA,C;;IAGgF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,KpLsDxF,a;IoLtDE,+BpLuDK,WoLvDwF,SAA7F,C;EAAA,C;;ICZF,kCAAoC,IAApC,EAA0C,QAA1C,EAAoD,oCAApD,C;IAEA,mCAA+B,kB;IAC/B,iCAA6B,kB;IAC7B,qCAAsC,kB;IACtC,wCAAoC,kB;IACpC,kCAA8B,kB;IAC9B,uCAAmC,kB;IACnC,8BAA+B,kB;IAC/B,4BAAuB,kB;IACvB,oCAA+B,kB;IAC/B,kCAA2B,kB;IAC3B,8BAAyB,kB;IACzB,kCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,kCAA6B,kB;IAC7B,8BAA4B,kB;EAnBgC,C;;;WAK5D,kG;EAAA,C;;IAAA,mG1LjBJ,S0LiBI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+F1LlBJ,O0LkBI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uG1LnBJ,W0LmBI,C;EAAA,C;;;WACA,4G;EAAA,C;;IAAA,6G1LpBJ,c0LoBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG1LrBJ,Q0LqBI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2G1LtBJ,a0LsBI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yF1LvBJ,I0LuBI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qF1LxBJ,E0LwBI,C;EAAA,C;;;WACA,oG;EAAA,C;;IAAA,qG1LzBJ,U0LyBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG1L1BJ,Q0L0BI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yF1L3BJ,I0L2BI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG1L5BJ,Q0L4BI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG1L7BJ,Q0L6BI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG1L9BJ,Q0L8BI,C;EAAA,C;;;WACA,wF;EAAA,C;;IxLTA,4BAAqB,mDAArB,IFtBJ,IEsBiC,WFtBjC,IEsBiC,kB;EwLS7B,C;;IlM2DW,kBAAX,mB;IkMzD6E,KrLgD7E,a;IqLhDkD,wClMyDlD,MaRO,WbQmB,UAA1B,CkMzDkD,C;EAAkC,C;;IlMyDzE,kBAAX,mB;IkMxD+D,KrL+C/D,a;IqL/C2C,iClMwD3C,MaRO,WbQmB,UAA1B,CkMxD2C,C;EAA2B,C;;IASrD,Q;I3LzCjB,UAAa,E;I2LkCT,Y3LjCG,G;I2LmC0B,kBAA7B,UnMuBsC,UmMvBtC,EAAe,YAAf,C;IAAmC,KrL2CvC,a;IhB+9CgB,U;IAAA,SgB99CT,WqL5CuC,kBrM0gD9B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MqM1gD2D,UrM0gD9C,OE9zCmC,I;MmM5MgB,YrM0gDnD,OEjzCmC,M;MmMxNxD,MAAM,GAAN,IAAa,K;;IAIjB,uCAAa,uDAAb,C;EACJ,C;;IA7BsD,gBnM8CZ,UmM9CY,EAAc,EAAd,C;EAAkB,C;;;;;;;ICDxE,kCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,wCAAjE,C;IAKA,+BAAuC,kB;IACvC,+BAA0B,kB;IAC1B,qCAAgC,kB;IAChC,iCAA2C,kB;EAXZ,C;;IAK3B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,8F;EAAA,C;;IzLGA,6BAAqB,wDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EyLH7B,C;;;WACA,8F;EAAA,C;;IAAA,+F3LpBJ,K2LoBI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2G3LrBJ,W2LqBI,C;EAAA,C;;;WACA,kG;EAAA,C;;IzLAA,+BAAqB,0DAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EyLA7B,C;;IARmE,epM+CzB,UoM/CyB,EAAa,EAAb,C;EAAiB,C;;;;;;;ICbxF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,4E;IAAS,gF;EAFb,C;;;IAEI,gC;IAAA,2C;EAAA,C;;;IAAS,gC;IAAA,6C;EAAA,C;;;;;;;IAFb,+F;EAAA,C;;;IAAA,a;MAAA,e;QAAA,gD;MAAA,iB;QAAA,kD;MAAA,QAAA,mG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,sE;IACA,sF;IACA,0F;IACA,oF;IACA,wF;IACA,0E;IACA,wE;IACA,0E;IACA,kG;IACA,sG;IACA,qE;IACA,6F;IACA,iG;IACA,iG;IACA,6F;IACA,mF;IACA,iG;IACA,mF;EAnBJ,C;;;IAEI,gC;IAAA,wC;EAAA,C;;;IACA,gC;IAAA,gD;EAAA,C;;;IACA,gC;IAAA,kD;EAAA,C;;;IACA,gC;IAAA,+C;EAAA,C;;;IACA,gC;IAAA,iD;EAAA,C;;;IACA,gC;IAAA,0C;EAAA,C;;;IACA,gC;IAAA,yC;EAAA,C;;;IACA,gC;IAAA,0C;EAAA,C;;;IACA,gC;IAAA,sD;EAAA,C;;;IACA,gC;IAAA,wD;EAAA,C;;;IACA,gC;IAAA,uC;EAAA,C;;;IACA,gC;IAAA,mD;EAAA,C;;;IACA,gC;IAAA,qD;EAAA,C;;;IACA,gC;IAAA,qD;EAAA,C;;;IACA,gC;IAAA,mD;EAAA,C;;;IACA,gC;IAAA,8C;EAAA,C;;;IACA,gC;IAAA,qD;EAAA,C;;;IACA,gC;IAAA,8C;EAAA,C;;;;;;;IAnBJ,o2B;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,6C;MAAA,oB;QAAA,qD;MAAA,sB;QAAA,uD;MAAA,mB;QAAA,oD;MAAA,qB;QAAA,sD;MAAA,c;QAAA,+C;MAAA,a;QAAA,8C;MAAA,c;QAAA,+C;MAAA,0B;QAAA,2D;MAAA,4B;QAAA,6D;MAAA,W;QAAA,4C;MAAA,uB;QAAA,wD;MAAA,yB;QAAA,0D;MAAA,yB;QAAA,0D;MAAA,uB;QAAA,wD;MAAA,kB;QAAA,mD;MAAA,yB;QAAA,0D;MAAA,kB;QAAA,mD;MAAA,QAAA,mG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,wF;IAAa,4F;IAAe,8E;IAAQ,4E;EAFxC,C;;;IAEI,kC;IAAA,iD;EAAA,C;;;IAAa,kC;IAAA,mD;EAAA,C;;;IAAe,kC;IAAA,4C;EAAA,C;;;IAAQ,kC;IAAA,2C;EAAA,C;;;;;;;IAFxC,kM;EAAA,C;;;IAAA,a;MAAA,mB;QAAA,sD;MAAA,qB;QAAA,wD;MAAA,c;QAAA,iD;MAAA,a;QAAA,gD;MAAA,QAAA,qG;;EAAA,C;;;;ICmBqF,kBAAzE,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,C;IAA+E,K1L6DvF,a;I0L7DE,+B1L8DK,W0L9DuF,SAA5F,C;EAAA,C;;ICJF,oCAAuC,IAAvC,EAA6C,QAA7C,EAAuD,OAAvD,C;IAKA,+BAA2B,kB;IAC3B,mCAAqC,kB;EAVR,C;;IAMzB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,oF;EAAA,C;;IAAA,qFhMrBJ,KgMqBI,C;EAAA,C;;;WACA,4F;EAAA,C;;I9LAA,iCAAqB,kDAArB,IFtBJ,SEsBiC,WFtBjC,SEsBiC,kB;E8LA7B,C;;IAWsC,Q;IARlC,IAAI,Q5MquMD,YAAQ,C4MruMX,C;MACI,M;;IjMxBR,UAAa,E;IiM2BT,iBjM1BG,G;IXogVS,U;IAAhB,4B4Mx+UI,Q5Mw+UJ,kB;MAAgB,c4Mx+UZ,Q5Mw+UJ,Q;M4Mx+UuB,IAAC,M5Mw+UK,O4Mx+UL,aAAD;QAAM,Q5Mw+UA,O4Mx+UA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,uCAAkC,yD;EACtC,C;;;;;;;ICjCJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,kD;IACA,oE;IACA,sE;IACA,wE;IACA,sD;EANJ,C;;;IAEI,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,uC;EAAA,C;;;IACA,sB;IAAA,wC;EAAA,C;;;IACA,sB;IAAA,yC;EAAA,C;;;IACA,sB;IAAA,gC;EAAA,C;;;;;;;IANJ,6L;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mC;MAAA,qB;QAAA,4C;MAAA,sB;QAAA,6C;MAAA,uB;QAAA,8C;MAAA,c;QAAA,qC;MAAA,QAAA,+E;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IAAM,4D;IAAO,8D;EAFjB,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IAAM,0B;IAAA,mC;EAAA,C;;;IAAO,0B;IAAA,oC;EAAA,C;;;;;;;IAFjB,gH;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,a;QAAA,wC;MAAA,c;QAAA,yC;MAAA,QAAA,mF;;EAAA,C;;;;ICqBmE,a5MuCrB,U4MvCqB,EAAW,EAAX,C;EAAe,C;;IAAE,kBAAxE,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAA8E,K9L2DtF,a;I8L3DE,+B9L4DK,W8L5DsF,SAA3F,C;EAAA,C;;IAGoE,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,K9LwD5E,a;I8LxDE,+B9LyDK,W8LzD4E,SAAjF,C;EAAA,C;;ICTF,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,+BAA2B,kB;IAC3B,wCAAoC,kB;IACpC,mCAAoC,kB;EAXgB,C;;IAMhD,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,oF;EAAA,C;;IAAA,qFpMrBJ,KoMqBI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uGpMtBJ,coMsBI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FpMvBJ,SoMuBI,C;EAAA,C;;I5MmEW,kBAAX,mB;I4MjEyE,K/LwDzE,a;I+LxDgD,sC5MiEhD,MaRO,WbQmB,UAA1B,C4MjEgD,C;EAAgC,C;;;;;;;ICxBpF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,kD;IACA,wD;IACA,oD;IACA,4D;EALJ,C;;;IAEI,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,iC;EAAA,C;;;IACA,sB;IAAA,+B;EAAA,C;;;IACA,sB;IAAA,mC;EAAA,C;;;;;;;IALJ,wI;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mC;MAAA,e;QAAA,sC;MAAA,a;QAAA,oC;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;EAAA,C;;;;ICsBmE,c/MsCrB,U+MtCqB,EAAY,EAAZ,C;EAAgB,C;;IAAE,kBAAzE,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAA+E,KjM0DvF,a;IiM1DE,+BjM2DK,WiM3DuF,SAA5F,C;EAAA,C;;IAGoE,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KjMuD5E,a;IiMvDE,+BjMwDK,WiMxD4E,SAAjF,C;EAAA,C;;ICNF,oCAAsD,IAAtD,EAA4D,QAA5D,EAAsE,wCAAtE,C;IAKA,oCAA0C,kB;IAC1C,gCAA4B,kB;IAC5B,wCAAmC,kB;IACnC,+BAA2B,kB;IAC3B,wCAAoC,kB;IACpC,iCAA6B,kB;IAC7B,kCAA8B,kB;EAdC,C;;IAK3B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,wG;EAAA,C;;IrMHA,kCAAqB,6DAArB,IFtBJ,UEsBiC,WFtBjC,UEsBiC,kB;EqMG7B,C;;;WACA,gG;EAAA,C;;IAAA,iGvM1BJ,MuM0BI,C;EAAA,C;;;WACA,gH;EAAA,C;;IAAA,iHvM3BJ,cuM2BI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FvM5BJ,KuM4BI,C;EAAA,C;;;WACA,gH;EAAA,C;;IAAA,iHvM7BJ,cuM6BI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mGvM9BJ,OuM8BI,C;EAAA,C;;;WACA,oG;EAAA,C;;IAAA,qGvM/BJ,QuM+BI,C;EAAA,C;;IAKuC,IAAO,I;IAA1C,wCAAmC,cAAO,cAAP,MAAO,CAAP,6B;EACvC,C;;IAC8C,wCAAmC,O;EAAQ,C;;IASpE,Q;IxM7CrB,UAAa,E;IwMsCT,YxMrCG,G;IwMuCwB,kBAA3B,QhNmBsC,UgNnBtC,EAAa,YAAb,C;IAAiC,KlMuCrC,a;IhB+9CgB,U;IAAA,SgB99CT,WkMxCqC,kBlNsgD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MkNtgDyD,UlNsgD5C,OE9zCmC,I;MgNxMc,YlNsgDjD,OEjzCmC,M;MgNpNxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;;IASqB,Q;IxMvDrB,UAAa,E;IwMgDT,YxM/CG,G;IwMiDkB,kBAArB,gBAAY,OAAZ,C;IAA2B,KlM6B/B,a;IhB+9CgB,U;IAAA,SgB99CT,WkM9B+B,MAAM,kBlN4/C5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MkN5/CyD,UlN4/C5C,OE9zCmC,I;MgN9Lc,YlN4/CjD,OEjzCmC,M;MgN1MxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;;IAtCwE,kBhNyC9B,UgNzC8B,EAAgB,EAAhB,C;EAAoB,C;;;;;;;ICC5F,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,oCAA0C,kB;IAC1C,gCAA4B,kB;IAC5B,wCAAmC,kB;IACnC,+BAA2B,kB;IAC3B,kCAA8B,kB;IAC9B,wCAAoC,kB;IACpC,iCAA6B,kB;IAC7B,kCAA8B,kB;EAhB8B,C;;IAMxD,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,kG;EAAA,C;;ItMJA,kCAAqB,uDAArB,IFtBJ,UEsBiC,WFtBjC,UEsBiC,kB;EsMI7B,C;;;WACA,0F;EAAA,C;;IAAA,2FxM3BJ,MwM2BI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2GxM5BJ,cwM4BI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFxM7BJ,KwM6BI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FxM9BJ,QwM8BI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2GxM/BJ,cwM+BI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FxMhCJ,OwMgCI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FxMjCJ,QwMiCI,C;EAAA,C;;IAKuC,IAAO,I;IAA1C,wCAAmC,cAAO,cAAP,MAAO,CAAP,6B;EACvC,C;;IAC8C,wCAAmC,O;EAAQ,C;;IASpE,Q;IzM/CrB,UAAa,E;IyMwCT,YzMvCG,G;IyMyCuB,kBAA1B,OjNiBsC,UiNjBtC,EAAY,YAAZ,C;IAAgC,KnMqCpC,a;IhB+9CgB,U;IAAA,SgB99CT,WmMtCoC,kBnNogD3B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MmNpgDwD,UnNogD3C,OE9zCmC,I;MiNtMa,YnNogDhD,OEjzCmC,M;MiNlNxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;;IASqB,Q;IzMzDrB,UAAa,E;IyMkDT,YzMjDG,G;IyMmDkB,kBAArB,gBAAY,OAAZ,C;IAA2B,KnM2B/B,a;IhB+9CgB,U;IAAA,SgB99CT,WmM5B+B,MAAM,kBnN0/C5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MmN1/CyD,UnN0/C5C,OE9zCmC,I;MiN5Lc,YnN0/CjD,OEjzCmC,M;MiNxMxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;;;;;;;IC3DJ,e;IAC6B,0B;IAD7B,iB;IAAA,uB;EAC4B,C;;IAD5B,2C;IAAA,C;IAEI,6EAAU,YAAV,C;IAAyB,uEAAO,QAAP,C;IAEzB,yC;EAJJ,C;;;IAEI,8B;IAAA,2C;EAAA,C;;;IAAyB,8B;IAAA,wC;EAAA,C;;IAEzB,2C;EAAA,C;;IAEuB,Q;IAAA,gBAAT,0B;IrN0qBP,sB;;MAyXS,U;MAAhB,uD;QAAgB,cAAhB,iB;QAAsB,IqNniCQ,OrNmiCM,OqNniCH,cAAH,IrNmiCR,C;UAAwB,qBAAO,O;UAAP,uB;;;MAC9C,qBAAO,I;;;IqNpiCgB,OrN0qBvB,kB;IqN1qBc,iB;MAAmC,MAAM,8BAAyB,oBAAiB,CAA1C,C;;IAAzC,W;EAAA,C;;;;;;;;IAFd,8B;IAAA,kD;MAAA,iC;;IAAA,2C;EAAA,C;;;;;;;IAJJ,0F;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,gD;MAAA,c;QAAA,6C;MAAA,QAAA,2F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IACA,oE;IACA,0E;IACA,gE;IACA,4D;IACA,wF;IACA,kE;IACA,gE;IACA,gE;IACA,8D;IACA,iF;IACA,mE;EAbJ,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IACA,0B;IAAA,uC;EAAA,C;;;IACA,0B;IAAA,0C;EAAA,C;;;IACA,0B;IAAA,qC;EAAA,C;;;IACA,0B;IAAA,mC;EAAA,C;;;IACA,0B;IAAA,iD;EAAA,C;;;IACA,0B;IAAA,sC;EAAA,C;;;IACA,0B;IAAA,qC;EAAA,C;;;IACA,0B;IAAA,qC;EAAA,C;;;IACA,0B;IAAA,oC;EAAA,C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9D+F,SAApG,C;EAAA,C;;IAGqE,exOsC7B,UwOtC6B,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAlF,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,iBAA7D,C;IACJ,M1NyDJ,W0NzDI,C;I1NyDJ,W0NxDI,oB1NwDJ,W0NxDI,e;IAFF,+B1N2DK,W0NxDL,SAHA,C;EAAA,C;;IAM4E,kBAAtE,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,K1NoDpF,a;I0NpDE,+B1NqDK,W0NrDoF,SAAzF,C;EAAA,C;;ICjBF,8BAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IACA,yCAAqC,kB;EALJ,C;;;WAKjC,4G;EAAA,C;;IAAA,6GhObJ,egOaI,C;EAAA,C;;;;;;;;ICM8D,c1O0CpB,U0O1CoB,EAAY,EAAZ,C;EAAgB,C;;IAAE,kBAAxE,2BAAuB,iBAAvB,EvO6D8B,WuO7D9B,EAAoD,eAApD,C;IAA8E,K5N8DtF,a;I4N9DE,+B5N+DK,W4N/DsF,SAA3F,C;EAAA,C;;IAGmE,kBAA7D,2BAAuB,iBAAvB,EvO0D8B,WuO1D9B,EAAoD,OAApD,C;IAAmE,K5N2D3E,a;I4N3DE,+B5N4DK,W4N5D2E,SAAhF,C;EAAA,C;;ICPF,+BAA2C,IAA3C,EAAiD,QAAjD,EAA2D,OAA3D,C;IAEA,oCAA+B,kB;IAC/B,oCAAqC,kB;IACrC,6CAAwC,kB;IACxC,oCAAqC,kB;IACrC,kCAA4C,kB;IAC5C,+BAA0B,kB;IAC1B,iCAA0C,kB;EAZJ,C;;;WAMtC,uG;EAAA,C;;IAAA,wGlOjBJ,UkOiBI,C;EAAA,C;;;WACA,uG;EAAA,C;;IAAA,wGlOlBJ,UkOkBI,C;EAAA,C;;;WACA,yH;EAAA,C;;IAAA,0HlOnBJ,mBkOmBI,C;EAAA,C;;;WACA,uG;EAAA,C;;IAAA,wGlOpBJ,UkOoBI,C;EAAA,C;;;WACA,mG;EAAA,C;;IhOCA,gCAAqB,0DAArB,IFtBJ,QEsBiC,WFtBjC,QEsBiC,kB;EgOD7B,C;;;WACA,6F;EAAA,C;;IAAA,8FlOtBJ,KkOsBI,C;EAAA,C;;;WACA,iG;EAAA,C;;IhODA,+BAAqB,yDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EgOC7B,C;;I1OmEW,kBAAX,mB;I0OjE2E,K7NwD3E,a;I6NxDiD,uC1OiEjD,MaRO,WbQmB,UAA1B,C0OjEiD,C;EAAiC,C;;InOvBlF,UAAa,E;ImOwBiF,KnOtB1F,CADG,GACH,C;ImOsB2D,gDnOvBxD,GmOuBwD,C;EAAsC,C;;I1OgE1F,kBAAX,mB;I0O/D2E,K7NsD3E,a;I6NtDiD,uC1O+DjD,MaRO,WbQmB,UAA1B,C0O/DiD,C;EAAiC,C;;;;;;;IC1BtF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,8E;IAAQ,wE;IAAK,8E;EAFjB,C;;;IAEI,kC;IAAA,4C;EAAA,C;;;IAAQ,kC;IAAA,yC;EAAA,C;;;IAAK,kC;IAAA,4C;EAAA,C;;;;;;;IAFjB,wI;EAAA,C;;;IAAA,a;MAAA,c;QAAA,iD;MAAA,W;QAAA,8C;MAAA,c;QAAA,iD;MAAA,QAAA,oG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,8C;IAAA,C;IAEI,wE;IAAM,wE;IAAM,gF;EAFhB,C;;;IAEI,iC;IAAA,yC;EAAA,C;;;IAAM,iC;IAAA,yC;EAAA,C;;;IAAM,iC;IAAA,6C;EAAA,C;;;;;;;IAFhB,sI;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,8C;MAAA,Y;QAAA,8C;MAAA,gB;QAAA,kD;MAAA,QAAA,mG;;EAAA,C;;;;IC2BqF,e9OiCvC,U8OjCuC,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA5F,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,EAAuE,oBAAvE,C;IAAkG,KhOqD1G,a;IgOrDE,+BhOsDK,WgOtD0G,SAA/G,C;EAAA,C;;IAGsF,kBAAhF,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,EAAuE,OAAvE,C;IAAsF,KhOkD9F,a;IgOlDE,+BhOmDK,WgOnD8F,SAAnG,C;EAAA,C;;ICZF,kCAAmC,IAAnC,EAAyC,QAAzC,EAAmD,+BAAnD,C;IAKA,sCAAkC,kB;IAClC,0CAAsC,kB;IACtC,8CAA0C,kB;IAC1C,6CAAyC,kB;IACzC,8CAA0C,kB;IAC1C,uCAAmC,kB;IACnC,6CAAyC,kB;IACzC,sCAAkC,kB;IAClC,qCAAiC,kB;IACjC,yCAA+C,kB;IAC/C,iCAA+C,kB;IAC/C,yCAA+C,kB;IAC/C,oCAAqC,kB;IACrC,8BAA0B,kB;EArBmB,C;;IAKzC,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,oG;EAAA,C;;IAAA,qGtOxBJ,asOwBI,C;EAAA,C;;;WACA,2G;EAAA,C;;IAAA,4GtOzBJ,gBsOyBI,C;EAAA,C;;;WACA,mH;EAAA,C;;IAAA,oHtO1BJ,oBsO0BI,C;EAAA,C;;;WACA,iH;EAAA,C;;IAAA,kHtO3BJ,mBsO2BI,C;EAAA,C;;;WACA,mH;EAAA,C;;IAAA,oHtO5BJ,oBsO4BI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sGtO7BJ,asO6BI,C;EAAA,C;;;WACA,iH;EAAA,C;;IAAA,kHtO9BJ,mBsO8BI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oGtO/BJ,YsO+BI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGtOhCJ,WsOgCI,C;EAAA,C;;;WACA,yG;EAAA,C;;IAAA,0GtOjCJ,esOiCI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FtOlCJ,OsOkCI,C;EAAA,C;;;WACA,yG;EAAA,C;;IAAA,0GtOnCJ,esOmCI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGtOpCJ,UsOoCI,C;EAAA,C;;;WACA,mF;EAAA,C;;IAAA,oFtOrCJ,IsOqCI,C;EAAA,C;;IAKsC,IAAO,I;IAAzC,uCAAkC,cAAO,cAAP,MAAO,CAAP,6B;EACtC,C;;IAC6C,uCAAkC,O;EAAQ,C;;IAEnF,0CAA2B,SAAX,mBAAW,MAAiB,KAAjB,CAAwB,MAAnD,C;EACJ,C;;IvO7CA,UAAa,E;IuO8CqE,KvO5C9E,CADG,GACH,C;IuO4CqD,0CvO7ClD,GuO6CkD,C;EAAgC,C;;IACzD,+BAA0B,I;EAAK,C;;IACjB,+BAA0B,W;EAAY,C;;IACpC,6B;I9OuCrC,kBAAX,mB;I8OvCuF,KjO8BvF,a;IiO9BgD,iB9OuChD,MaRO,WbQmB,UAA1B,C;E8OvC8F,C;;IAhCzC,e/O0CX,U+O1CW,EAAa,EAAb,C;EAAiB,C;;;;;;;IClB1E,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,oC;IAAA,C;IAEI,oD;IAAM,wD;EAFV,C;;;IAEI,uB;IAAA,+B;EAAA,C;;;IAAM,uB;IAAA,iC;EAAA,C;;;;;;;IAFV,uE;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,oC;MAAA,c;QAAA,sC;MAAA,QAAA,iF;;EAAA,C;;;;ICgCmE,kBAAvD,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,C;IAA6D,KnOgDrE,a;ImOhDE,+BnOiDK,WmOjDqE,SAA1E,C;EAAA,C;;ICpBF,+BAAuC,IAAvC,EAA6C,QAA7C,C;IAQA,+BAAgC,kB;IAChC,iCAAyC,kB;EAZZ,C;;IAKzB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;IAGY,OAAyC,UAAN,CAAkB,eAAlB,C;EAAnC,C;;IACK,qBAAQ,eAAR,EAAyB,KAAzB,C;EAAgC,C;;;WACjD,4F;EAAA,C;;IAAA,6FzOrBJ,KyOqBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IvOAA,+BAAqB,wDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EuOA7B,C;;IAKkC,IAAO,I;IAArC,mCAA8B,cAAO,cAAP,MAAO,CAAP,6B;EAClC,C;;IACyC,mCAA8B,O;EAAQ,C;;;;;;;IC5BnF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,2C;IAAA,C;IAEI,kE;IACA,sE;IACA,sE;IACA,0E;IACA,8E;IACA,0E;IACA,kE;EARJ,C;;;IAEI,8B;IAAA,sC;EAAA,C;;;IACA,8B;IAAA,wC;EAAA,C;;;IACA,8B;IAAA,wC;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,4C;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,sC;EAAA,C;;;;;;;IARJ,mS;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,2C;MAAA,c;QAAA,6C;MAAA,c;QAAA,6C;MAAA,gB;QAAA,+C;MAAA,kB;QAAA,iD;MAAA,gB;QAAA,+C;MAAA,Y;QAAA,2C;MAAA,QAAA,+F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,6C;IAAA,C;IAEI,8E;IAAU,8E;IAAU,0E;EAFxB,C;;;IAEI,gC;IAAA,4C;EAAA,C;;;IAAU,gC;IAAA,4C;EAAA,C;;;IAAU,gC;IAAA,0C;EAAA,C;;;;;;;IAFxB,yI;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,iD;MAAA,gB;QAAA,iD;MAAA,c;QAAA,+C;MAAA,QAAA,iG;;EAAA,C;;;;ICiBiF,kBAArE,+BAA2B,qBAA3B,EAA2D,OAAT,QAAS,CAA3D,C;IAA2E,KvO+DnF,a;IuO/DE,+BvOgEK,WuOhEmF,SAAxF,C;EAAA,C;;ICTF,qB;M9OPA,UAAa,E;M8OOb,Q9ONO,G;;I8OOP,wB;IAFA,gB;IACA,oB;EAFsB,C;;IAKZ,QAAN,YAAM,C;EACV,C;;IAEe,kCAAc,SAAd,EAAoB,YAApB,SvPDmD,YuPCvB,cvPDuB,CuPCnD,E;EAAA,C;;IrP2EJ,kBAAX,mB;IqPzE8E,KxOgE9E,a;IwOhEsD,qBrPyEtD,MaRO,WbQmB,UAA1B,C;EqPzEqF,C;;;;;;;;ICCzC,kBAApC,wBAAoB,cAApB,C;IAA0C,KzO+DlD,a;IyO/DE,+BzOgEK,WyOhEkD,SAAvD,C;EAAA,C;;ICPF,mCAA4C,IAA5C,EAAkD,QAAlD,C;IAKA,oCAA+B,kB;IAC/B,iCAA6B,kB;EATC,C;;IAK1B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,uG;EAAA,C;;IAAA,wG/OhBJ,U+OgBI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kG/OjBJ,O+OiBI,C;EAAA,C;;;;;;;IChBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,4C;IAAA,C;IAEI,oE;IACA,0E;IACA,4E;IACA,oF;IACA,gF;IACA,sE;IACA,8E;IACA,wF;IACA,sE;IACA,4F;IACA,yF;IACA,+F;IACA,2F;EAdJ,C;;;IAEI,+B;IAAA,uC;EAAA,C;;;IACA,+B;IAAA,0C;EAAA,C;;;IACA,+B;IAAA,2C;EAAA,C;;;IACA,+B;IAAA,+C;EAAA,C;;;IACA,+B;IAAA,6C;EAAA,C;;;IACA,+B;IAAA,wC;EAAA,C;;;IACA,+B;IAAA,4C;EAAA,C;;;IACA,+B;IAAA,iD;EAAA,C;;;IACA,+B;IAAA,wC;EAAA,C;;;IACA,+B;IAAA,mD;EAAA,C;;;IACA,+B;IAAA,iD;EAAA,C;;;IACA,+B;IAAA,oD;EAAA,C;;;IACA,+B;IAAA,kD;EAAA,C;;;;;;;IAdJ,slB;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,4C;MAAA,e;QAAA,+C;MAAA,gB;QAAA,gD;MAAA,oB;QAAA,oD;MAAA,kB;QAAA,kD;MAAA,a;QAAA,6C;MAAA,iB;QAAA,iD;MAAA,sB;QAAA,sD;MAAA,a;QAAA,6C;MAAA,wB;QAAA,wD;MAAA,sB;QAAA,sD;MAAA,yB;QAAA,yD;MAAA,uB;QAAA,uD;MAAA,QAAA,iG;;EAAA,C;;;;ICgBmF,kBAAvE,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,C;IAA6E,K5OgErF,a;I4OhEE,+B5OiEK,W4OjEqF,SAA1F,C;EAAA,C;;ICJF,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,mCAA8B,kB;IAC9B,gCAA4B,kB;EAV0B,C;;I9PijR/C,kBAAM,e8P3iRD,Q9P2iRc,OAAb,C;IA6UA,Q;IAAb,wB8Px3RY,Q9Pw3RZ,gB;MAAa,W8Px3RD,Q9Pw3RZ,M;MACI,WAAY,W8Pz3RW,G9Py3RG,I8Pz3RA,MAAH,E9Py3RG,I8Pz3RY,OAAf,C9Py3RX,C;;I8Pz3RZ,gC9P03RG,W8P13RH,C;EACJ,C;;;WAEA,6F;EAAA,C;;IAAA,8FlPlBJ,SkPkBI,C;EAAA,C;;;WACA,uF;EAAA,C;;IAAA,wFlPnBJ,MkPmBI,C;EAAA,C;;;;;;;IClBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,oC;IAAA,C;IAEI,oD;IACA,0D;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,iE;IACA,iE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;EA5BJ,C;;;IAEI,uB;IAAA,+B;EAAA,C;;;IACA,uB;IAAA,kC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,qC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;IACA,uB;IAAA,sC;EAAA,C;;;;;;;IA5BJ,o/B;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,oC;MAAA,e;QAAA,uC;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,QAAA,iF;;EAAA,C;;;;ICoBqE,e7PwCvB,U6PxCuB,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA5E,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,EAAuD,YAAvD,C;IAAkF,K/O4D1F,a;I+O5DE,+B/O6DK,W+O7D0F,SAA/F,C;EAAA,C;;IAG4E,kBAAtE,wBAA0B,cAA1B,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,K/OyDpF,a;I+OzDE,+B/O0DK,W+O1DoF,SAAzF,C;EAAA,C;;ICAF,+BAA2B,IAA3B,EAAiC,QAAjC,C;IAKA,gCAA+C,kB;IAC/C,sCAAwC,kB;IACxC,wCAA4C,kB;IAC5C,yCAA8C,kB;IAC9C,mCAA8B,kB;IAC9B,4CAA+D,kB;IAC/D,yCAAoC,kB;IACpC,sCAA8B,kB;IAC9B,iCAAsC,kB;IACtC,mCAAwC,kB;IACxC,oCAAyC,kB;IACzC,gCAAqC,kB;IACrC,iCAAuC,kB;IACvC,mCAAwC,kB;IACxC,oCAA+B,kB;IAC/B,yCAA2C,kB;IAC3C,4CAAoC,kB;IACpC,yCAAoC,kB;EAzBa,C;;IAK7C,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,yF;EAAA,C;;IAAA,0FrP7BJ,MqP6BI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sGrP9BJ,YqP8BI,C;EAAA,C;;;WACA,yG;EAAA,C;;IAAA,0GrP/BJ,cqP+BI,C;EAAA,C;;;WACA,2G;EAAA,C;;InPVA,uCAAqB,2DAArB,IFtBJ,eEsBiC,WFtBjC,eEsBiC,kB;EmPU7B,C;;;WACA,+F;EAAA,C;;IAAA,gGrPjCJ,SqPiCI,C;EAAA,C;;;WACA,iH;EAAA,C;;IAAA,kHrPlCJ,kBqPkCI,C;EAAA,C;;;WACA,2G;EAAA,C;;IAAA,4GrPnCJ,eqPmCI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sGrPpCJ,YqPoCI,C;EAAA,C;;;WACA,2F;EAAA,C;;IAAA,4FrPrCJ,OqPqCI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGrPtCJ,SqPsCI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGrPvCJ,UqPuCI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FrPxCJ,MqPwCI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FrPzCJ,QqPyCI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGrP1CJ,SqP0CI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGrP3CJ,UqP2CI,C;EAAA,C;;;WACA,2G;EAAA,C;;IAAA,4GrP5CJ,eqP4CI,C;EAAA,C;;;WACA,iH;EAAA,C;;;WACA,2G;EAAA,C;;IAAA,4GrP9CJ,eqP8CI,C;EAAA,C;;IAEoD,mCAAS,OAAT,C;EAAiB,C;;IACtC,8BAAyB,I;EAAK,C;;IAChB,8BAAyB,W;EAAY,C;;IACnC,6B;I7PuCpC,kBAAX,mB;I6PvCqF,KhP8BrF,a;IgP9B+C,gB7PuC/C,MaRO,WbQmB,UAA1B,C;E6PvC4F,C;;IACrC,8BAAyB,I;EAAK,C;;ItPlDrF,UAAa,E;IsPmDmE,KtPjD5E,CADG,GACH,C;IsPiDoD,yCtPlDjD,GsPkDiD,C;EAA+B,C;;ItPnDvF,UAAa,E;IsPoDyE,KtPlDlF,CADG,GACH,C;IsPkDwD,2CtPnDrD,GsPmDqD,C;EAAiC,C;;IAU1E,Q;IARf,IAAI,QjQssMD,YAAQ,CiQtsMX,C;MACI,M;;ItPvDR,UAAa,E;IsP0DT,iBtPzDG,G;IXogVS,U;IAAhB,4BiQz8UI,QjQy8UJ,kB;MAAgB,ciQz8UZ,QjQy8UJ,Q;MiQz8UuB,IAAC,MjQy8UK,OiQz8UL,aAAD;QAAM,QjQy8UA,OiQz8UA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,yCAAe,yDAAf,C;EACJ,C;;IAEI,uCAAwB,MAAX,mBAAW,MAAc,KAAd,CAAqB,MAA7C,C;EACJ,C;;IAEI,uCAAwB,QAAX,mBAAW,MAAgB,OAAhB,EAAiC,KAAjC,CAAwC,MAAhE,C;EACJ,C;;ItPrEA,UAAa,E;IsPsEyE,KtPpElF,CADG,GACH,C;IsPoEuD,4CtPrEpD,GsPqEoD,C;EAAkC,C;;IAIrD,IAAO,I;IAA3C,yCAAoC,cAAO,cAAP,MAAO,CAAP,6B;EACxC,C;;IAEI,yCAAoC,O;EACxC,C;;IAC2C,wCAAmC,I;EAAK,C;;IACxD,qB;MAAA,QAAiB,I;IAAM,oB;MAAA,OAAgB,I;IAAQ,6B;ItPhF1E,UAAa,E;IACN,GsP+E2G,CAAK,OAAL,S;ItP/E3G,GsP+EkI,CAAK,MAAL,Q;IAA/D,0BtP/EnE,G;EsP+EwJ,C;;IACpI,oB;MAAA,OAAe,M;IAAU,wCAAmC,I;EAAK,C;;ItPjF5F,UAAa,E;IsPkF2E,KtPhFpF,CADG,GACH,C;IsPgFyD,4CtPjFtD,GsPiFsD,C;EAAkC,C;;;;;;;ICnFnG,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,iD;IAAA,C;IAEI,8E;IAAM,kF;IAAQ,gF;EAFlB,C;;;IAEI,oC;IAAA,4C;EAAA,C;;;IAAM,oC;IAAA,8C;EAAA,C;;;IAAQ,oC;IAAA,6C;EAAA,C;;;;;;;IAFlB,8I;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,iD;MAAA,c;QAAA,mD;MAAA,a;QAAA,kD;MAAA,QAAA,gG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAEI,wE;IAAK,8E;IAAQ,8E;EAFjB,C;;;IAEI,kC;IAAA,yC;EAAA,C;;;IAAK,kC;IAAA,4C;EAAA,C;;;IAAQ,kC;IAAA,4C;EAAA,C;;;;;;;IAFjB,wI;EAAA,C;;;IAAA,a;MAAA,W;QAAA,8C;MAAA,c;QAAA,iD;MAAA,c;QAAA,iD;MAAA,QAAA,8F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,0C;IAAA,C;IAEI,wE;IAAU,oF;IAAgB,gE;EAF9B,C;;;IAEI,6B;IAAA,yC;EAAA,C;;;IAAU,6B;IAAA,+C;EAAA,C;;;IAAgB,6B;IAAA,qC;EAAA,C;;;;;;;IAF9B,oI;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,8C;MAAA,sB;QAAA,oD;MAAA,Y;QAAA,0C;MAAA,QAAA,yF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,0D;EAFJ,C;;;IAEI,yB;IAAA,kC;EAAA,C;;;;;;;IAFJ,yC;EAAA,C;;;IAAA,a;MAAA,a;QAAA,uC;MAAA,QAAA,qF;;EAAA,C;;;IC+CoE,uBAAkB,UAAW,W;EAAW,C;;IACzD,uBAAkB,U;EAAW,C;;IAClB,qBAAgB,QAAS,W;EAAW,C;;IACnD,qBAAgB,Q;EAAS,C;;;IAWD,kBAA3D,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,C;IAAiE,KrPmBzE,a;IqPnBE,+BrPoBK,WqPpByE,SAA9E,C;EAAA,C;;IC/CF,kCAAyC,IAAzC,EjQiEsC,WiQjEtC,EAAyD,gCAAzD,C;IAEA,uCAAmC,kB;IACnC,qCAAiC,kB;IACjC,mCAA2B,kB;IAC3B,8BAA0B,kB;IAC1B,mCAAuC,kB;IACvC,uCAA+B,kB;IAC/B,oCAAgC,kB;EAVT,C;;;WAIvB,sG;EAAA,C;;IAAA,uG3PjBJ,a2PiBI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mG3PlBJ,W2PkBI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+F3PnBJ,S2PmBI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qF3PpBJ,I2PoBI,C;EAAA,C;;;WACA,8F;EAAA,C;;IzPCA,iCAAqB,oDAArB,IFtBJ,SEsBiC,WFtBjC,SEsBiC,kB;EyPD7B,C;;;WACA,sG;EAAA,C;;IAAA,uG3PtBJ,a2PsBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG3PvBJ,U2PuBI,C;EAAA,C;;IAE+B,8BAAyB,I;EAAK,C;;IAChB,8BAAyB,W;EAAY,C;;IACnC,6B;InQ+DpC,kBAAX,mB;ImQ/DqF,KtPsDrF,a;IsPtD+C,gBnQ+D/C,MaRO,WbQmB,UAA1B,C;EmQ/D4F,C;;IACrC,8BAAyB,I;EAAK,C;;IACrD,+BAA0B,I;EAAK,C;;IACjB,+BAA0B,W;EAAY,C;;IACpC,6B;InQ2DrC,kBAAX,mB;ImQ3DuF,KtPkDvF,a;IsPlDgD,iBnQ2DhD,MaRO,WbQmB,UAA1B,C;EmQ3D8F,C;;IAhBnC,epQ8CjB,UoQ9CiB,EAAa,EAAb,C;EAAiB,C;;;;;;;ICZhF,e;IAC2B,oC;IAD3B,iB;IAAA,uB;EAC0B,C;;IAD1B,yC;IAAA,C;IAEI,yEAAU,YAAV,C;IACA,6EAAY,cAAZ,C;IACA,mEAAO,QAAP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oQYI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFpQbJ,IoQaI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FpQdJ,KoQcI,C;EAAA,C;;IAEkC,yCAAe,CAAf,C;EAAiB,C;;IACjB,yCAAe,CAAf,C;EAAiB,C;;IAChB,yCAAe,CAAf,C;EAAiB,C;;IACzB,kCAAQ,CAAR,C;EAAU,C;;IACV,kCAAQ,CAAR,C;EAAU,C;;IACT,kCAAQ,CAAR,C;EAAU,C;;;;;;;;ICH0B,kBAAxD,6BAAyB,mBAAzB,E3Q8D8B,W2Q9D9B,C;IAA8D,KhQ+DtE,a;IgQ/DE,+BhQgEK,WgQhEsE,SAA3E,C;EAAA,C;;ICVF,qB;MvQNA,UAAa,E;MuQMb,QvQLO,G;;IuQMP,wB;IAFA,gB;IACA,oB;EAFwB,C;;IAKd,QAAN,YAAM,C;EACV,C;;IAEe,kCAAc,SAAd,EAAoB,YAApB,ShRAmD,YgRAvB,chRAuB,CgRAnD,E;EAAA,C;;;;;;;;ICAiC,kBAAxC,0BAAsB,gBAAtB,C;IAA8C,KlQmEtD,a;IkQnEE,+BlQoEK,WkQpEsD,SAA3D,C;EAAA,C;;ICOF,+BAAiC,IAAjC,EAAuC,QAAvC,C;IAKA,mCAA+B,kB;IAC/B,sCAAkC,kB;IAClC,+BAAgC,kB;IAChC,mCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,gCAA4B,kB;IAC5B,iCAAuC,kB;IACvC,gCAAsC,kB;IACtC,8BAA0B,kB;IAC1B,4CAAuC,kB;IACvC,iCAAmC,kB;EAlBZ,C;;IAKnB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,8F;EAAA,C;;IAAA,+FxQ1BJ,SwQ0BI,C;EAAA,C;;;WACA,oG;EAAA,C;;IAAA,qGxQ3BJ,YwQ2BI,C;EAAA,C;;;WACA,sF;EAAA,C;;IAAA,uFxQ5BJ,KwQ4BI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FxQ7BJ,SwQ6BI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FxQ9BJ,QwQ8BI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFxQ/BJ,MwQ+BI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FxQhCJ,OwQgCI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yFxQjCJ,MwQiCI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qFxQlCJ,IwQkCI,C;EAAA,C;;;WACA,gH;EAAA,C;;IAAA,iHxQnCJ,kBwQmCI,C;EAAA,C;;;WACA,0F;EAAA,C;;ItQdA,+BAAqB,kDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EsQc7B,C;;IAKkC,IAAO,I;IAArC,mCAA8B,cAAO,cAAP,MAAO,CAAP,6B;EAClC,C;;IACmE,kCAAmB,MAAX,mBAAW,MAAc,KAAd,CAAnB,C;EAAwC,C;;IhR+ChG,kBAAX,mB;IgR9CiE,KnQqCjE,a;ImQrC4C,kChR8C5C,MaRO,WbQmB,UAA1B,CgR9C4C,C;EAA4B,C;;IAEpE,sCAAuB,KAAX,mBAAW,MAAa,KAAb,CAAoB,MAA3C,C;EACJ,C;;IAC2D,iCAA4B,K;EAAM,C;;IASpE,Q;IzQvDzB,UAAa,E;IyQgDT,YzQ/CG,G;IyQiDwB,kBAA3B,QjRSsC,UiRTtC,EAAa,YAAb,C;IAAiC,KnQ6BrC,a;IhB+9CgB,U;IAAA,SgB99CT,WmQ9BqC,kBnR4/C5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MmR5/CyD,UnR4/C5C,OE9zCmC,I;MiR9Lc,YnR4/CjD,OEjzCmC,M;MiR1MxD,MAAM,GAAN,IAAa,K;;IAIjB,+CAAqB,uDAArB,C;EACJ,C;;;;;;;ICzDJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,sD;IACA,0D;IACA,0D;IACA,8D;IACA,kE;IACA,8D;IACA,sD;EARJ,C;;;IAEI,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,kC;EAAA,C;;;IACA,wB;IAAA,kC;EAAA,C;;;IACA,wB;IAAA,oC;EAAA,C;;;IACA,wB;IAAA,sC;EAAA,C;;;IACA,wB;IAAA,oC;EAAA,C;;;IACA,wB;IAAA,gC;EAAA,C;;;;;;;IARJ,yP;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,qC;MAAA,c;QAAA,uC;MAAA,c;QAAA,uC;MAAA,gB;QAAA,yC;MAAA,kB;QAAA,2C;MAAA,gB;QAAA,yC;MAAA,Y;QAAA,qC;MAAA,QAAA,mF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,kE;IAAU,kE;IAAU,8D;EAFxB,C;;;IAEI,0B;IAAA,sC;EAAA,C;;;IAAU,0B;IAAA,sC;EAAA,C;;;IAAU,0B;IAAA,oC;EAAA,C;;;;;;;IAFxB,uH;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,2C;MAAA,gB;QAAA,2C;MAAA,c;QAAA,yC;MAAA,QAAA,qF;;EAAA,C;;;;IC+BqE,kBAAzD,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,C;IAA+D,KtQiDvE,a;IsQjDE,+BtQkDK,WsQlDuE,SAA5E,C;EAAA,C;;I5Q9BF,UAAa,E;I6QSb,8BAA+B,IAA/B,E7QRO,G6QQP,C;IACA,mCAA4C,U;EAHtB,C;;;WAGtB,+F;EAAA,C;;ICyBA,iCAAqB,mDAArB,I7QrCJ,S6QqCiC,W7QrCjC,S6QqCiC,kB;EDzB7B,C;;IAEqC,oBAAU,I;EAAK,C;;IAC7B,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;I7Qb1D,UAAa,E;IACN,G6QY0E,CAAK,OAAL,S;I7QZ1E,G6QYiG,CAAK,MAAL,Q;IAAtC,oB7QZ3D,G;E6QYuH,C;;;;;;;IEdlI,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,4D;IAAM,8D;IAAO,wD;IAAI,4D;EAFrB,C;;;IAEI,2B;IAAA,mC;EAAA,C;;;IAAM,2B;IAAA,oC;EAAA,C;;;IAAO,2B;IAAA,iC;EAAA,C;;;IAAI,2B;IAAA,mC;EAAA,C;;;;;;;IAFrB,kJ;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,wC;MAAA,a;QAAA,yC;MAAA,U;QAAA,sC;MAAA,Y;QAAA,wC;MAAA,QAAA,qF;;EAAA,C;;;;ICkBgD,kBAApC,wBAAoB,cAApB,C;IAA0C,K1Q8DlD,a;I0Q9DE,+B1Q+DK,W0Q/DkD,SAAvD,C;EAAA,C;;ICGF,kCAA2C,IAA3C,EAAiD,QAAjD,EAA2D,kCAA3D,C;IAKA,gCAAiC,kB;IACjC,sCAAyC,kB;IACzC,0CAAqC,kB;IACrC,gDAA2C,kB;IAC3C,qCAAiC,kB;IACjC,mDAA+C,kB;IAC/C,6BAAqB,kB;IACrB,iCAAkC,kB;IAClC,iCAA+C,kB;IAC/C,iCAAuD,kB;IACvD,mCAAyD,kB;IACzD,oCAA0D,kB;IAC1D,gCAA6C,kB;IAC7C,kCAA+C,kB;IAC/C,mCAAgD,kB;IAChD,sCAA4C,kB;IAC5C,sCAA4C,kB;IAC5C,8BAA0B,kB;IAC1B,4CAAuC,kB;IACvC,4CAAoC,kB;IACpC,yCAA8C,kB;EA5BrB,C;;IAKrB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,0F;EAAA,C;;IAAA,2FhR3BJ,MgR2BI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uGhR5BJ,YgR4BI,C;EAAA,C;;;WACA,8G;EAAA,C;;IAAA,+GhR7BJ,gBgR6BI,C;EAAA,C;;;WACA,0H;EAAA,C;;IAAA,2HhR9BJ,sBgR8BI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sGhR/BJ,YgR+BI,C;EAAA,C;;;WACA,gI;EAAA,C;;IAAA,iIhRhCJ,yBgRgCI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qFhRjCJ,GgRiCI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FhRlCJ,OgRkCI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FhRnCJ,OgRmCI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FhRpCJ,OgRoCI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGhRrCJ,SgRqCI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mGhRtCJ,UgRsCI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FhRvCJ,MgRuCI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FhRxCJ,QgRwCI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iGhRzCJ,SgRyCI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uGhR1CJ,YgR0CI,C;EAAA,C;;;WACA,sG;EAAA,C;;IAAA,uGhR3CJ,YgR2CI,C;EAAA,C;;;WACA,sF;EAAA,C;;IAAA,uFhR5CJ,IgR4CI,C;EAAA,C;;;WACA,kH;EAAA,C;;IAAA,mHhR7CJ,kBgR6CI,C;EAAA,C;;;WACA,kH;EAAA,C;;;WACA,4G;EAAA,C;;IAAA,6GhR/CJ,egR+CI,C;EAAA,C;;IxR2CW,kBAAX,mB;IwRzCmE,K3QgCnE,a;I2QhC6C,mCxRyC7C,MaRO,WbQmB,UAA1B,CwRzC6C,C;EAA6B,C;;IjR/C1E,UAAa,E;IiRgDoE,KjR9C7E,CADG,GACH,C;IiR8CqD,yCjR/ClD,GiR+CkD,C;EAA+B,C;;IAEpF,mDAAoC,kBAAX,mBAAW,EAAkB,KAAlB,CAAyB,MAA7D,C;EACJ,C;;IAEI,yCAA0B,gBAAX,mBAAW,MAAwB,KAAxB,CAA+B,MAAzD,C;EACJ,C;;IAEI,yCAA0B,kBAAX,mBAAW,MAA0B,OAA1B,EAA2C,KAA3C,CAAkD,MAA5E,C;EACJ,C;;IxR+BW,kBAAX,mB;IwR9BqE,K3QqBrE,a;I2QrB8C,oCxR8B9C,MaRO,WbQmB,UAA1B,CwR9B8C,C;EAA8B,C;;IAIpC,IAAO,I;IAA3C,yCAAoC,cAAO,cAAP,MAAO,CAAP,6B;EACxC,C;;IAC+C,yCAAoC,O;EAAQ,C;;IAClD,wCAAmC,I;EAAK,C;;IACtD,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IAAQ,6B;IjRlEtE,UAAa,E;IACN,GiRiEuG,CAAK,OAAL,S;IjRjEvG,GiRiE8H,CAAK,MAAL,Q;IAA/D,0BjRjE/D,G;EiRiEoJ,C;;IjRlE3J,UAAa,E;IiRmE4E,KjRjErF,CADG,GACH,C;IiRiE0D,4CjRlEvD,GiRkEuD,C;EAAkC,C;;IA/CnC,ezRuCnB,UyRvCmB,EAAa,EAAb,C;EAAiB,C;;;;;;;ICrBlF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,kD;IAAA,C;IAEI,gF;IAAM,oF;IAAQ,kF;EAFlB,C;;;IAEI,qC;IAAA,6C;EAAA,C;;;IAAM,qC;IAAA,+C;EAAA,C;;;IAAQ,qC;IAAA,8C;EAAA,C;;;;;;;IAFlB,iJ;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,kD;MAAA,c;QAAA,oD;MAAA,a;QAAA,mD;MAAA,QAAA,kG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,gD;IAAA,C;IAEI,0E;IAAK,gF;EAFT,C;;;IAEI,mC;IAAA,0C;EAAA,C;;;IAAK,mC;IAAA,6C;EAAA,C;;;;;;;IAFT,8F;EAAA,C;;;IAAA,a;MAAA,W;QAAA,+C;MAAA,c;QAAA,kD;MAAA,QAAA,gG;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IACA,4F;IACA,kG;IACA,0F;IACA,gG;IACA,wF;IACA,8F;EARJ,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IACA,0B;IAAA,mD;EAAA,C;;;IACA,0B;IAAA,sD;EAAA,C;;;IACA,0B;IAAA,kD;EAAA,C;;;IACA,0B;IAAA,qD;EAAA,C;;;IACA,0B;IAAA,iD;EAAA,C;;;IACA,0B;IAAA,oD;EAAA,C;;;;;;;IARJ,8V;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,6B;QAAA,wD;MAAA,gC;QAAA,2D;MAAA,4B;QAAA,uD;MAAA,+B;QAAA,0D;MAAA,2B;QAAA,sD;MAAA,8B;QAAA,yD;MAAA,QAAA,uF;;EAAA,C;;;ICiCa,gB;IAAD,QAAC,2BAAY,YAAZ,0DAAD,YAAuE,wCAAvE,O;EAAA,C;;IACK,UAAY,YAAZ,IAA4B,uC;EAAkB,C;;IAElD,gB;IAAD,QAAC,2BAAY,UAAZ,0DAAD,YAAmE,sCAAnE,O;EAAA,C;;IACK,UAAY,UAAZ,IAA0B,uC;EAAkB,C;;;IAMY,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,K/QqC3E,a;I+QrCE,+B/QsCK,W+QtC2E,SAAhF,C;EAAA,C;;IC7BF,+BAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAEA,gCAAiC,kB;IACjC,iCAAkC,kB;EAPM,C;;;WAMxC,iG;EAAA,C;;IAAA,kGrRjBJ,MqRiBI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oGrRlBJ,OqRkBI,C;EAAA,C;;I7RwEW,kBAAX,mB;I6RtEmE,KhR6DnE,a;IgR7D6C,mC7RsE7C,MaRO,WbQmB,UAA1B,C6RtE6C,C;EAA6B,C;;I7RsE/D,kBAAX,mB;I6RrEqE,KhR4DrE,a;IgR5D8C,oC7RqE9C,MaRO,WbQmB,UAA1B,C6RrE8C,C;EAA8B,C;;;;;;;ICpBhF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,8C;IAAA,C;IAEI,wE;IACA,8E;IACA,4E;EAJJ,C;;;IAEI,iC;IAAA,yC;EAAA,C;;;IACA,iC;IAAA,4C;EAAA,C;;;IACA,iC;IAAA,2C;EAAA,C;;;;;;;IAJJ,uI;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,8C;MAAA,e;QAAA,iD;MAAA,c;QAAA,gD;MAAA,QAAA,qG;;EAAA,C;;;;ICqByF,ehSuC3C,UgSvC2C,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAhG,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,EAA2E,sBAA3E,C;IAAsG,KlR2D9G,a;IkR3DE,+BlR4DK,WkR5D8G,SAAnH,C;EAAA,C;;IAG0F,kBAApF,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,EAA2E,OAA3E,C;IAA0F,KlRwDlG,a;IkRxDE,+BlRyDK,WkRzDkG,SAAvG,C;EAAA,C;;ICTF,kCAAuC,IAAvC,EAA6C,QAA7C,EAAuD,8BAAvD,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,mCAAoC,kB;IACpC,kCAA8B,kB;IAC9B,+BAA0B,kB;IAC1B,8BAA0B,kB;IAC1B,oCAAyC,kB;EAfpB,C;;IAKjB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,sF;EAAA,C;;IAAA,uFxRrBJ,MwRqBI,C;EAAA,C;;;WACA,0G;EAAA,C;;IAAA,2GxRtBJ,gBwRsBI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FxRvBJ,SwRuBI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FxRxBJ,SwRwBI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FxRzBJ,QwRyBI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qFxR1BJ,KwR0BI,C;EAAA,C;;;WACA,kF;EAAA,C;;IAAA,mFxR3BJ,IwR2BI,C;EAAA,C;;;WACA,+F;EAAA,C;;ItRNA,kCAAqB,oDAArB,IFtBJ,WEsBiC,WFtBjC,WEsBiC,kB;EsRM7B,C;;IhS8DW,kBAAX,mB;IgS5DyE,KnRmDzE,a;ImRnDgD,sChS4DhD,MaRO,WbQmB,UAA1B,CgS5DgD,C;EAAgC,C;;IAdvB,ejS6Cf,UiS7Ce,EAAa,EAAb,C;EAAiB,C;;;;;;;ICf9E,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,0E;IAAY,sE;EAFhB,C;;;IAEI,4B;IAAA,0C;EAAA,C;;;IAAY,4B;IAAA,wC;EAAA,C;;;;;;;IAFhB,yF;EAAA,C;;;IAAA,a;MAAA,kB;QAAA,+C;MAAA,gB;QAAA,6C;MAAA,QAAA,qF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,kD;IACA,8D;IACA,0D;IACA,0E;IACA,4D;EANJ,C;;;IAEI,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,oC;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;;IACA,sB;IAAA,0C;EAAA,C;;;IACA,sB;IAAA,mC;EAAA,C;;;;;;;IANJ,wL;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mC;MAAA,kB;QAAA,yC;MAAA,gB;QAAA,uC;MAAA,wB;QAAA,+C;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;EAAA,C;;;;ICwBiE,kBAArD,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,C;IAA2D,KtRwDnE,a;IsRxDE,+BtRyDK,WsRzDmE,SAAxE,C;EAAA,C;;ICTF,oCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAEA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,8BAA+B,kB;IAC/B,8BAA0B,kB;IAC1B,kCAAmC,kB;IACnC,qCAAyC,kB;EAZN,C;;;WAMnC,4F;EAAA,C;;IAAA,6F5RlBJ,M4RkBI,C;EAAA,C;;;WACA,gH;EAAA,C;;IAAA,iH5RnBJ,gB4RmBI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mG5RpBJ,S4RoBI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yF5RrBJ,I4RqBI,C;EAAA,C;;;WACA,wF;EAAA,C;;IAAA,yF5RtBJ,I4RsBI,C;EAAA,C;;;WACA,gG;EAAA,C;;IAAA,iG5RvBJ,Q4RuBI,C;EAAA,C;;;WACA,sG;EAAA,C;;I1RFA,mCAAqB,0DAArB,IFtBJ,WEsBiC,WFtBjC,WEsBiC,kB;E0RE7B,C;;IpSkEW,kBAAX,mB;IoShE+D,KvRuD/D,a;IuRvD2C,iCpSgE3C,MaRO,WbQmB,UAA1B,CoShE2C,C;EAA2B,C;;IpSgE3D,kBAAX,mB;IoS/DuE,KvRsDvE,a;IuRtD+C,qCpS+D/C,MaRO,WbQmB,UAA1B,CoS/D+C,C;EAA+B,C;;;;;;;IC1BlF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,8D;IACA,0E;IACA,sE;IACA,4E;EALJ,C;;;IAEI,4B;IAAA,oC;EAAA,C;;;IACA,4B;IAAA,0C;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,2C;EAAA,C;;;;;;;IALJ,wK;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,yC;MAAA,kB;QAAA,+C;MAAA,gB;QAAA,6C;MAAA,mB;QAAA,gD;MAAA,QAAA,2F;;EAAA,C;;;;IC0B+E,kBvSkCjC,UuSlCiC,EAAgB,EAAhB,C;EAAoB,C;;IAAE,kBAAzF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA+F,KzRsDvG,a;IyRtDE,+BzRuDK,WyRvDuG,SAA5G,C;EAAA,C;;IAGgF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,KzRmDxF,a;IyRnDE,+BzRoDK,WyRpDwF,SAA7F,C;EAAA,C;;ICjBF,kCAAgD,IAAhD,EAAsD,QAAtD,EAAgE,uCAAhE,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,kCAA8B,kB;IAC9B,+BAA0B,kB;IAC1B,qCAAyC,kB;EAbX,C;;IAK1B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,+F;EAAA,C;;IAAA,gG/RlBJ,M+RkBI,C;EAAA,C;;;WACA,mH;EAAA,C;;IAAA,oH/RnBJ,gB+RmBI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sG/RpBJ,S+RoBI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oG/RrBJ,Q+RqBI,C;EAAA,C;;;WACA,6F;EAAA,C;;IAAA,8F/RtBJ,K+RsBI,C;EAAA,C;;;WACA,yG;EAAA,C;;I7RDA,mCAAqB,6DAArB,IFtBJ,WEsBiC,WFtBjC,WEsBiC,kB;E6RC7B,C;;IAVkE,exSgDxB,UwShDwB,EAAa,EAAb,C;EAAiB,C;;;;;;;ICZvF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,4C;IAAA,C;IAEI,oE;IACA,gF;IACA,4E;IACA,4F;IACA,wE;IACA,8E;IACA,4E;IACA,oE;IACA,wF;IACA,oF;EAXJ,C;;;IAEI,+B;IAAA,uC;EAAA,C;;;IACA,+B;IAAA,6C;EAAA,C;;;IACA,+B;IAAA,2C;EAAA,C;;;IACA,+B;IAAA,mD;EAAA,C;;;IACA,+B;IAAA,yC;EAAA,C;;;IACA,+B;IAAA,4C;EAAA,C;;;IACA,+B;IAAA,2C;EAAA,C;;;IACA,+B;IAAA,uC;EAAA,C;;;IACA,+B;IAAA,iD;EAAA,C;;;IACA,+B;IAAA,+C;EAAA,C;;;;;;;IAXJ,gc;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,4C;MAAA,kB;QAAA,kD;MAAA,gB;QAAA,gD;MAAA,wB;QAAA,wD;MAAA,c;QAAA,8C;MAAA,iB;QAAA,iD;MAAA,gB;QAAA,gD;MAAA,Y;QAAA,4C;MAAA,sB;QAAA,sD;MAAA,oB;QAAA,oD;MAAA,QAAA,iG;;EAAA,C;;;;ICqBmF,kBAAvE,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,C;IAA6E,K5R2DrF,a;I4R3DE,+B5R4DK,W4R5DqF,SAA1F,C;EAAA,C;;ICHF,kCAA8C,IAA9C,EAAoD,QAApD,EAA8D,qCAA9D,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,8BAA0B,kB;IAC1B,kCAA8B,kB;IAC9B,qCAAyC,kB;IACzC,4CAAoC,kB;IACpC,yCAA8C,kB;EAflB,C;;IAKxB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,6F;EAAA,C;;IAAA,8FlSxBJ,MkSwBI,C;EAAA,C;;;WACA,iH;EAAA,C;;IAAA,kHlSzBJ,gBkSyBI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oGlS1BJ,SkS0BI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FlS3BJ,IkS2BI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGlS5BJ,QkS4BI,C;EAAA,C;;;WACA,uG;EAAA,C;;IhSPA,mCAAqB,2DAArB,IFtBJ,WEsBiC,WFtBjC,WEsBiC,kB;EgSO7B,C;;;WACA,qH;EAAA,C;;IAAA,sHlS9BJ,kBkS8BI,C;EAAA,C;;;WACA,+G;EAAA,C;;IAAA,gHlS/BJ,ekS+BI,C;EAAA,C;;IAKwC,IAAO,I;IAA3C,yCAAoC,cAAO,cAAP,MAAO,CAAP,6B;EACxC,C;;IAC+C,yCAAoC,O;EAAQ,C;;IAClD,wCAAmC,I;EAAK,C;;IACtD,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IAAQ,6B;InStCtE,UAAa,E;IACN,GmSqCuG,CAAK,OAAL,S;InSrCvG,GmSqC8H,CAAK,MAAL,Q;IAA/D,0BnSrC/D,G;EmSqCoJ,C;;IAChI,oB;MAAA,OAAe,M;IAAU,wCAAmC,I;EAAK,C;;InSvC5F,UAAa,E;ImSwC4E,KnStCrF,CADG,GACH,C;ImSsC0D,4CnSvCvD,GmSuCuD,C;EAAkC,C;;IAvBhC,e3S0CtB,U2S1CsB,EAAa,EAAb,C;EAAiB,C;;;;;;;IClBrF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,0C;IAAA,C;IAEI,gE;IACA,gE;IACA,4E;EAJJ,C;;;IAEI,6B;IAAA,qC;EAAA,C;;;IACA,6B;IAAA,qC;EAAA,C;;;IACA,6B;IAAA,2C;EAAA,C;;;;;;;IAJJ,4H;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,0C;MAAA,Y;QAAA,0C;MAAA,kB;QAAA,gD;MAAA,QAAA,6F;;EAAA,C;;;;ICyB+E,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,K/RuDjF,a;I+RvDE,+B/RwDK,W+RxDiF,SAAtF,C;EAAA,C;;ICnBF,qB;MtSLA,UAAa,E;MsSKb,QtSJO,G;;IsSKP,wB;IAHA,kB;IAEA,oB;IAGU,qBAAN,YAAM,EAAQ,QAAR,C;EANe,C;;IAUf,QAAN,YAAM,C;EACV,C;;IAEe,kCAAc,WAAd,EAAoB,YAApB,S/SHmD,Y+SGvB,c/SHuB,C+SGnD,E;EAAA,C;;IjTyiRR,kBAAM,eiTtiRD,QjTsiRc,OAAb,C;IA6UA,Q;IAAb,wBiTn3RY,QjTm3RZ,gB;MAAa,WiTn3RD,QjTm3RZ,M;mBACI,W;MiTp3RuB,IAAC,MjTo3RE,IiTp3RF,aAAD;QAAM,QjTo3RH,IiTp3RG,a;MjTo3RjB,YAAZ,WAAY,EiTp3R2B,QAAO,KAAP,CjTo3R3B,C;;IiTp3RZ,gCjTq3RG,WiTr3RH,C;EACJ,C;;IhT0wCO,kBAAM,eAAa,wBgTvwCd,QhTuwCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OgT50CD,QhT40CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MgT70CuB,IAAC,MhT60CE,IgT70CF,aAAD;QAAM,QhT60CH,IgT70CG,a;MhT60CjB,YAAZ,WAAY,EgT70C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,ChT60C3B,C;;IgT70CZ,gChT80CG,WgT90CH,C;EACJ,C;;IjTiiRO,kBAAM,eiT9hRD,QjT8hRc,OAAb,C;IA6UA,Q;IAAb,wBiT32RY,QjT22RZ,gB;MAAa,WiT32RD,QjT22RZ,M;mBACI,W;MiT52RuB,IAAC,MjT42RE,IiT52RF,aAAD;QAAM,QjT42RH,IiT52RG,a;MjT42RjB,YAAZ,WAAY,EiT52R2B,QAAO,KAAP,CjT42R3B,C;;IiT52RZ,gCjT62RG,WiT72RH,C;EACJ,C;;IAW6B,Q;IARzB,IAAI,QAAS,UAAb,C;MACI,M;;ItS/BR,UAAa,E;IsSkCT,iBtSjCG,G;IV6iDS,U;IAAA,SgT1gDZ,QhT0gDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MgT1gDO,IAAC,MhT0gDK,OgT1gDL,aAAD;QAAM,QhT0gDA,OgT1gDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,UAAY,SAAZ,IAAyB,yD;EAC7B,C;;I7SiDW,kBAAX,mB;I6S/CyE,KhSsCzE,a;IgStCqD,iB7S+CrD,MaRO,WbQmB,UAA1B,C;E6S/CgF,C;;;;;;;IC1CpF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,0D;IACA,0D;IACA,8D;IACA,oE;IACA,4D;EANJ,C;;;IAEI,0B;IAAA,kC;EAAA,C;;;IACA,0B;IAAA,kC;EAAA,C;;;IACA,0B;IAAA,oC;EAAA,C;;;IACA,0B;IAAA,uC;EAAA,C;;;IACA,0B;IAAA,mC;EAAA,C;;;;;;;IANJ,yL;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,uC;MAAA,Y;QAAA,uC;MAAA,c;QAAA,yC;MAAA,iB;QAAA,4C;MAAA,a;QAAA,wC;MAAA,QAAA,uF;;EAAA,C;;;;ICoByE,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,KlS4D3E,a;IkS5DE,+BlS6DK,WkS7D2E,SAAhF,C;EAAA,C;;ICLF,kCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,mCAA7D,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,8BAA+B,kB;IAC/B,8BAA0B,kB;IAC1B,kCAAmC,kB;IACnC,qCAAyC,kB;IACzC,uCAAkC,kB;EAjBR,C;;IAKtB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,2F;EAAA,C;;IAAA,4FxSrBJ,MwSqBI,C;EAAA,C;;;WACA,+G;EAAA,C;;IAAA,gHxStBJ,gBwSsBI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGxSvBJ,SwSuBI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGxSxBJ,QwSwBI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FxSzBJ,KwSyBI,C;EAAA,C;;;WACA,uF;EAAA,C;;IAAA,wFxS1BJ,IwS0BI,C;EAAA,C;;;WACA,uF;EAAA,C;;IAAA,wFxS3BJ,IwS2BI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gGxS5BJ,QwS4BI,C;EAAA,C;;;WACA,qG;EAAA,C;;ItSPA,mCAAqB,yDAArB,IFtBJ,WEsBiC,WFtBjC,WEsBiC,kB;EsSO7B,C;;;WACA,yG;EAAA,C;;IAAA,0GxS9BJ,awS8BI,C;EAAA,C;;IhT4DW,kBAAX,mB;IgT1D+D,KnSiD/D,a;ImSjD2C,iChT0D3C,MaRO,WbQmB,UAA1B,CgT1D2C,C;EAA2B,C;;IAIhC,IAAO,I;IAAzC,uCAAkC,cAAO,cAAP,MAAO,CAAP,6B;EACtC,C;;IhTqDW,kBAAX,mB;IgTpDuE,KnS2CvE,a;ImS3C+C,qChToD/C,MaRO,WbQmB,UAA1B,CgTpD+C,C;EAA+B,C;;IACjC,uCAAkC,O;EAAQ,C;;IzSrCvF,UAAa,E;IySsCqE,KzSpC9E,CADG,GACH,C;IySoCqD,0CzSrClD,GySqCkD,C;EAAgC,C;;IAxB1B,gBjT6CrB,UiT7CqB,EAAc,EAAd,C;EAAkB,C;;;;;;;ICfrF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,4D;IACA,wE;IACA,oE;IACA,8D;IACA,gE;IACA,sE;IACA,8D;IACA,oE;IACA,8E;IACA,oF;IACA,iF;EAZJ,C;;;IAEI,2B;IAAA,mC;EAAA,C;;;IACA,2B;IAAA,yC;EAAA,C;;;IACA,2B;IAAA,uC;EAAA,C;;;IACA,2B;IAAA,oC;EAAA,C;;;IACA,2B;IAAA,qC;EAAA,C;;;IACA,2B;IAAA,wC;EAAA,C;;;IACA,2B;IAAA,oC;EAAA,C;;;IACA,2B;IAAA,uC;EAAA,C;;;IACA,2B;IAAA,4C;EAAA,C;;;IACA,2B;IAAA,+C;EAAA,C;;;IACA,2B;IAAA,6C;EAAA,C;;;;;;;IAZJ,8b;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,wC;MAAA,kB;QAAA,8C;MAAA,gB;QAAA,4C;MAAA,a;QAAA,yC;MAAA,c;QAAA,0C;MAAA,iB;QAAA,6C;MAAA,a;QAAA,yC;MAAA,gB;QAAA,4C;MAAA,qB;QAAA,iD;MAAA,wB;QAAA,oD;MAAA,sB;QAAA,kD;MAAA,QAAA,yF;;EAAA,C;;;;IC4B2E,kBAA/D,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,C;IAAqE,KrSoD7E,a;IqSpDE,+BrSqDK,WqSrD6E,SAAlF,C;EAAA,C;;ICbF,+BAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAEA,oCAA+B,kB;IAC/B,0CAAsC,kB;IACtC,mCAAoC,kB;IACpC,mCAA+B,kB;IAC/B,qCAAyC,kB;EAVT,C;;;WAMhC,iG;EAAA,C;;IAAA,kG3SlBJ,U2SkBI,C;EAAA,C;;;WACA,6G;EAAA,C;;IAAA,8G3SnBJ,gB2SmBI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gG3SpBJ,S2SoBI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gG3SrBJ,S2SqBI,C;EAAA,C;;;WACA,mG;EAAA,C;;IzSAA,mCAAqB,uDAArB,IFtBJ,WEsBiC,WFtBjC,WEsBiC,kB;EySA7B,C;;InToEW,kBAAX,mB;ImTlEyE,KtSyDzE,a;IsSzDgD,sCnTkEhD,MaRO,WbQmB,UAA1B,CmTlEgD,C;EAAgC,C;;;;;;;ICvBpF,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,wD;IACA,oE;IACA,gE;IACA,gF;EALJ,C;;;IAEI,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,6C;EAAA,C;;;;;;;IALJ,iK;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,sC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,wB;QAAA,kD;MAAA,QAAA,qF;;EAAA,C;;;;ICwByE,etToC3B,UsTpC2B,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAhF,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,cAA3D,C;IAAsF,KxSwD9F,a;IwSxDE,+BxSyDK,WwSzD8F,SAAnG,C;EAAA,C;;IAG0E,kBAApE,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,OAA3D,C;IAA0E,KxSqDlF,a;IwSrDE,+BxSsDK,WwStDkF,SAAvF,C;EAAA,C;;ICZF,kCAAwC,IAAxC,EAA8C,QAA9C,EAAwD,OAAxD,C;IAKA,+BAAgC,kB;IAChC,kCAAsC,kB;IAItC,wCAAmC,kB;IACnC,qCAAgC,kB;IAChC,iCAA4B,kB;EAhBI,C;;IAM5B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,uF;EAAA,C;;I5SCA,6BAAqB,iDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;E4SD7B,C;;;WACA,6F;EAAA,C;;I5SAA,gCAAqB,oDAArB,IFtBJ,QEsBiC,WFtBjC,QEsBiC,kB;E4SA7B,C;;IAEY,OAAc,gBAAd,kBAAc,C;EAAd,C;;IACK,oCAA4B,KAA5B,C;EAAkC,C;;;WACnD,yG;EAAA,C;;IAAA,0G9S1BJ,c8S0BI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oG9S3BJ,W8S2BI,C;EAAA,C;;;WACA,2F;EAAA,C;;IAAA,4F9S5BJ,O8S4BI,C;EAAA,C;;;;;;;IC3BJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,8D;IAAS,8D;IAAS,kE;IAAW,4D;IAAQ,0D;IAAO,gE;EAFhD,C;;;IAEI,yB;IAAA,oC;EAAA,C;;;IAAS,yB;IAAA,oC;EAAA,C;;;IAAS,yB;IAAA,sC;EAAA,C;;;IAAW,yB;IAAA,mC;EAAA,C;;;IAAQ,yB;IAAA,kC;EAAA,C;;;IAAO,yB;IAAA,qC;EAAA,C;;;;;;;IAFhD,+N;EAAA,C;;;IAAA,a;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,QAAA,qF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,oE;IAAS,oE;IAAS,gE;IAAO,gE;EAF7B,C;;;IAEI,4B;IAAA,uC;EAAA,C;;;IAAS,4B;IAAA,uC;EAAA,C;;;IAAS,4B;IAAA,qC;EAAA,C;;;IAAO,4B;IAAA,qC;EAAA,C;;;;;;;IAF7B,+J;EAAA,C;;;IAAA,a;MAAA,e;QAAA,4C;MAAA,e;QAAA,4C;MAAA,a;QAAA,0C;MAAA,a;QAAA,0C;MAAA,QAAA,wF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,wD;IACA,wE;IACA,4E;IACA,sE;IACA,oE;IACA,0E;IACA,8E;IACA,0E;IACA,0E;EAVJ,C;;;IAEI,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;;;;;IAVJ,qX;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,QAAA,qF;;EAAA,C;;;;;WCqBA,6D;EAAA,C;;IAAA,8DlTtBA,akTsBA,C;EAAA,C;;;IAMyE,e3TiC3B,U2TjC2B,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAhF,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,cAA3D,C;IAAsF,K7SqD9F,a;I6SrDE,+B7SsDK,W6StD8F,SAAnG,C;EAAA,C;;IAG0E,kBAApE,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,OAA3D,C;IAA0E,K7SkDlF,a;I6SlDE,+B7SmDK,W6SnDkF,SAAvF,C;EAAA,C;;IChBF,gCAA2C,IAA3C,EAAiD,QAAjD,C;IAEA,mDAA+C,kB;IAC/C,0CAAsC,kB;IACtC,4CAAwC,kB;IACxC,sCAAkC,kB;IAClC,oCAA+B,kB;IAC/B,0CAAqC,kB;IACrC,gCAAsC,kB;IACtC,wCAAmC,kB;IACnC,wCAAmC,kB;EAbH,C;;;WAKhC,uI;EAAA,C;;IAAA,wInTjBJ,yBmTiBI,C;EAAA,C;;;WACA,qH;EAAA,C;;IAAA,sHnTlBJ,gBmTkBI,C;EAAA,C;;;WACA,yH;EAAA,C;;IAAA,0HnTnBJ,kBmTmBI,C;EAAA,C;;;WACA,6G;EAAA,C;;IAAA,8GnTpBJ,YmToBI,C;EAAA,C;;;WACA,yG;EAAA,C;;IAAA,0GnTrBJ,UmTqBI,C;EAAA,C;;;WACA,qH;EAAA,C;;IAAA,sHnTtBJ,gBmTsBI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kGnTvBJ,MmTuBI,C;EAAA,C;;;WACA,iH;EAAA,C;;IAAA,kHnTxBJ,cmTwBI,C;EAAA,C;;;WACA,iH;EAAA,C;;IAAA,kHnTzBJ,cmTyBI,C;EAAA,C;;IAUqB,Q;IpTjCrB,UAAa,E;IoT0BT,YpTzBG,G;IoT2BwB,kBAA3B,Q5T+BsC,U4T/BtC,EAAa,YAAb,C;IAAiC,K9SmDrC,a;IhB+9CgB,U;IAAA,SgB99CT,W8SpDqC,kB9TkhD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;M8TlhDyD,U9TkhD5C,OE9zCmC,I;M4TpNc,Y9TkhDjD,OEjzCmC,M;M4ThOxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;;;;;;;;ICV0E,kBAAlE,kCAA8B,wBAA9B,E1TsD8B,W0TtD9B,C;IAAwE,K/SuDhF,a;I+SvDE,+B/SwDK,W+SxDgF,SAArF,C;EAAA,C;;ICdF,oCAAsC,IAAtC,EAA4C,QAA5C,C;IAKA,+BAA+B,kB;IAC/B,+BAAuB,kB;EATA,C;;IAKnB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,sF;EAAA,C;;InTKA,6BAAqB,gDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EmTL7B,C;;;WACA,sF;EAAA,C;;IAAA,uFrTlBJ,KqTkBI,C;EAAA,C;;IAE2B,kCAAQ,CAAR,C;EAAU,C;;IACV,kCAAQ,CAAR,C;EAAU,C;;IACT,kCAAQ,CAAR,C;EAAU,C;;;;;;;ICrB1C,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,4D;IAAS,gE;IAAW,4D;EAFxB,C;;;IAEI,wB;IAAA,mC;EAAA,C;;;IAAS,wB;IAAA,qC;EAAA,C;;;IAAW,wB;IAAA,mC;EAAA,C;;;;;;;IAFxB,kH;EAAA,C;;;IAAA,a;MAAA,e;QAAA,wC;MAAA,iB;QAAA,0C;MAAA,e;QAAA,wC;MAAA,QAAA,qF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,sD;IACA,sD;IACA,oE;IACA,kE;IACA,4D;IACA,sE;IACA,0E;IACA,8D;IACA,oD;EAVJ,C;;;IAEI,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,gC;EAAA,C;;;IACA,wB;IAAA,uC;EAAA,C;;;IACA,wB;IAAA,sC;EAAA,C;;;IACA,wB;IAAA,mC;EAAA,C;;;IACA,wB;IAAA,wC;EAAA,C;;;IACA,wB;IAAA,0C;EAAA,C;;;IACA,wB;IAAA,oC;EAAA,C;;;IACA,wB;IAAA,+B;EAAA,C;;;;;;;IAVJ,4U;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,qC;MAAA,Y;QAAA,qC;MAAA,mB;QAAA,4C;MAAA,kB;QAAA,2C;MAAA,e;QAAA,wC;MAAA,oB;QAAA,6C;MAAA,sB;QAAA,+C;MAAA,gB;QAAA,yC;MAAA,W;QAAA,oC;MAAA,QAAA,qF;;EAAA,C;;;;ICgBqE,kBAAzD,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,C;IAA+D,KnTgEvE,a;ImThEE,+BnTiEK,WmTjEuE,SAA5E,C;EAAA,C;;ICAF,oCAAsC,IAAtC,EAA4C,QAA5C,EAAsD,OAAtD,C;IAKA,mCAA+B,kB;IAC/B,8BAA+B,kB;IAC/B,mCAAoC,kB;IACpC,+BAAgC,kB;IAChC,kCAA8B,kB;IAC9B,mCAAoC,kB;IACpC,+BAAuB,kB;EAfK,C;;IAMxB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,2F;EAAA,C;;IAAA,4FzTtBJ,SyTsBI,C;EAAA,C;;;WACA,iF;EAAA,C;;IAAA,kFzTvBJ,IyTuBI,C;EAAA,C;;;WACA,2F;EAAA,C;;IAAA,4FzTxBJ,SyTwBI,C;EAAA,C;;;WACA,mF;EAAA,C;;IAAA,oFzTzBJ,KyTyBI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0FzT1BJ,QyT0BI,C;EAAA,C;;;WACA,2F;EAAA,C;;IvTLA,iCAAqB,iDAArB,IFtBJ,SEsBiC,WFtBjC,SEsBiC,kB;EuTK7B,C;;;WACA,mF;EAAA,C;;IAAA,oFzT5BJ,KyT4BI,C;EAAA,C;;IjU8DW,kBAAX,mB;IiU5D+D,KpTmD/D,a;IoTnD2C,iCjU4D3C,MaRO,WbQmB,UAA1B,CiU5D2C,C;EAA2B,C;;IjU4D3D,kBAAX,mB;IiU3DyE,KpTkDzE,a;IoTlDgD,sCjU2DhD,MaRO,WbQmB,UAA1B,CiU3DgD,C;EAAgC,C;;IjU2DrE,kBAAX,mB;IiU1DiE,KpTiDjE,a;IoTjD4C,kCjU0D5C,MaRO,WbQmB,UAA1B,CiU1D4C,C;EAA4B,C;;;;;;;IC/B5E,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,kC;IAAA,C;IAEI,gD;IACA,0D;IACA,wE;IACA,wE;IACA,4E;IACA,wD;IACA,wD;IACA,0D;IACA,sD;IACA,oE;IACA,mD;IACA,iE;EAbJ,C;;;IAEI,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,kC;EAAA,C;;;IACA,qB;IAAA,yC;EAAA,C;;;IACA,qB;IAAA,yC;EAAA,C;;;IACA,qB;IAAA,2C;EAAA,C;;;IACA,qB;IAAA,iC;EAAA,C;;;IACA,qB;IAAA,iC;EAAA,C;;;IACA,qB;IAAA,kC;EAAA,C;;;IACA,qB;IAAA,gC;EAAA,C;;;IACA,qB;IAAA,uC;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,qC;EAAA,C;;;;;;;IAbJ,ib;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,kC;MAAA,iB;QAAA,uC;MAAA,wB;QAAA,8C;MAAA,wB;QAAA,8C;MAAA,0B;QAAA,gD;MAAA,gB;QAAA,sC;MAAA,gB;QAAA,sC;MAAA,iB;QAAA,uC;MAAA,e;QAAA,qC;MAAA,sB;QAAA,4C;MAAA,a;QAAA,mC;MAAA,oB;QAAA,0C;MAAA,QAAA,6E;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,kE;IAAW,8D;IAAS,8D;EAFxB,C;;;IAEI,yB;IAAA,sC;EAAA,C;;;IAAW,yB;IAAA,oC;EAAA,C;;;IAAS,yB;IAAA,oC;EAAA,C;;;;;;;IAFxB,qH;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,QAAA,iF;;EAAA,C;;;;IC0BiE,kBrUkCnB,UqUlCmB,EAAgB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CU5F,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,gCAAyC,kB;IACzC,kCAA8B,kB;IAC9B,mCAC+B,kB;IAC/B,wCAA+C,kB;IAC/C,iCAA6C,kB;IAC7C,oCACgC,kB;IAChC,uCAA6C,kB;IAC7C,2CAAsC,kB;IACtC,mCAAqC,kB;IACrC,+BAA4B,kB;IAC5B,+BAAuB,kB;IACvB,iCAAiC,kB;EAtBJ,C;;IAMzB,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,sF;EAAA,C;;IAAA,uFvVxBJ,MuVwBI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FvVzBJ,QuVyBI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FvV1BJ,SuV0BI,C;EAAA,C;;;WAEA,sG;EAAA,C;;IrVNA,sCAAqB,uDAArB,IFtBJ,cEsBiC,WFtBjC,cEsBiC,kB;EqVM7B,C;;;WACA,yF;EAAA,C;;IAAA,0FvV7BJ,QuV6BI,C;EAAA,C;;;WACA,8F;EAAA,C;;IAAA,+FvV9BJ,UuV8BI,C;EAAA,C;;;WAEA,oG;EAAA,C;;IrVVA,qCAAqB,sDAArB,IFtBJ,aEsBiC,WFtBjC,aEsBiC,kB;EqVU7B,C;;;WACA,4G;EAAA,C;;IAAA,6GvVjCJ,iBuViCI,C;EAAA,C;;;WACA,4F;EAAA,C;;IrVZA,iCAAqB,kDAArB,IFtBJ,SEsBiC,WFtBjC,SEsBiC,kB;EqVY7B,C;;;WACA,oF;EAAA,C;;IAAA,qFvVnCJ,KuVmCI,C;EAAA,C;;;WACA,oF;EAAA,C;;IAAA,qFvVpCJ,KuVoCI,C;EAAA,C;;;WACA,wF;EAAA,C;;IrVfA,+BAAqB,gDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EqVe7B,C;;IAE+C,mCAAS,KAAT,C;EAAe,C;;IAIpB,IAAO,I;IAA7C,2CAAsC,cAAO,cAAP,MAAO,CAAP,6B;EAC1C,C;;IACiD,2CAAsC,O;EAAQ,C;;IAE3F,8CAA+B,aAAX,mBAAW,EAAa,KAAb,CAAoB,MAAnD,C;EACJ,C;;;;;;;IC/CJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,4C;IAAA,C;IAEI,8E;IAAW,0E;EAFf,C;;;IAEI,+B;IAAA,4C;EAAA,C;;;IAAW,+B;IAAA,0C;EAAA,C;;;;;;;IAFf,6F;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,iD;MAAA,e;QAAA,+C;MAAA,QAAA,wF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,2C;IAAA,C;IAEI,kE;IAAM,8D;IAAI,gE;EAFd,C;;;IAEI,8B;IAAA,sC;EAAA,C;;;IAAM,8B;IAAA,oC;EAAA,C;;;IAAI,8B;IAAA,qC;EAAA,C;;;;;;;IAFd,sH;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,2C;MAAA,U;QAAA,yC;MAAA,W;QAAA,0C;MAAA,QAAA,uF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,mC;IAAA,C;IAEI,kD;IACA,oE;IACA,0D;IACA,0D;IACA,oD;IACA,8D;IACA,oE;IACA,4E;IACA,4D;EAVJ,C;;;IAEI,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,uC;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;;IACA,sB;IAAA,+B;EAAA,C;;;IACA,sB;IAAA,oC;EAAA,C;;;IACA,sB;IAAA,uC;EAAA,C;;;IACA,sB;IAAA,2C;EAAA,C;;;IACA,sB;IAAA,mC;EAAA,C;;;;;;;IAVJ,wU;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mC;MAAA,qB;QAAA,4C;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,a;QAAA,oC;MAAA,kB;QAAA,yC;MAAA,qB;QAAA,4C;MAAA,yB;QAAA,gD;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,uC;IAAA,C;IAEI,oE;IAAW,gE;IAAS,gE;EAFxB,C;;;IAEI,0B;IAAA,uC;EAAA,C;;;IAAW,0B;IAAA,qC;EAAA,C;;;IAAS,0B;IAAA,qC;EAAA,C;;;;;;;IAFxB,wH;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,4C;MAAA,e;QAAA,0C;MAAA,e;QAAA,0C;MAAA,QAAA,mF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,qC;IAAA,C;IAEI,8D;IAAU,kE;IAAY,gE;EAF1B,C;;;IAEI,wB;IAAA,oC;EAAA,C;;;IAAU,wB;IAAA,sC;EAAA,C;;;IAAY,wB;IAAA,qC;EAAA,C;;;;;;;IAF1B,sH;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,yC;MAAA,kB;QAAA,2C;MAAA,iB;QAAA,0C;MAAA,QAAA,iF;;EAAA,C;;;ICGyC,kBAA7B,gC;IAAmC,KxV6E3C,a;IwV7EE,+BxV8EK,WwV9E2C,SAAhD,C;EAAA,C;;;ICqC6D,evWoBrB,UuWpBqB,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA1E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAgF,KzVwCxF,a;IyVxCE,+BzVyCK,WyVzCwF,SAA7F,C;EAAA,C;;IAGoE,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KzVqC5E,a;IyVrCE,+BzVsCK,WyVtC4E,SAAjF,C;EAAA,C;;ICtBF,qCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAEA,sCAAiC,kB;IACjC,mCAA+B,kB;IAC/B,sCAA8B,kB;IAO9B,4BAAuB,kB;IACvB,yCAAoC,kB;IACpC,oCAA+B,kB;IAC/B,oCAA+B,kB;IAC/B,kCAA2B,kB;IAC3B,+BAAgC,kB;IAChC,mCAA+B,kB;IAC/B,8BAAyB,kB;IACzB,qCAAgC,kB;IAChC,8BAAsB,kB;IACtB,iCAAyB,kB;IACzB,gCAA4B,kB;IAC5B,qCAAgC,kB;IAChC,8BAA4B,kB;IAC5B,+BAAuB,kB;EA7BW,C;;;WAMlC,uG;EAAA,C;;IAAA,wG/VxBJ,Y+VwBI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kG/VzBJ,S+VyBI,C;EAAA,C;;;WACA,uG;EAAA,C;;IAAA,wG/V1BJ,Y+V0BI,C;EAAA,C;;IAEY,OAAyC,UAAN,CAAkB,qBAAlB,C;EAAnC,C;;IACK,qBAAQ,qBAAR,EAA+B,KAA/B,C;EAAsC,C;;IAE3C,OAAyC,UAAN,CAAkB,YAAlB,C;EAAnC,C;;IACK,qBAAQ,YAAR,EAAsB,KAAtB,C;EAA6B,C;;;WAC9C,mF;EAAA,C;;IAAA,oF/VjCJ,E+ViCI,C;EAAA,C;;;WACA,6G;EAAA,C;;IAAA,8G/VlCJ,e+VkCI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oG/VnCJ,U+VmCI,C;EAAA,C;;;WACA,mG;EAAA,C;;IAAA,oG/VpCJ,U+VoCI,C;EAAA,C;;;WACA,+F;EAAA,C;;IAAA,gG/VrCJ,Q+VqCI,C;EAAA,C;;;WACA,yF;EAAA,C;;IAAA,0F/VtCJ,K+VsCI,C;EAAA,C;;;WACA,iG;EAAA,C;;IAAA,kG/VvCJ,S+VuCI,C;EAAA,C;;;WACA,uF;EAAA,C;;IAAA,wF/VxCJ,I+VwCI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sG/VzCJ,W+VyCI,C;EAAA,C;;;WACA,uF;EAAA,C;;IAAA,wF/V1CJ,I+V0CI,C;EAAA,C;;;WACA,6F;EAAA,C;;IAAA,8F/V3CJ,O+V2CI,C;EAAA,C;;;WACA,2F;EAAA,C;;IAAA,4F/V5CJ,M+V4CI,C;EAAA,C;;;WACA,qG;EAAA,C;;IAAA,sG/V7CJ,W+V6CI,C;EAAA,C;;;WACA,uF;EAAA,C;;I7VxBA,4BAAqB,kDAArB,IFtBJ,IEsBiC,WFtBjC,IEsBiC,kB;E6VwB7B,C;;;WACA,yF;EAAA,C;;IAAA,0F/V/CJ,K+V+CI,C;EAAA,C;;IAEkC,yCAAe,CAAf,C;EAAiB,C;;IACjB,yCAAe,CAAf,C;EAAiB,C;;IAChB,yCAAe,CAAf,C;EAAiB,C;;IACpB,yCAAe,CAAf,C;EAAiB,C;;IAChB,yCAAe,CAAE,WAAjB,C;EAA4B,C;;IAEzD,4CAA6B,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAAvD,C;EACJ,C;;IAEI,4CAA6B,aAAX,mBAAW,MAAqB,OAArB,EAAsC,KAAtC,CAA6C,MAA1E,C;EACJ,C;;IAEI,uCAAwB,MAAX,mBAAW,MAAc,KAAd,CAAqB,MAA7C,C;EACJ,C;;IASiB,Q;IhWrEjB,UAAa,E;IgW8DT,YhW7DG,G;IgW+D0B,kBAA7B,UxWLsC,UwWKtC,EAAe,YAAf,C;IAAmC,K1VevC,a;IhB+9CgB,U;IAAA,SgB99CT,W0VhBuC,kB1W8+C9B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;M0W9+C2D,U1W8+C9C,OE9zCmC,I;MwWhLgB,Y1W8+CnD,OEjzCmC,M;MwW5LxD,MAAM,GAAN,IAAa,K;;IAIjB,uCAAa,uDAAb,C;EACJ,C;;IvWkBW,kBAAX,mB;IuWjBiE,K1VQjE,a;I0VR4C,kCvWiB5C,MaRO,WbQmB,UAA1B,CuWjB4C,C;EAA4B,C;;IAEpE,wCAAyB,OAAX,mBAAW,MAAe,KAAf,CAAsB,MAA/C,C;EACJ,C;;IAC0B,0BAAqB,C;EAAE,C;;IACvB,0BAAqB,C;EAAE,C;;IACpB,6BAAwB,C;EAAE,C;;IAC1B,6BAAwB,C;EAAE,C;;IAC5B,kCAAQ,CAAR,C;EAAU,C;;IACV,kCAAQ,CAAR,C;EAAU,C;;IACT,kCAAQ,CAAR,C;EAAU,C;;IACb,kCAAQ,CAAR,C;EAAU,C;;IACT,kCAAQ,CAAE,WAAV,C;EAAqB,C;;;;;;;;IChDkB,ezWwBvB,UyWxBuB,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAA5E,4BAAwB,mBAAxB,EtW2C8B,WsW3C9B,EAAuD,gBAAvD,C;IAAkF,K3V4C1F,a;I2V5CE,+B3V6CK,W2V7C0F,SAA/F,C;EAAA,C;;IAGsE,kBAAhE,4BAAwB,mBAAxB,EtWwC8B,WsWxC9B,EAAuD,OAAvD,C;IAAsE,K3VyC9E,a;I2VzCE,+B3V0CK,W2V1C8E,SAAnF,C;EAAA,C;;IC1BF,kCAAwC,IAAxC,EAA8C,QAA9C,EAAwD,OAAxD,C;IAKA,wCAAoC,kB;IACpC,iCAAoC,kB;EAVJ,C;;IAM5B,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,yG;EAAA,C;;IAAA,0GjWnBJ,ciWmBI,C;EAAA,C;;;WACA,2F;EAAA,C;;I/VEA,+BAAqB,mDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;E+VF7B,C;;;;;;;ICnBJ,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,wD;IACA,8D;IACA,8D;IACA,0D;EALJ,C;;;IAEI,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;;;;;IALJ,kJ;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,QAAA,qF;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IAEI,kE;IAAS,8D;EAFb,C;;;IAEI,2B;IAAA,sC;EAAA,C;;;IAAS,2B;IAAA,oC;EAAA,C;;;;;;;IAFb,iF;EAAA,C;;;IAAA,a;MAAA,e;QAAA,2C;MAAA,a;QAAA,yC;MAAA,QAAA,uF;;EAAA,C;;;;ICmByE,e7WyC3B,U6WzC2B,EAAa,EAAb,C;EAAiB,C;;IAAE,kBAAhF,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,cAA3D,C;IAAsF,K/V6D9F,a;I+V7DE,+B/V8DK,W+V9D8F,SAAnG,C;EAAA,C;;IAG0E,kBAApE,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,OAA3D,C;IAA0E,K/V0DlF,a;I+V1DE,+B/V2DK,W+V3DkF,SAAvF,C;EAAA,C;;ICXF,qB;MtWVA,UAAa,E;MsWUb,QtWTO,G;;IsWUP,wB;IAHA,kB;IAEA,oB;IAGU,qBAAN,YAAM,EAAQ,QAAR,C;EANc,C;;IAUd,QAAN,YAAM,C;EACV,C;;IAEe,kCAAc,WAAd,EAAoB,YAApB,S/WRmD,Y+WQvB,c/WRuB,C+WQnD,E;EAAA,C;;IjXoiRR,kBAAM,eiXjiRD,QjXiiRc,OAAb,C;IA6UA,Q;IAAb,wBiX92RY,QjX82RZ,gB;MAAa,WiX92RD,QjX82RZ,M;mBACI,W;MiX/2RuB,IAAC,MjX+2RE,IiX/2RF,aAAD;QAAM,QjX+2RH,IiX/2RG,a;MjX+2RjB,YAAZ,WAAY,EiX/2R2B,QAAO,KAAP,CjX+2R3B,C;;IiX/2RZ,gCjXg3RG,WiXh3RH,C;EACJ,C;;IhXqwCO,kBAAM,eAAa,wBgXlwCd,QhXkwCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OgXv0CD,QhXu0CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MgXx0CuB,IAAC,MhXw0CE,IgXx0CF,aAAD;QAAM,QhXw0CH,IgXx0CG,a;MhXw0CjB,YAAZ,WAAY,EgXx0C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,ChXw0C3B,C;;IgXx0CZ,gChXy0CG,WgXz0CH,C;EACJ,C;;IjX4hRO,kBAAM,eiXzhRD,QjXyhRc,OAAb,C;IA6UA,Q;IAAb,wBiXt2RY,QjXs2RZ,gB;MAAa,WiXt2RD,QjXs2RZ,M;mBACI,W;MiXv2RuB,IAAC,MjXu2RE,IiXv2RF,aAAD;QAAM,QjXu2RH,IiXv2RG,a;MjXu2RjB,YAAZ,WAAY,EiXv2R2B,QAAO,KAAP,CjXu2R3B,C;;IiXv2RZ,gCjXw2RG,WiXx2RH,C;EACJ,C;;IAW6B,Q;IARzB,IAAI,QAAS,UAAb,C;MACI,M;;ItWpCR,UAAa,E;IsWuCT,iBtWtCG,G;IV6iDS,U;IAAA,SgXrgDZ,QhXqgDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MgXrgDO,IAAC,MhXqgDK,OgXrgDL,aAAD;QAAM,QhXqgDA,OgXrgDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,UAAY,SAAZ,IAAyB,yD;EAC7B,C;;IAEmD,oBAAU,K;EAAM,C;;IACjB,mBAAS,K;EAAM,C;;IAE7D,wBAAyB,OAAX,mBAAW,EAAO,KAAP,CAAc,M;EAC3C,C;;I7WsCW,kBAAX,mB;I6WrC0E,KhW4B1E,a;IgW5BqD,kB7WqCrD,MaRO,WbQmB,UAA1B,C;E6WrCiF,C;;IAIvD,IAAO,I;IAA7B,gCAAsB,cAAO,cAAP,MAAO,CAAP,6B;EAC1B,C;;IACuD,gCAAsB,O;EAAQ,C;;ItWzDrF,UAAa,E;IsW0DsF,KtWxD/F,CADG,GACH,C;IsWwDoE,4BtWzDjE,G;EsWyDmG,C;;;;;;;ICzD9G,e;IAC4B,oC;IAD5B,iB;IAAA,uB;EAC2B,C;;IAD3B,0C;IAAA,C;IAEI,2EAAU,YAAV,C;IACA,+EAAY,cAAZ,C;IACA,qEAAO,QAAP,C;IACA,uEAAQ,UAAR,C;IACA,2EAAU,YAAV,C;IACA,iEAAK,MAAL,C;IACA,yEAAS,WAAT,C;IACA,6EAAW,aAAX,C;IACA,mEAAM,OAAN,C;IACA,qEAAO,SAAP,C;IACA,0EAAS,WAAT,C;IACA,gEAAI,KAAJ,C;EAbJ,C;;;MAC4B,+B;IAAA,C;;;;IACxB,6B;IAAA,0C;EAAA,C;;;IACA,6B;IAAA,4C;EAAA,C;;;IACA,6B;IAAA,uC;EAAA,C;;;IACA,6B;IAAA,wC;EAAA,C;;;IACA,6B;IAAA,0C;EAAA,C;;;IACA,6B;IAAA,qC;EAAA,C;;;IACA,6B;IAAA,yC;EAAA,C;;;IACA,6B;IAAA,2C;EAAA,C;;;IACA,6B;IAAA,sC;EAAA,C;;;IACA,6B;IAAA,uC;EAAA,C;;;IACA,6B;IAAA,yC;EAAA,C;;;IACA,6B;IAAA,oC;EAAA,C;;IAEkC,qB;EAAA,C;;;;;;;IAftC,ye;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,+C;MAAA,mB;QAAA,iD;MAAA,c;QAAA,4C;MAAA,e;QAAA,6C;MAAA,iB;QAAA,+C;MAAA,Y;QAAA,0C;MAAA,gB;QAAA,8C;MAAA,kB;QAAA,gD;MAAA,a;QAAA,2C;MAAA,c;QAAA,4C;MAAA,gB;QAAA,8C;MAAA,W;QAAA,yC;MAAA,QAAA,yF;;EAAA,C;;;ICFA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,sC;IAAA,C;IAEI,4D;IACA,kF;IACA,8D;IACA,0D;IACA,wF;IACA,0F;IACA,sF;IACA,4F;EATJ,C;;;IAEI,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;;;;;IATJ,oW;EAAA,C;;;IAAA,a;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,4B;QAAA,sD;MAAA,6B;QAAA,uD;MAAA,2B;QAAA,qD;MAAA,8B;QAAA,wD;MAAA,QAAA,qF;;EAAA,C;;;ICkCa,gB;IAAD,QAAC,2BAAY,WAAZ,0DAAD,YAA8D,gCAA9D,O;EAAA,C;;IACK,UAAY,WAAZ,IAA2B,uC;EAAkB,C;;;IAMS,kBAA3D,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,C;IAAiE,KnWuCzE,a;ImWvCE,+BnWwCK,WmWxCyE,SAA9E,C;EAAA,C;;ICxBF,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,+BAAmC,kB;IACnC,+BAAmC,kB;IACnC,sCAAkC,kB;IAClC,yCAA6C,kB;IAC7C,gCAA4B,kB;IAC5B,mDAA+C,kB;IAC/C,gCAA4B,kB;IAC5B,mCAA+B,kB;IAC/B,+BAA4B,kB;IAC5B,iCAAuC,kB;EAlByB,C;;IAM5D,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;;WAEA,0F;EAAA,C;;IvWDA,6BAAqB,oDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EuWC7B,C;;;WACA,0F;EAAA,C;;IvWFA,6BAAqB,oDAArB,IFtBJ,KEsBiC,WFtBjC,KEsBiC,kB;EuWE7B,C;;;WACA,wG;EAAA,C;;IAAA,yGzWzBJ,YyWyBI,C;EAAA,C;;;WACA,8G;EAAA,C;;IAAA,+GzW1BJ,eyW0BI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FzW3BJ,MyW2BI,C;EAAA,C;;;WACA,kI;EAAA,C;;IAAA,mIzW5BJ,yByW4BI,C;EAAA,C;;;WACA,4F;EAAA,C;;IAAA,6FzW7BJ,MyW6BI,C;EAAA,C;;;WACA,kG;EAAA,C;;IAAA,mGzW9BJ,SyW8BI,C;EAAA,C;;;WACA,0F;EAAA,C;;IAAA,2FzW/BJ,KyW+BI,C;EAAA,C;;;WACA,8F;EAAA,C;;IvWVA,+BAAqB,sDAArB,IFtBJ,OEsBiC,WFtBjC,OEsBiC,kB;EuWU7B,C;;I1W9BA,UAAa,E;I0WgC2E,K1W9BpF,CADG,GACH,C;I0W8ByD,4C1W/BtD,G0W+BsD,C;EAAkC,C;;;;;;;ICjCnG,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,oE;IAAS,8D;IAAM,kE;IAAQ,gE;IAAO,oE;EAFlC,C;;;IAEI,4B;IAAA,uC;EAAA,C;;;IAAS,4B;IAAA,oC;EAAA,C;;;IAAM,4B;IAAA,sC;EAAA,C;;;IAAQ,4B;IAAA,qC;EAAA,C;;;IAAO,4B;IAAA,uC;EAAA,C;;;;;;;IAFlC,oM;EAAA,C;;;IAAA,a;MAAA,e;QAAA,4C;MAAA,Y;QAAA,yC;MAAA,c;QAAA,2C;MAAA,a;QAAA,0C;MAAA,e;QAAA,4C;MAAA,QAAA,2F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,oE;IAAS,gE;IAAO,oE;IAAS,oE;IAAS,wE;IAAW,4E;IAAa,gF;EAF9D,C;;;IAEI,4B;IAAA,uC;EAAA,C;;;IAAS,4B;IAAA,qC;EAAA,C;;;IAAO,4B;IAAA,uC;EAAA,C;;;IAAS,4B;IAAA,uC;EAAA,C;;;IAAS,4B;IAAA,yC;EAAA,C;;;IAAW,4B;IAAA,2C;EAAA,C;;;IAAa,4B;IAAA,6C;EAAA,C;;;;;;;IAF9D,kS;EAAA,C;;;IAAA,a;MAAA,e;QAAA,4C;MAAA,a;QAAA,0C;MAAA,e;QAAA,4C;MAAA,e;QAAA,4C;MAAA,iB;QAAA,8C;MAAA,mB;QAAA,gD;MAAA,qB;QAAA,kD;MAAA,QAAA,2F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,yC;IAAA,C;IAEI,8D;IACA,sE;IACA,sE;IACA,sE;IACA,sE;IACA,sE;IACA,gE;IACA,0E;IACA,gE;IACA,gE;IACA,qE;IACA,mE;IACA,2D;IACA,2D;IACA,2D;IACA,2D;IACA,2D;IACA,2D;IACA,yE;IACA,yE;IACA,uE;IACA,mE;IACA,yE;IACA,6E;IACA,2E;IACA,+E;IACA,mE;IACA,+E;IACA,yE;IACA,+E;IACA,+E;IACA,mF;IACA,uF;IACA,2F;IACA,2E;IACA,mE;EArCJ,C;;;IAEI,4B;IAAA,oC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,qC;EAAA,C;;;IACA,4B;IAAA,0C;EAAA,C;;;IACA,4B;IAAA,qC;EAAA,C;;;IACA,4B;IAAA,qC;EAAA,C;;;IACA,4B;IAAA,uC;EAAA,C;;;IACA,4B;IAAA,sC;EAAA,C;;;IACA,4B;IAAA,kC;EAAA,C;;;IACA,4B;IAAA,kC;EAAA,C;;;IACA,4B;IAAA,kC;EAAA,C;;;IACA,4B;IAAA,kC;EAAA,C;;;IACA,4B;IAAA,kC;EAAA,C;;;IACA,4B;IAAA,kC;EAAA,C;;;IACA,4B;IAAA,yC;EAAA,C;;;IACA,4B;IAAA,yC;EAAA,C;;;IACA,4B;IAAA,wC;EAAA,C;;;IACA,4B;IAAA,sC;EAAA,C;;;IACA,4B;IAAA,yC;EAAA,C;;;IACA,4B;IAAA,2C;EAAA,C;;;IACA,4B;IAAA,0C;EAAA,C;;;IACA,4B;IAAA,4C;EAAA,C;;;IACA,4B;IAAA,sC;EAAA,C;;;IACA,4B;IAAA,4C;EAAA,C;;;IACA,4B;IAAA,yC;EAAA,C;;;IACA,4B;IAAA,4C;EAAA,C;;;IACA,4B;IAAA,4C;EAAA,C;;;IACA,4B;IAAA,8C;EAAA,C;;;IACA,4B;IAAA,gD;EAAA,C;;;IACA,4B;IAAA,kD;EAAA,C;;;IACA,4B;IAAA,0C;EAAA,C;;;IACA,4B;IAAA,sC;EAAA,C;;;;;;;IArCJ,k6C;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,yC;MAAA,gB;QAAA,6C;MAAA,gB;QAAA,6C;MAAA,gB;QAAA,6C;MAAA,gB;QAAA,6C;MAAA,gB;QAAA,6C;MAAA,a;QAAA,0C;MAAA,kB;QAAA,+C;MAAA,a;QAAA,0C;MAAA,a;QAAA,0C;MAAA,e;QAAA,4C;MAAA,c;QAAA,2C;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,iB;QAAA,8C;MAAA,iB;QAAA,8C;MAAA,gB;QAAA,6C;MAAA,c;QAAA,2C;MAAA,iB;QAAA,8C;MAAA,mB;QAAA,gD;MAAA,kB;QAAA,+C;MAAA,oB;QAAA,iD;MAAA,c;QAAA,2C;MAAA,oB;QAAA,iD;MAAA,iB;QAAA,8C;MAAA,oB;QAAA,iD;MAAA,oB;QAAA,iD;MAAA,sB;QAAA,mD;MAAA,wB;QAAA,qD;MAAA,0B;QAAA,uD;MAAA,kB;QAAA,+C;MAAA,c;QAAA,2C;MAAA,QAAA,2F;;EAAA,C;;;ICAA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,2C;IAAA,C;IAEI,8D;IACA,8D;IACA,8D;IACA,8D;IACA,8D;IACA,8D;IACA,4E;IACA,4E;IACA,oE;IACA,oE;IACA,yE;IACA,uE;IACA,2E;IACA,uE;IACA,yE;IACA,2E;IACA,2E;IACA,2E;IACA,2E;IACA,2E;IACA,qE;IACA,+E;EAvBJ,C;;;IAEI,8B;IAAA,oC;EAAA,C;;;IACA,8B;IAAA,oC;EAAA,C;;;IACA,8B;IAAA,oC;EAAA,C;;;IACA,8B;IAAA,oC;EAAA,C;;;IACA,8B;IAAA,oC;EAAA,C;;;IACA,8B;IAAA,oC;EAAA,C;;;IACA,8B;IAAA,2C;EAAA,C;;;IACA,8B;IAAA,2C;EAAA,C;;;IACA,8B;IAAA,uC;EAAA,C;;;IACA,8B;IAAA,uC;EAAA,C;;;IACA,8B;IAAA,yC;EAAA,C;;;IACA,8B;IAAA,wC;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,wC;EAAA,C;;;IACA,8B;IAAA,yC;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,0C;EAAA,C;;;IACA,8B;IAAA,uC;EAAA,C;;;IACA,8B;IAAA,4C;EAAA,C;;;;;;;IAvBJ,o3B;EAAA,C;;;IAAA,a;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,iB;QAAA,gD;MAAA,iB;QAAA,gD;MAAA,a;QAAA,4C;MAAA,a;QAAA,4C;MAAA,e;QAAA,8C;MAAA,c;QAAA,6C;MAAA,gB;QAAA,+C;MAAA,c;QAAA,6C;MAAA,e;QAAA,8C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,a;QAAA,4C;MAAA,kB;QAAA,iD;MAAA,QAAA,6F;;EAAA,C;;;;ICkD+E,gBvXUjC,UuXViC,EAAc,EAAd,C;EAAkB,C;;IAAE,kBAAvF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA6F,KzW8BrG,a;IyW9BE,+BzW+BK,WyW/BqG,SAA1G,C;EAAA,C;;IAGyE,avXOjC,UuXPiC,EAAW,EAAX,C;EAAe,C;;IAAE,kBAApF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,mBAAjE,C;IzW2BR,WyW1BI,uBzW0BJ,WyW1BI,U;IACA,MzWyBJ,WyWzBI,C;IAFF,+BzW4BK,WyWzBL,SAHA,C;EAAA,C;;IAMiF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,KzWqBzF,a;IyWrBG,+BzWsBI,WyWtByF,SAA7F,C;EAAA,C;;I/W1DH,UAAa,E;IgXMb,8BAA8B,IAA9B,EhXLO,GgXKP,C;EAFqB,C;;IAIe,oBAAU,I;EAAK,C;;IAC7B,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IhXTzD,UAAa,E;IACN,GgXQyE,CAAK,OAAL,S;IhXRzE,GgXQgG,CAAK,MAAL,Q;IAAtC,oBhXR1D,G;EgXQsH,C;;;;;;;;ICQnF,kBAAlC,uBAAmB,aAAnB,C;IAAwC,K3W8DhD,a;I2W9DE,+B3W+DK,W2W/DgD,SAArD,C;EAAA,C;;ICVF,qB;MlXPA,UAAa,E;MkXOb,QlXNO,G;;IkXOP,wB;IAFA,gB;IACA,kB;EAFgD,C;;IAKtC,QAAN,UAAM,C;EACV,C;;IAEe,kCAAc,SAAd,EAAoB,UAApB,S3XDmD,Y2XCvB,c3XDuB,C2XCnD,E;EAAA,C;;;;;;;ICNf,qB;MnXPA,UAAa,E;MmXOb,QnXNO,G;;ImXOP,wB;IAFA,gB;IACA,kB;EAFwC,C;;IAK9B,QAAN,UAAM,C;EACV,C;;IAEe,kCAAc,SAAd,EAAoB,UAApB,S5XDmD,Y4XCvB,c5XDuB,C4XCnD,E;EAAA,C;;;;;;;ICDf,uBAAe,OAAf,C;IAHA,0B;IpXTA,UAAa,E;IoXab,kBpXZO,G;IoXsCP,iCAAyB,e;IACzB,mCAA8B,e;IAE9B,gCAA4B,e;IAC5B,+BAA2B,e;IAC3B,8BAA0B,e;IAC1B,sCAA2D,e;IAGjD,qBAAN,UAAM,EAAQ,QAAR,C;EAxC8D,C;;I/XgjRjE,kBAAM,e+XxiRD,Q/XwiRc,OAAb,C;IA6UA,Q;IAAb,wB+Xr3RY,Q/Xq3RZ,gB;MAAa,W+Xr3RD,Q/Xq3RZ,M;mBACI,W;M+Xt3RuB,IAAC,M/Xs3RE,I+Xt3RF,aAAD;QAAM,Q/Xs3RH,I+Xt3RG,a;M/Xs3RjB,YAAZ,WAAY,E+Xt3R2B,QAAO,KAAP,C/Xs3R3B,C;;I+Xt3RZ,gC/Xu3RG,W+Xv3RH,C;EACJ,C;;I9X4wCO,kBAAM,eAAa,wB8XzwCd,Q9XywCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,O8X90CD,Q9X80CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;M8X/0CuB,IAAC,M9X+0CE,I8X/0CF,aAAD;QAAM,Q9X+0CH,I8X/0CG,a;M9X+0CjB,YAAZ,WAAY,E8X/0C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,C9X+0C3B,C;;I8X/0CZ,gC9Xg1CG,W8Xh1CH,C;EACJ,C;;I/XmiRO,kBAAM,e+XhiRD,Q/XgiRc,OAAb,C;IA6UA,Q;IAAb,wB+X72RY,Q/X62RZ,gB;MAAa,W+X72RD,Q/X62RZ,M;mBACI,W;M+X92RuB,IAAC,M/X82RE,I+X92RF,aAAD;QAAM,Q/X82RH,I+X92RG,a;M/X82RjB,YAAZ,WAAY,E+X92R2B,QAAO,KAAP,C/X82R3B,C;;I+X92RZ,gC/X+2RG,W+X/2RH,C;EACJ,C;;IAWc,Q;IARV,IAAI,QAAS,UAAb,C;MACI,M;;IpX7BR,UAAa,E;IoXgCT,iBpX/BG,G;IV6iDS,U;IAAA,S8X5gDZ,Q9X4gDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;M8X5gDO,IAAC,M9X4gDK,O8X5gDL,aAAD;QAAM,Q9X4gDA,O8X5gDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,oCAAU,yDAAV,C;EACJ,C;;;WAEA,+F;EAAA,C;;IAAA,gGnXzCJ,OmXyCI,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;MAA8E,gBAAT,sB;MjYmnBxE,sB;;QAyXS,U;QAAhB,uD;UAAgB,cAAhB,iB;UAAsB,IiY5+BiF,OjY4+BnE,OiY5+BwE,WAAL,SjY4+BjF,C;YAAwB,qBAAO,O;YAAP,uB;;;QAC9C,qBAAO,I;;;MiY7+BG,SjYmnBV,kB;;;MiYnnBU,a;IAAA,a;EAAA,C;;IAGE,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;;IANJ,4C;MAAA,2B;;IAAA,qC;EAAA,C;;IASA,6C;EAAA,C;;IAEe,kBAAD,M;IAAA,U;IAAA,KAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,U;MAA8E,gBAAT,sB;MjY0mBxE,sB;;QAyXS,U;QAAhB,uD;UAAgB,cAAhB,iB;UAAsB,IiYn+BiF,OjYm+BnE,OiYn+BwE,WAAL,SjYm+BjF,C;YAAwB,qBAAO,O;YAAP,uB;;;QAC9C,qBAAO,I;;;MiYp+BG,SjY0mBV,kB;;;MiY1mBU,a;IAAA,e;IAAA,mB;MACK,MAAM,iC;;IADX,a;EAAA,C;;;;;;;;IAFd,oD;MAAA,mC;;IAAA,6C;EAAA,C;;;;ICzDQ,mB;IAAyB,kBAAb,gB;IAAmB,KjXqEnC,a;IdmHA,iB+XxLQ,S/XwLR,EclHO,WdkHP,C;I+XvLI,OAAO,S;EACX,C;;;;;;;IAKA,mB;MAAA,M/XoDwD,oB;;I+XrDxD,4B;IACA,wB;EAFwB,C;;;MACxB,2B;IAAA,C;;;;MACA,yB;IAAA,C;;;IAEkB,Q;IvXnBlB,UAAa,E;IwXiJG,U;IAAA,SD7HZ,Q/XySgF,QAAQ,W;IgY5K5F,OAAgB,gBAAhB,C;MAAgB,2B;MD7HG,UC6HU,OhY+FmC,I;M+X5NxC,YC6HK,OhY4GmC,M;MQ5PzD,GuXmB2B,CAAK,GAAL,IAAkB,cAAN,KAAM,C;;IADlC,4BvXlBX,GuXkBW,0B;EAAA,C;;;;;;;IAMV,Q;IvXzBR,UAAa,E;IV8iDG,U;IAAA,SiYphDZ,ejYohDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MiYnhDyB,kBAAb,gB;MjYmhDC,OiYnhDqB,MjXoDlD,a;MN9EO,GuX0BC,CjYmhDqB,OiYnhDb,SAAR,I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,OAAR,CAAoB,QAAS,aAA7B,CAA9B,C;EAHJ,C;;IAMM,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;;IATJ,sC;MAAA,qB;;IAAA,+B;EAAA,C;;IrYtCI,UAAa,E;IwXiJG,Q;IAAA,Oa9FhB,sB7Y0QoF,QAAQ,W;IgY5K5F,OAAgB,cAAhB,C;MAAgB,yB;Ma9FQ,Ub8FK,OhY+FmC,I;M6Y7LnC,Yb8FA,OhY4GmC,M;M6YzM5D,IAAI,gCAAJ,C;QrYnDG,GqYoDC,CAAK,GAAL,IAAkB,UAAN,KAAM,C;;;QrYpDnB,GqYsDC,CAAK,GAAL,IAAY,K;;;IALsB,OrYjDnC,G;EqYiDmC,C;;IAkBlB,4B;MAAE,gBAAgB,SAAhB,EAAsB,iBAAS,WAAT,CAAtB,C;MAAqC,W;IAAvC,C;EAAA,C;;IAJf,Q;I/Y8+CO,U;IAAA,S+Y9+CU,OAAtB,YAAK,uDAAL,CAAsB,C/Y8+CV,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;M+Y7+CF,0B;MAAA,kB/Y6+Ce,O+Y7+Cf,C;MACF,+B;QAAa,gBAAW,uB;QAAX,YAA+B,0B/Y4+C3B,O+Y5+C2B,qC;Q7YgIxD,sBF42C6B,OE52C7B,EAAS,KAAT,C;;Y6Y/HY,4B;QAAa,kBAAW,uB;QAAX,cAA+B,kC/Y2+C3B,O+Y3+C2B,wB;Q7Y+HxD,wBF42C6B,OE52C7B,EAAS,OAAT,C;;;Q6YnIE,UAKkB,gB/Y0+CS,O+Y1+CT,EAAI,+C/Y0+CK,O+Y1+CL,CAAJ,C;;IALlB,iB;EAAA,C;;;;WCzDN,yD;EAAA,C;;IAAA,0DrYRA,OqYQA,C;EAAA,C;;;;WACA,yD;EAAA,C;;IAAA,0DrYTA,OqYSA,C;EAAA,C;;;;WCkBA,yD;EAAA,C;;;;WACA,qD;EAAA,C;;;;WCFA,6D;EAAA,C;;IAAA,8DvY1BA,SuY0BA,C;EAAA,C;;;;WACA,yD;EAAA,C;;IAAA,0DvY3BA,OuY2BA,C;EAAA,C;;IAKe,Q;IAFX,mBAA8B,MAAX,UAAW,C;IAEnB,U;IAAA,8C;MAAA,a;;M5YnB4C,YAAa,Q4YmBxC,E5YnBwC,C;MAIvD,U;MAAA,SAAA,KAAM,OAAN,GAAa,CAAb,I;MAAb,aAAU,CAAV,mB;QACI,MAAM,CAAN,I4Yc8B,oBAAW,K;;MAAlC,SAAyC,O5YZ7C,K4YY6C,C;;IAAU,wB;IlZywCvD,kBAAa,eAAa,qCAAwB,EAAxB,CAAb,C;IAgCP,oB;IADb,YAAY,C;IACC,+B;IAAb,OAAa,gBAAb,C;MAAa,wB;MkZxyCT,U;MlZyyCA,WAAY,WkZzyCZ,iClZyyC0B,oBAAmB,gBAAnB,EAAmB,wBAAnB,YkZzyC1B,sBlZyyCuD,IAA3C,C;;IkZ1yChB,uBlZ2yCO,WkZ3yCP,C;EAGJ,C;;IAEuF,Q;IAAA,U;IAAA,2C;MAAA,a;;MxYnCnF,UAAa,E;MwYmCsE,SxYlC5E,G;;IwYkCyG,wB;IAAM,KlY4CtH,a;IkY5CoE,wBlY6C7D,W;EkY7CsH,C;;IACzD,Q;IAAA,U;IAAA,sC;MAAA,a;;MxYpCpE,UAAa,E;MwYoCuD,SxYnC7D,G;;IwYmCqF,wB;IAAM,KlY2ClG,a;IkY3C0D,mBlY4CnD,W;EkY5CkG,C;;IAClC,Q;IAAA,U;IAAA,uC;MAAA,a;;MxYrCvE,UAAa,E;MwYqC0D,SxYpChE,G;;IwYoCyF,wB;IAAM,KlY0CtG,a;IkY1C4D,oBlY2CrD,W;EkY3CsG,C;;IAC7B,Q;IAAA,U;IAAA,0C;MAAA,a;;MxYtChF,UAAa,E;MwYsCmE,SxYrCzE,G;;IwYqCqG,wB;IAAM,KlYyClH,a;IkYzCkE,uBlY0C3D,W;EkY1CkH,C;;IACxD,Q;IAAA,U;IAAA,qC;MAAA,a;;MxYvCjE,UAAa,E;MwYuCoD,SxYtC1D,G;;IwYsCiF,wB;IAAM,KlYwC9F,a;IkYxCwD,kBlYyCjD,W;EkYzC8F,C;;IAClB,Q;IAAA,U;IAAA,2C;MAAA,a;;MxYxCnF,UAAa,E;MwYwCsE,SxYvC5E,G;;IwYuCyG,wB;IAAM,KlYuCtH,a;IkYvCoE,wBlYwC7D,W;EkYxCsH,C;;IACzD,Q;IAAA,U;IAAA,sC;MAAA,a;;MxYzCpE,UAAa,E;MwYyCuD,SxYxC7D,G;;IwYwCqF,wB;IAAM,KlYsClG,a;IkYtC0D,mBlYuCnD,W;EkYvCkG,C;;ICnCzG,qB;MzYNA,UAAa,E;MyYMb,QzYLO,G;;Iy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DrZPA,IqZOA,C;EAAA,C;;;;WACA,mD;EAAA,C;;IAAA,oDrZRA,IqZQA,C;EAAA,C;;;;WACA,mE;EAAA,C;;IAAA,oErZTA,YqZSA,C;EAAA,C;;ICaa,gB;IAAD,QAAC,2BAAY,MAAZ,0DAAD,YAAoD,2BAApD,O;EAAA,C;;IACK,UAAY,MAAZ,IAA4B,SAAN,KAAM,C;EAAW,C;;;;WAExD,yD;EAAA,C;;IAAA,0DtZzBA,OsZyBA,C;EAAA,C;;IAGY,wB;MACG,Q;MAAP,iBAA0D,CAAnD,oCAAY,iBAAZ,qCAAmD,EAAO,KAAM,WAAb,CAA1D,C;IADI,C;EAAA,C;;IAI6B,wB;MAC7B,Q;MAAA,qDAAc,UAAM,KAAN,CAAd,0C;IAD6B,C;EAAA,C;;IAJ7B,8C;EAAA,C;;IAIJ,UAAY,iBAAZ,IAAiC,iC;EAGrC,C;;IAEyE,Q;IAAA,U;IAAA,sC;MAAA,a;;MvZnCzE,UAAa,E;MuZmC4D,SvZlClE,G;;IuZkC0F,wB;IAAM,KjZ4CvG,a;IiZ5C+D,mBjZ6CxD,W;EiZ7CuG,C;;IACnC,Q;IAAA,U;IAAA,uC;MAAA,a;;MvZpC3E,UAAa,E;MuZoC8D,SvZnCpE,G;;IuZmC6F,wB;IAAM,KjZ2C1G,a;IiZ3CgE,oBjZ4CzD,W;EiZ5C0G,C;;IAClC,Q;IAAA,U;IAAA,yC;MAAA,a;;MvZrC/E,UAAa,E;MuZqCkE,SvZpCxE,G;;IuZoCmG,wB;IAAM,KjZ0ChH,a;IiZ1CkE,sBjZ2C3D,W;EiZ3CgH,C;;IAChD,Q;IAAA,U;IAAA,qC;MAAA,a;;MvZtCvE,UAAa,E;MuZsC0D,SvZrChE,G;;IuZqCuF,wB;IAAM,KjZyCpG,a;IiZzC8D,kBjZ0CvD,W;EiZ1CoG,C;;IACxC,Q;IAAA,U;IAAA,oC;MAAA,a;;MvZvCnE,UAAa,E;MuZuCsD,SvZtC5D,G;;IuZsCkF,wB;IAAM,KjZwC/F,a;IiZxC2D,iBjZyCpD,W;EiZzC+F,C;;IACrC,Q;IAAA,U;IAAA,oC;MAAA,a;;MvZxCjE,UAAa,E;MuZwCoD,SvZvC1D,G;;IuZuCgF,wB;IAAM,KjZuC7F,a;IiZvCyD,iBjZwClD,W;EiZxC6F,C;;IAC7B,Q;IAAA,U;IAAA,sC;MAAA,a;;MvZzCvE,UAAa,E;MuZyC0D,SvZxChE,G;;IuZwCwF,wB;IAAM,KjZsCrG,a;IiZtC6D,mBjZuCtD,W;EiZvCqG,C;;IACzB,Q;IAAA,U;IAAA,0C;MAAA,a;;MvZ1CnF,UAAa,E;MuZ0CsE,SvZzC5E,G;;IuZyCwG,wB;IAAM,KjZqCrH,a;IiZrCqE,uBjZsC9D,W;EiZtCqH,C;;;;WCtChI,uD;EAAA,C;;IAAA,wDvZNA,MuZMA,C;EAAA,C;;;;WACA,qD;EAAA,C;;IAAA,sDvZPA,KuZOA,C;EAAA,C;;;;WACA,mE;EAAA,C;;IAAA,oEvZRA,YuZQA,C;EAAA,C;;;;WACA,2D;EAAA,C;;IAAA,4DvZTA,QuZSA,C;EAAA,C;;;;WACA,2D;EAAA,C;;IAAA,4DvZVA,QuZUA,C;EAAA,C;;;;WACA,+E;EAAA,C;;IAAA,gFvZXA,kBuZWA,C;EAAA,C;;;;WCLA,yD;EAAA,C;;IAAA,0DxZNA,SwZMA,C;EAAA,C;;;;WACA,qD;EAAA,C;;IAAA,sDxZPA,KwZOA,C;EAAA,C;;;;WCDA,yD;EAAA,C;;IAAA,0DzZNA,OyZMA,C;EAAA,C;;;;WACA,6D;EAAA,C;;IAAA,8DzZPA,SyZOA,C;EAAA,C;;;;WACA,yD;EAAA,C;;IAAA,0DzZRA,OyZQA,C;EAAA,C;;;;WACA,mD;EAAA,C;;IAAA,oDzZTA,IyZSA,C;EAAA,C;;;;;ICGA,uC;EAAA,C;;IAEsB,Q;IAAd,cAAc,sBAAQ,OAAR,CAAoB,QAAS,aAA7B,sB;Ita4iRX,kBAAM,esa1iRF,Ota0iRe,OAAb,C;IA6UA,U;gBAAb,4Bsav3RW,Otau3RX,kB;MAAa,Wsav3RF,Otau3RX,Q;mBACI,W;MAAgB,oB;;Qsav3RZ,IAAI,Otau3RkB,Isav3RlB,EAAU,MAAV,CAAJ,C;UACI,mBAAW,oBAAW,K;UAAtB,qB;;QAGS,gBAAb,gB;QCoiCQ,U;QAAA,S/Z5iCwB,W8ZS5B,mB9ZT4B,C8ZSE,iBtak3RZ,Isal3RY,CCmiC1B,W;QAAhB,OAAgB,gBAAhB,C;UAAgB,2B;UDliCA,eAA6B,MCkiChB,ODliCU,MAAM,GAAM,GA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AA,sC;MAAA,a;;MjalBvE,UAAa,E;MiakB0D,SjajBhE,G;;IiaiBwF,wB;IAAM,K3Z6DrG,a;I2Z7D6D,mB3Z8DtD,W;E2Z9DqG,C;;IAC/B,Q;IAAA,U;IAAA,wC;MAAA,a;;MjanB7E,UAAa,E;MiamBgE,SjalBtE,G;;IiakBgG,wB;IAAM,K3Z4D7G,a;I2Z5DiE,qB3Z6D1D,W;E2Z7D6G,C;;;;WCXxH,uD;EAAA,C;;;;WACA,qE;EAAA,C;;;;WACA,yE;EAAA,C;;;;WACA,uE;EAAA,C;;;;WCJA,2D;EAAA,C;;;;WACA,2D;EAAA,C;;;;WACA,iD;EAAA,C;;;;WACA,iE;EAAA,C;;;;WACA,2D;EAAA,C;;;;WACA,iE;EAAA,C;;IAOU,UACA,MADA,EAEA,M;IANN,0BAAa,KAAM,WAAnB,C;IACA,wBAAiB,eAAN,KAAM,CAAjB,C;IACA,0BAAmB,eAAN,KAAM,CAAnB,C;IACA,qBAAc,UAAN,KAAM,CAAd,C;IACA,KAAM,yBAAN,KAAM,CAAN,U;MAA2B,kC;;IAC3B,KAAM,wBAAN,KAAM,CAAN,U;MAAwB,0BAAgB,cAAhB,C;;IACxB,KAAM,2BAAN,KAAM,CAAN,U;MAA2B,oC;;EAC/B,C;;;;WCbA,2D;EAAA,C;;IAAA,4DnaXA,QmaWA,C;EAAA,C;;;;WACA,yE;EAAA,C;;IAAA,0EnaZA,emaYA,C;EAAA,C;;;;WACA,6E;EAAA,C;;IAAA,8EnabA,iBmaaA,C;EAAA,C;;;;WACA,2E;EAAA,C;;IAAA,4EnadA,gBmacA,C;EAAA,C;;ICM2E,Q;IAAA,U;IAAA,kC;MAAA,a;;MralBvE,UAAa,E;MqakB0D,SrajBhE,G;;IqaiBoF,wB;IAAM,K/Z6DjG,a;I+Z7DiE,e/Z8D1D,W;E+Z9DiG,C;;IACjC,Q;IAAA,U;IAAA,kC;MAAA,a;;MranBvE,UAAa,E;MqamB0D,SralBhE,G;;IqakBoF,wB;IAAM,K/Z4DjG,a;I+Z5DiE,e/Z6D1D,W;E+Z7DiG,C;;IACjC,Q;IAAA,U;IAAA,kC;MAAA,a;;MrapBvE,UAAa,E;MqaoB0D,SranBhE,G;;IqamBoF,wB;IAAM,K/Z2DjG,a;I+Z3DiE,e/Z4D1D,W;E+Z5DiG,C;;IACjC,Q;IAAA,U;IAAA,kC;MAAA,a;;MrarBvE,UAAa,E;MqaqB0D,SrapBhE,G;;IqaoBoF,wB;IAAM,K/Z0DjG,a;I+Z1DiE,e/Z2D1D,W;E+Z3DiG,C;;IACjC,Q;IAAA,U;IAAA,kC;MAAA,a;;MratBvE,UAAa,E;MqasB0D,SrarBhE,G;;IqaqBoF,wB;IAAM,K/ZyDjG,a;I+ZzDiE,e/Z0D1D,W;E+Z1DiG,C;;IACjC,Q;IAAA,U;IAAA,kC;MAAA,a;;MravBvE,UAAa,E;MqauB0D,SratBhE,G;;IqasBoF,wB;IAAM,K/ZwDjG,a;I+ZxDiE,e/ZyD1D,W;E+ZzDiG,C;;IACnB,Q;IAAA,U;IAAA,yC;MAAA,a;;MraxBrF,UAAa,E;MqawBwE,SravB9E,G;;IqauByG,wB;IAAM,K/ZuDtH,a;I+ZvDwE,sB/ZwDjE,W;E+ZxDsH,C;;IACxC,Q;IAAA,U;IAAA,yC;MAAA,a;;MrazBrF,UAAa,E;MqayBwE,SraxB9E,G;;IqawByG,wB;IAAM,K/ZsDtH,a;I+ZtDwE,sB/ZuDjE,W;E+ZvDsH,C;;IAChD,Q;IAAA,U;IAAA,qC;MAAA,a;;Mra1B7E,UAAa,E;Mqa0BgE,SrazBtE,G;;IqayB6F,wB;IAAM,K/ZqD1G,a;I+ZrDoE,kB/ZsD7D,W;E+ZtD0G,C;;IACpC,Q;IAAA,U;IAAA,qC;MAAA,a;;Mra3B7E,UAAa,E;Mqa2BgE,Sra1BtE,G;;Iqa0B6F,wB;IAAM,K/ZoD1G,a;I+ZpDoE,kB/ZqD7D,W;E+ZrD0G,C;;IAChC,Q;IAAA,U;IAAA,uC;MAAA,a;;Mra5BjF,UAAa,E;Mqa4BoE,Sra3B1E,G;;Iqa2BmG,wB;IAAM,K/ZmDhH,a;I+ZnDsE,oB/ZoD/D,W;E+ZpDgH,C;;IACxC,Q;IAAA,U;IAAA,sC;MAAA,a;;Mra7B/E,UAAa,E;Mqa6BkE,Sra5BxE,G;;Iqa4BgG,wB;IAAM,K/ZkD7G,a;I+ZlDqE,mB/ZmD9D,W;E+ZnD6G,C;;IACjC,Q;IAAA,U;IAAA,wC;MAAA,a;;Mra9BnF,UAAa,E;Mqa8BsE,Sra7B5E,G;;Iqa6BsG,wB;IAAM,K/ZiDnH,a;I+ZjDuE,qB/ZkDhE,W;E+ZlDmH,C;;;;WClB9H,2D;EAAA,C;;IAAA,4DradA,QqacA,C;EAAA,C;;;;WACA,+D;EAAA,C;;IAAA,gErafA,UqaeA,C;EAAA,C;;;;WACA,qD;EAAA,C;;IAAA,sDrahBA,KqagBA,C;EAAA,C;;;;WACA,qE;EAAA,C;;IAAA,sErajBA,aqaiBA,C;EAAA,C;;;;WACA,+D;EAAA,C;;IAAA,gEralBA,UqakBA,C;EAAA,C;;;;WACA,qE;EAAA,C;;IAAA,sEranBA,aqamBA,C;EAAA,C;;Ixa6DyC,4B;MAAE,0BAAO,aAAP,C;MAAc,W;IAAhB,C;EAAA,C;;IAA5B,wB;MAAc,qBAAc,8CAAd,C;IAAd,C;EAAA,C;;;Iya7DL,wB;MAA0C,gBAArB,kBAAc,KAAd,C;MAA2B,gBja8DpD,W;Mia9DyB,Oja+DlB,Sia/DuD,Y;IAA1D,C;EAAA,C;;IAJJ,yB;MAAA,YAAqB,K;IAGR,Q;IAAA,uB;IvahBb,UAAa,E;IACN,GuaiBE,CAAK,WAAL,a;IAFT,aAAa,4BACT,gCADS,EvafN,GuaeM,EAGL,OAAN,KAAM,CAHK,8B;IAKb,OAAO,iCAAO,OAAP,C;EACX,C;;IAQI,wB;MAA0C,gBAArB,kBAAc,KAAd,C;MAA2B,gBjaiDhD,W;MiajDqB,OjakDd,SialDmD,Y;IAA1D,C;EAAA,C;;IAHA,yB;MAAA,YAAqB,K;IAEV,Q;IAAA,uB;Iva7BX,UAAa,E;IACN,Gua8BF,CAAK,WAAL,a;IAFM,oBACX,kCADW,Eva5BJ,Gua4BI,C;IzaiDF,U;IAAT,SAAS,wCya9CY,Mza8CZ,gC;IACT,iBya/CQ,W;IAHG,mCzamDJ,EyanDI,8B;EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBlaboC,gCAAa,Q;oBMKb,gCAAa,Q;sBGNT,kCAAe,Q;mBGQrB,+BAAY,Q;8BKPU,0CAAuB,Q;oCEIX,gDAA6B,Q;oBEA7D,gCAAa,Q;wBOOL,oCAAiB,Q;yBIdf,gDAAkB,Q;kBEEhC,8BAAW,Q;4BEFS,wCAAqB,Q;yBEF3B,qCAAkB,Q;yBGElB,qCAAkB,Q;wBEUpB,oCAAiB,Q;uBGNnB,mCAAgB,Q;sBGJlB,kCAAe,Q;kBIYvB,8BAAW,Q;8BKPa,0CAAuB,Q;+BKJrB,2CAAwB,Q;oBIK1C,qC;sBAGA,kCAAe,Q;yBEXT,qCAAkB,Q;oBEU5B,gCAAa,Q;2BKTA,uCAAoB,Q;2BGFnB,uCAAoB,Q;+BEGZ,2CAAwB,Q;yBEDpC,qCAAkB,Q;qBEM1B,iCAAc,Q;oBIOhB,gCAAa,Q;4BMHG,wCAAqB,Q;mCGbP,+CAA4B,Q;mCEC7B,+CAA4B,Q;mCGS3B,+CAA4B,Q;iBIDhE,6BAAU,Q;kBERR,8BAAW,Q;yBGEG,qCAAkB,Q;yBKQlB,qCAAkB,Q;8BIAR,0CAAuB,Q;uBGRrC,mCAAgB,Q;4BKSN,wCAAqB,Q;uBGF/B,mCAAgB,Q;kBQS1B,8BAAW,Q;sBEVH,kCAAe,Q;0BGFN,sCAAmB,Q;6BKDb,yCAAsB,Q;kBED7C,8BAAW,Q;oBISP,gCAAa,Q;kBKPjB,8BAAW,Q;wBGDC,oCAAiB,Q;mBGH3B,+BAAY,Q;4BKMM,wCAAqB,Q;uBIkB/B,mCAAgB,Q;wBKjBd,oCAAiB,Q;4BMJT,wCAAqB,Q;kBIEzC,8BAAW,Q;kBGCX,8BAAW,Q;sBKSH,kCAAe,Q;4BGjBH,wCAAqB,Q;0BEAzB,sCAAmB,Q;qCEAG,iDAA8B,Q;0BGQpD,sCAAmB,Q;2BIAjB,uCAAoB,Q;kBGDtC,8BAAW,Q;sBGFH,kCAAe,Q;sBEDf,kCAAe,Q;2BISL,uCAAoB,Q;mBGKpC,+BAAY,Q;0BIfE,sCAAmB,Q;mBEAjC,+BAAY,Q;2BGDI,uCAAoB,Q;mBGIpC,+BAAY,Q;qBMyCR,iCAAc,Q;oBGrChB,gCAAa,Q;oBEPb,gCAAa,Q;mBIDf,+BAAY,Q;wBECF,oCAAiB,Q;qBEJvB,iCAAc,Q;oBIkBhB,gCAAa,Q;mBIbf,+BAAY,Q;sBKyBN,kCAAe,Q;6BGtBD,yCAAsB,Q;kBIG5C,8BAAW,Q;wBGEC,oCAAiB,Q;2BGLX,uCAAoB,Q;yBGI3B,qCAAkB,Q;sBGLrB,kCAAe,Q;uBGQb,mCAAgB,Q;qBGJpB,iCAAc,Q;gBKA3B,2B;qBAGa,iCAAc,Q;6BEFE,yCAAsB,Q;oBITxC,gCAAa,Q;iBIUnB,6BAAU,Q;mBGPN,+BAAY,Q;uBEFJ,mCAAgB,Q;uBOShB,mCAAgB,Q;yBETZ,qCAAkB,Q;uBEApB,mCAAgB,Q;6BGuBN,yCAAsB,Q;sBGnBpC,kCAAe,Q;4BGCH,wCAAqB,Q;kBSkBzC,8BAAW,Q;wBEJA,mCAAiB,Q;qBIjBtB,iCAAc,Q;qBIsBd,iCAAc,Q;wBMSR,oCAAiB,Q;kBEhC7B,8BAAW,Q;OURjB,8C;SACE,8C;YAQU,qD;SAIV,8C;UAIC,8C;SGZK,sC;WACE,sC;cAwBU,6C;WAOV,sC;YAQC,sC;mBG1CU,+CAAqB,Q;YGJpD,oC;cACG,qC;cEAK,4B;cACG,6B;cCkBL,uC;YACK,qC;gBCFG,+B;cACK,6B;8BEhBkB,iDAAuB,Q;UCL1D,mC;UACA,mC;cGgBH,mC;UCjBG,mC;SACD,mC;SACA,mC;iBACQ,mC;WEHR,mC;UACD,mC;iBACO,mC;aACJ,mC;aACA,mC;uBACU,mC;cCLP,mC;YACF,mC;YCDJ,mC;cACE,mC;YACF,mC;SACH,mC;UCHa,2B;YACA,2B;YEDA,2B;WACD,2B;WACA,2B;mBACQ,2B;cCgBV,2B;aCnBE,2B;YACD,2B;mBACO,2B;eACJ,2B;eACA,2B;yBACU,2B;cCLP,2B;YACF,2B;cCDJ,2B;gBACE,2B;cACF,2B;WACH,2B;wBCFY,+B;iBACP,e;wBAE/B,+I;cELsB,oC;YACF,oC;WACD,oC;UACD,oC;WCC0B,+C;gBEHd,4B;cACF,4B;aACD,4B;YACD,4B;aCG0B,uC;aCFnB,6C;oBACE,wC;sBACE,wC;qBACD,wC;eCJG,6C;eACH,wC;UACV,mC;kBACmB,qC;eACH,qC;kBACC,mC;eCHF,qC;sBACE,gC;wBACE,gC;uBACD,gC;eEAG,qC;iBACH,gC;YACV,2B;oBACkB,qC;iBACH,qC;oBACC,mC;eCTU,2CAAiB,Q;;;;"}