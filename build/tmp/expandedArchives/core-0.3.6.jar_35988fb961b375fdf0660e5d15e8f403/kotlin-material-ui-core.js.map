{"version":3,"file":"kotlin-material-ui-core.js","sources":["generated/_Arrays.kt","generated/_Collections.kt","kotlin/collections.kt","collections/Maps.kt","../../../src/main/kotlin/react/RBuilder.kt","util/Preconditions.kt","collections/Collections.kt","arrayUtils.kt","text/regex/RegexExtensions.kt","../../../src/main/kotlin/react/ReactComponent.kt","../../../../../core/src/main/kotlin/materialui/components/MaterialElementBuilder.kt","../../../src/main/kotlin/kotlinext/js/Helpers.kt","../../../../../core/src/main/kotlin/materialui/components/MaterialStyle.kt","../../../../../core/src/main/kotlin/materialui/components/StandardProps.kt","../../../../../core/src/main/kotlin/materialui/components/appbar/AppBarElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/appbar/appBar.kt","util/Standard.kt","../../../../../core/src/main/kotlin/materialui/components/appbar/enums/AppBarColor.kt","../../../../../core/src/main/kotlin/materialui/components/appbar/enums/AppBarPosition.kt","../../../../../core/src/main/kotlin/materialui/components/appbar/enums/AppBarStyle.kt","../../../../../core/src/main/kotlin/materialui/components/avatar/AvatarElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/avatar/avatar.kt","../../../../../core/src/main/kotlin/materialui/components/avatar/enum/AvatarStyle.kt","../../../../../core/src/main/kotlin/materialui/components/backdrop/BackdropElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/backdrop/backdrop.kt","../../../../../core/src/main/kotlin/materialui/components/backdrop/enum/BackdropStyle.kt","../../../../../core/src/main/kotlin/materialui/components/badge/BadgeElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/badge/badge.kt","../../../../../core/src/main/kotlin/materialui/components/badge/enums/BadgeColor.kt","../../../../../core/src/main/kotlin/materialui/components/badge/enums/BadgeStyle.kt","../../../../../core/src/main/kotlin/materialui/components/badge/enums/BadgeVariant.kt","../../../../../core/src/main/kotlin/materialui/components/bottomnavigation/BottomNavigationElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/bottomnavigation/bottomNavigation.kt","../../../../../core/src/main/kotlin/materialui/components/bottomnavigationaction/BottomNavigationActionElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/bottomnavigationaction/bottomNavigationAction.kt","../../../../../core/src/main/kotlin/materialui/components/button/ButtonElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/button/button.kt","../../../../../core/src/main/kotlin/materialui/components/button/enums/ButtonColor.kt","../../../../../core/src/main/kotlin/materialui/components/button/enums/ButtonSize.kt","../../../../../core/src/main/kotlin/materialui/components/button/enums/ButtonStyle.kt","../../../../../core/src/main/kotlin/materialui/components/button/enums/ButtonVariant.kt","../../../../../core/src/main/kotlin/materialui/components/buttonbase/ButtonBaseElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/buttonbase/TouchRippleElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/buttonbase/buttonBase.kt","../../../../../core/src/main/kotlin/materialui/components/buttonbase/enums/ButtonBaseStyle.kt","../../../../../core/src/main/kotlin/materialui/components/buttonbase/enums/ButtonStyle.kt","../../../../../core/src/main/kotlin/materialui/components/buttonbase/enums/TouchRippleStyle.kt","../../../../../core/src/main/kotlin/materialui/components/buttonbase/touchRipple.kt","../../../../../core/src/main/kotlin/materialui/components/buttongroup/ButtonGroupElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/buttongroup/buttongroup.kt","../../../../../core/src/main/kotlin/materialui/components/buttongroup/enums/ButtonGroupOrientation.kt","../../../../../core/src/main/kotlin/materialui/components/buttongroup/enums/ButtonGroupStyle.kt","../../../../../core/src/main/kotlin/materialui/components/card/CardElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/card/card.kt","../../../../../core/src/main/kotlin/materialui/components/cardactionarea/CardActionAreaElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/cardactionarea/cardActionArea.kt","../../../../../core/src/main/kotlin/materialui/components/cardactions/CardActionsElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/cardactions/cardActions.kt","../../../../../core/src/main/kotlin/materialui/components/cardactions/enums/CardActionsStyle.kt","../../../../../core/src/main/kotlin/materialui/components/cardcontent/CardContentElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/cardcontent/cardContent.kt","../../../../../core/src/main/kotlin/materialui/components/cardheader/CardHeaderElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/cardheader/cardHeader.kt","../../../../../core/src/main/kotlin/materialui/components/cardheader/enums/CardHeaderStyle.kt","../../../../../core/src/main/kotlin/materialui/components/cardmedia/CardMediaElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/cardmedia/cardmedia.kt","../../../../../core/src/main/kotlin/materialui/components/cardmedia/enums/CardMediaStyle.kt","../../../../../core/src/main/kotlin/materialui/components/checkbox/CheckboxElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/checkbox/checkbox.kt","../../../../../core/src/main/kotlin/materialui/components/checkbox/enums/CheckboxColor.kt","../../../../../core/src/main/kotlin/materialui/components/checkbox/enums/CheckboxStyle.kt","../../../../../core/src/main/kotlin/materialui/components/chip/ChipElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/chip/chip.kt","../../../../../core/src/main/kotlin/materialui/components/chip/enums/ChipColor.kt","../../../../../core/src/main/kotlin/materialui/components/chip/enums/ChipStyle.kt","../../../../../core/src/main/kotlin/materialui/components/chip/enums/ChipVariant.kt","../../../../../core/src/main/kotlin/materialui/components/circularprogress/CircularProgressElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/circularprogress/circularprogress.kt","../../../../../core/src/main/kotlin/materialui/components/circularprogress/enums/CircularProgressColor.kt","../../../../../core/src/main/kotlin/materialui/components/circularprogress/enums/CircularProgressStyle.kt","../../../../../core/src/main/kotlin/materialui/components/circularprogress/enums/CircularProgressVariant.kt","../../../../../core/src/main/kotlin/materialui/components/clickawaylistener/ClickAwayListenerBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/clickawaylistener/clickAwayListener.kt","../../../../../core/src/main/kotlin/materialui/components/clickawaylistener/enums/ClickAwayMouseEvent.kt","../../../../../core/src/main/kotlin/materialui/components/clickawaylistener/enums/ClickAwayTouchEvent.kt","../../../../../core/src/main/kotlin/materialui/components/collapse/CollapseElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/collapse/collapse.kt","../../../../../core/src/main/kotlin/materialui/components/collapse/enums/CollapseStyle.kt","../../../../../core/src/main/kotlin/materialui/components/cssbaseline/cssBaseline.kt","../../../../../core/src/main/kotlin/materialui/components/dialog/DialogElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/dialog/dialog.kt","../../../../../core/src/main/kotlin/materialui/components/dialog/enums/DialogMaxWidth.kt","../../../../../core/src/main/kotlin/materialui/components/dialog/enums/DialogScroll.kt","../../../../../core/src/main/kotlin/materialui/components/dialog/enums/DialogStyle.kt","../../../../../core/src/main/kotlin/materialui/components/dialogactions/DialogActionsElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/dialogactions/dialogActions.kt","../../../../../core/src/main/kotlin/materialui/components/dialogactions/enums/DialogActionsStyle.kt","../../../../../core/src/main/kotlin/materialui/components/dialogcontent/DialogContentElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/dialogcontent/dialogContent.kt","../../../../../core/src/main/kotlin/materialui/components/dialogcontenttext/DialogContentTextElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/dialogcontenttext/dialogContentText.kt","../../../../../core/src/main/kotlin/materialui/components/dialogtitle/DialogTitleElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/dialogtitle/dialogTitle.kt","../../../../../core/src/main/kotlin/materialui/components/divider/DividerElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/divider/divider.kt","../../../../../core/src/main/kotlin/materialui/components/divider/enums/DividerStyle.kt","../../../../../core/src/main/kotlin/materialui/components/divider/enums/DividerVariant.kt","../../../../../core/src/main/kotlin/materialui/components/drawer/DrawerElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/drawer/drawer.kt","../../../../../core/src/main/kotlin/materialui/components/drawer/enums/DrawerAnchor.kt","../../../../../core/src/main/kotlin/materialui/components/drawer/enums/DrawerStyle.kt","../../../../../core/src/main/kotlin/materialui/components/drawer/enums/DrawerVariant.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanel/ExpansionPanelElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanel/enums/ExpansionPanelStyle.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanel/expansionPanel.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanelactions/ExpansionPanelActionsElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanelactions/enums/ExpansionPanelActionsStyle.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanelactions/expansionPanelActions.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpaneldetails/ExpansionPanelDetailsElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpaneldetails/expansionPanelDetails.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanelsummary/ExpansionPanelSummaryElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanelsummary/enums/ExpansionPanelSummaryStyle.kt","../../../../../core/src/main/kotlin/materialui/components/expansionpanelsummary/expansionPanelSummary.kt","../../../../../core/src/main/kotlin/materialui/components/fab/FabElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/fab/enums/FabStyle.kt","../../../../../core/src/main/kotlin/materialui/components/fab/enums/FabVariant.kt","../../../../../core/src/main/kotlin/materialui/components/fab/fab.kt","../../../../../core/src/main/kotlin/materialui/components/fade/FadeElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/fade/fade.kt","../../../../../core/src/main/kotlin/materialui/components/filledinput/FilledInputElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/filledinput/enums/FilledInputStyle.kt","../../../../../core/src/main/kotlin/materialui/components/filledinput/filledInput.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrol/FormControlElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrol/enums/FormControlMargin.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrol/enums/FormControlStyle.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrol/enums/FormControlVariant.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrol/formControl.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrollabel/FormControlLabelElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrollabel/enums/FormControlLabelPlacement.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrollabel/enums/FormControlLabelStyle.kt","../../../../../core/src/main/kotlin/materialui/components/formcontrollabel/formControlLabel.kt","../../../../../core/src/main/kotlin/materialui/components/formgroup/FormGroupElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/formgroup/enums/FormGroupStyle.kt","../../../../../core/src/main/kotlin/materialui/components/formgroup/formGroup.kt","../../../../../core/src/main/kotlin/materialui/components/formhelpertext/FormHelperTextElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/formhelpertext/enums/FormHelperTextMargin.kt","../../../../../core/src/main/kotlin/materialui/components/formhelpertext/enums/FormHelperTextStyle.kt","../../../../../core/src/main/kotlin/materialui/components/formhelpertext/enums/FormHelperTextVariant.kt","../../../../../core/src/main/kotlin/materialui/components/formhelpertext/formHelperText.kt","../../../../../core/src/main/kotlin/materialui/components/formlabel/FormLabelElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/formlabel/enums/FormLabelStyle.kt","../../../../../core/src/main/kotlin/materialui/components/formlabel/formLabel.kt","../../../../../core/src/main/kotlin/materialui/components/grid/GridElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/grid/enums/GridAlignContent.kt","../../../../../core/src/main/kotlin/materialui/components/grid/enums/GridAlignItems.kt","../../../../../core/src/main/kotlin/materialui/components/grid/enums/GridDirection.kt","../../../../../core/src/main/kotlin/materialui/components/grid/enums/GridJustify.kt","../../../../../core/src/main/kotlin/materialui/components/grid/enums/GridStyle.kt","../../../../../core/src/main/kotlin/materialui/components/grid/enums/GridWrap.kt","../../../../../core/src/main/kotlin/materialui/components/grid/grid.kt","../../../../../core/src/main/kotlin/materialui/components/gridlist/GridListElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/gridlist/gridList.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttile/GridListTileElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttile/enums/GridListTitleStyle.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttile/gridListTile.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttilebar/GridListTileBarElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttilebar/enums/GridListTileBarActionPosition.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttilebar/enums/GridListTileBarTitlePosition.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttilebar/enums/GridListTitleBarStyle.kt","../../../../../core/src/main/kotlin/materialui/components/gridlisttilebar/gridListTileBar.kt","../../../../../core/src/main/kotlin/materialui/components/grow/GrowElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/grow/grow.kt","../../../../../core/src/main/kotlin/materialui/components/hidden/HiddenElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/hidden/enums/HiddenImplementation.kt","../../../../../core/src/main/kotlin/materialui/components/hidden/enums/HiddenWidth.kt","../../../../../core/src/main/kotlin/materialui/components/hidden/hidden.kt","../../../../../core/src/main/kotlin/materialui/components/icon/IconElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/icon/enums/IconColor.kt","../../../../../core/src/main/kotlin/materialui/components/icon/enums/IconFontSize.kt","../../../../../core/src/main/kotlin/materialui/components/icon/enums/IconStyle.kt","../../../../../core/src/main/kotlin/materialui/components/icon/icon.kt","../../../../../core/src/main/kotlin/materialui/components/iconbutton/IconButtonElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/iconbutton/enums/IconButtonStyle.kt","../../../../../core/src/main/kotlin/materialui/components/iconbutton/iconButton.kt","../../../../../core/src/main/kotlin/materialui/components/input/InputElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/input/enums/InputStyle.kt","../../../../../core/src/main/kotlin/materialui/components/input/input.kt","../../../../../core/src/main/kotlin/materialui/components/inputadornment/InputAdornmentElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/inputadornment/enums/InputAdornmentPosition.kt","../../../../../core/src/main/kotlin/materialui/components/inputadornment/enums/InputAdornmentStyle.kt","../../../../../core/src/main/kotlin/materialui/components/inputadornment/enums/InputAdornmentVariant.kt","../../../../../core/src/main/kotlin/materialui/components/inputadornment/inputAdornment.kt","../../../../../core/src/main/kotlin/materialui/components/inputbase/InputBaseElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/inputbase/enums/InputBaseStyle.kt","../../../../../core/src/main/kotlin/materialui/components/inputbase/enums/InputMargin.kt","../../../../../core/src/main/kotlin/materialui/components/inputbase/inputBase.kt","../../../../../core/src/main/kotlin/materialui/components/inputlabel/InputLabelElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/inputlabel/enums/InputLabelMargin.kt","../../../../../core/src/main/kotlin/materialui/components/inputlabel/enums/InputLabelStyle.kt","../../../../../core/src/main/kotlin/materialui/components/inputlabel/enums/InputLabelVariant.kt","../../../../../core/src/main/kotlin/materialui/components/inputlabel/inputLabel.kt","../../../../../core/src/main/kotlin/materialui/components/internal/SwitchBaseElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/linearprogress/LinearProgressElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/linearprogress/enums/LinearProgressColor.kt","../../../../../core/src/main/kotlin/materialui/components/linearprogress/enums/LinearProgressStyle.kt","../../../../../core/src/main/kotlin/materialui/components/linearprogress/enums/LinearProgressVariant.kt","../../../../../core/src/main/kotlin/materialui/components/linearprogress/linearProgress.kt","../../../../../core/src/main/kotlin/materialui/components/link/LinkElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/link/enums/LinkStyle.kt","../../../../../core/src/main/kotlin/materialui/components/link/enums/LinkUnderline.kt","../../../../../core/src/main/kotlin/materialui/components/link/link.kt","../../../../../core/src/main/kotlin/materialui/components/list/ListElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/list/enums/ListStyle.kt","../../../../../core/src/main/kotlin/materialui/components/list/list.kt","../../../../../core/src/main/kotlin/materialui/components/listitem/ButtonListItemElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/listitem/ListItemElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/listitem/enums/ListItemAlignItem.kt","../../../../../core/src/main/kotlin/materialui/components/listitem/enums/ListItemStyle.kt","../../../../../core/src/main/kotlin/materialui/components/listitem/listItem.kt","../../../../../core/src/main/kotlin/materialui/components/listitemavatar/ListItemAvatarElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/listitemavatar/enums/ListItemAvaterStyle.kt","../../../../../core/src/main/kotlin/materialui/components/listitemavatar/listItemAvatar.kt","../../../../../core/src/main/kotlin/materialui/components/listitemicon/ListItemIconElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/listitemicon/listItemIcon.kt","../../../../../core/src/main/kotlin/materialui/components/listitemsecondaryaction/ListItemSecondaryActionElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/listitemsecondaryaction/listItemSecondaryAction.kt","../../../../../core/src/main/kotlin/materialui/components/listitemtext/ListItemTextElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/listitemtext/enums/ListItemTextStyle.kt","../../../../../core/src/main/kotlin/materialui/components/listitemtext/listItemText.kt","../../../../../core/src/main/kotlin/materialui/components/listsubheader/ListSubheaderElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/listsubheader/enums/ListSubheaderColor.kt","../../../../../core/src/main/kotlin/materialui/components/listsubheader/enums/ListSubheaderStyle.kt","../../../../../core/src/main/kotlin/materialui/components/listsubheader/listSubheader.kt","../../../../../core/src/main/kotlin/materialui/components/menu/MenuElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/menu/enums/MenuStyle.kt","../../../../../core/src/main/kotlin/materialui/components/menu/menu.kt","../../../../../core/src/main/kotlin/materialui/components/menuitem/MenuItemElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/menuitem/enums/MenuItemStyle.kt","../../../../../core/src/main/kotlin/materialui/components/menuitem/menuItem.kt","../../../../../core/src/main/kotlin/materialui/components/menulist/MenuListElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/menulist/menuList.kt","../../../../../core/src/main/kotlin/materialui/components/mobilestepper/MobileStepperElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/mobilestepper/enums/MobileStepperPosition.kt","../../../../../core/src/main/kotlin/materialui/components/mobilestepper/enums/MobileStepperVariant.kt","../../../../../core/src/main/kotlin/materialui/components/mobilestepper/mobileStepper.kt","../../../../../core/src/main/kotlin/materialui/components/modal/ModalElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/modal/enums/ModalStyle.kt","../../../../../core/src/main/kotlin/materialui/components/modal/modal.kt","../../../../../core/src/main/kotlin/materialui/components/nativeselect/NativeSelectElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/nativeselect/enums/NativeSelectStyle.kt","../../../../../core/src/main/kotlin/materialui/components/nativeselect/enums/NativeSelectVariant.kt","../../../../../core/src/main/kotlin/materialui/components/nativeselect/nativeSelect.kt","../../../../../core/src/main/kotlin/materialui/components/nossr/NoSsrElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/nossr/noSsr.kt","../../../../../core/src/main/kotlin/materialui/components/outlinedinput/OutlinedInputElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/outlinedinput/enums/OutlinedInputStyle.kt","../../../../../core/src/main/kotlin/materialui/components/outlinedinput/outlinedInput.kt","../../../../../core/src/main/kotlin/materialui/components/paper/PaperElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/paper/enums/PaperStyle.kt","../../../../../core/src/main/kotlin/materialui/components/paper/paper.kt","../../../../../core/src/main/kotlin/materialui/components/popover/PopoverElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/popover/enums/PopoverOriginHorizontal.kt","../../../../../core/src/main/kotlin/materialui/components/popover/enums/PopoverOriginVertical.kt","../../../../../core/src/main/kotlin/materialui/components/popover/enums/PopoverReference.kt","../../../../../core/src/main/kotlin/materialui/components/popover/enums/PopoverStyle.kt","../../../../../core/src/main/kotlin/materialui/components/popover/popover.kt","../../../../../core/src/main/kotlin/materialui/components/popper/PopperElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/popper/enums/PopperPlacement.kt","../../../../../core/src/main/kotlin/materialui/components/popper/popper.kt","../../../../../core/src/main/kotlin/materialui/components/portal/PortalElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/portal/portal.kt","../../../../../core/src/main/kotlin/materialui/components/radio/RadioElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/radio/enums/RadioColor.kt","../../../../../core/src/main/kotlin/materialui/components/radio/enums/RadioStyle.kt","../../../../../core/src/main/kotlin/materialui/components/radio/radio.kt","../../../../../core/src/main/kotlin/materialui/components/radiogroup/RadioGroupElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/radiogroup/radioGroup.kt","../../../../../core/src/main/kotlin/materialui/components/rootref/RootRefElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/rootref/rootRef.kt","../../../../../core/src/main/kotlin/materialui/components/select/SelectElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/select/enums/SelectStyle.kt","../../../../../core/src/main/kotlin/materialui/components/select/enums/SelectVariant.kt","../../../../../core/src/main/kotlin/materialui/components/select/select.kt","../../../../../core/src/main/kotlin/materialui/components/slide/SlideElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/reacttransiton/RTransitionProps.kt","../../../../../core/src/main/kotlin/materialui/components/slide/enums/SlideDirection.kt","../../../../../core/src/main/kotlin/materialui/components/slide/slide.kt","../../../../../core/src/main/kotlin/materialui/components/snackbar/SnackbarElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/snackbar/enums/SnackbarOriginHorizontal.kt","../../../../../core/src/main/kotlin/materialui/components/snackbar/enums/SnackbarOriginVertical.kt","../../../../../core/src/main/kotlin/materialui/components/snackbar/enums/SnackbarStyle.kt","../../../../../core/src/main/kotlin/materialui/components/snackbar/snackbar.kt","../../../../../core/src/main/kotlin/materialui/components/snackbarcontent/SnackbarContentElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/snackbarcontent/enums/SnackbarContentStyle.kt","../../../../../core/src/main/kotlin/materialui/components/snackbarcontent/snackbarContent.kt","../../../../../core/src/main/kotlin/materialui/components/step/StepElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/step/enums/StepOrientation.kt","../../../../../core/src/main/kotlin/materialui/components/step/enums/StepStyle.kt","../../../../../core/src/main/kotlin/materialui/components/step/step.kt","../../../../../core/src/main/kotlin/materialui/components/stepbutton/StepButtonElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/stepbutton/enums/StepButtonStyle.kt","../../../../../core/src/main/kotlin/materialui/components/stepbutton/stepButton.kt","../../../../../core/src/main/kotlin/materialui/components/stepconnector/StepConnectorElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/stepconnector/enums/StepConnectorStyle.kt","../../../../../core/src/main/kotlin/materialui/components/stepconnector/stepConnector.kt","../../../../../core/src/main/kotlin/materialui/components/stepcontent/StepContentElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/stepcontent/enums/StepContentStyle.kt","../../../../../core/src/main/kotlin/materialui/components/stepcontent/stepContent.kt","../../../../../core/src/main/kotlin/materialui/components/stepicon/StepIconElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/stepicon/enums/StepIconStyle.kt","../../../../../core/src/main/kotlin/materialui/components/stepicon/stepIcon.kt","../../../../../core/src/main/kotlin/materialui/components/steplabel/StepLabelElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/steplabel/enums/StepLabelStyle.kt","../../../../../core/src/main/kotlin/materialui/components/steplabel/stepLabel.kt","../../../../../core/src/main/kotlin/materialui/components/stepper/StepperElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/stepper/enums/StepperStyle.kt","../../../../../core/src/main/kotlin/materialui/components/stepper/stepper.kt","../../../../../core/src/main/kotlin/materialui/components/svgicon/SvgIconElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/svgicon/enums/SvgIconColor.kt","../../../../../core/src/main/kotlin/materialui/components/svgicon/enums/SvgIconFontSize.kt","../../../../../core/src/main/kotlin/materialui/components/svgicon/enums/SvgIconStyle.kt","../../../../../core/src/main/kotlin/materialui/components/svgicon/svgIcon.kt","../../../../../core/src/main/kotlin/materialui/components/swipeabledrawer/SwipeableDrawerElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/swipeabledrawer/swipeableDrawer.kt","../../../../../core/src/main/kotlin/materialui/components/switches/SwitchElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/switches/enums/SwitchColor.kt","../../../../../core/src/main/kotlin/materialui/components/switches/enums/SwitchStyle.kt","../../../../../core/src/main/kotlin/materialui/components/switches/switch.kt","../../../../../core/src/main/kotlin/materialui/components/tab/TabElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tab/enums/TabStyle.kt","../../../../../core/src/main/kotlin/materialui/components/tab/enums/TabTextColor.kt","../../../../../core/src/main/kotlin/materialui/components/tab/tab.kt","../../../../../core/src/main/kotlin/materialui/components/table/TableElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/table/enums/TablePadding.kt","../../../../../core/src/main/kotlin/materialui/components/table/table.kt","../../../../../core/src/main/kotlin/materialui/components/tablebody/TableBodyElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tablebody/tableBody.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/TableCellElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/enums/TableCellAlign.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/enums/TableCellPadding.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/enums/TableCellSize.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/enums/TableCellSortDirection.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/enums/TableCellStyle.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/enums/TableCellVariant.kt","../../../../../core/src/main/kotlin/materialui/components/tablecell/tableCell.kt","../../../../../core/src/main/kotlin/materialui/components/tablefooter/TableFooterElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tablefooter/tableFooter.kt","../../../../../core/src/main/kotlin/materialui/components/tablehead/TableHeadElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tablehead/tableHead.kt","../../../../../core/src/main/kotlin/materialui/components/tablepagination/TablePaginationElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tablepagination/enums/TablePaginationStyle.kt","../../../../../core/src/main/kotlin/materialui/components/tablepagination/tablePagination.kt","../../../../../core/src/main/kotlin/materialui/components/tablerow/TableRowElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tablerow/enums/TableRowStyle.kt","../../../../../core/src/main/kotlin/materialui/components/tablerow/tableRow.kt","../../../../../core/src/main/kotlin/materialui/components/tablesortlabel/TableSortLabelElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tablesortlabel/enums/TableSortLabelDirection.kt","../../../../../core/src/main/kotlin/materialui/components/tablesortlabel/tableSortLabel.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/TabIndicatorElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/TabsElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/enums/TabsIndicatorColor.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/enums/TabsScrollButtons.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/enums/TabsStyle.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/enums/TabsTextColor.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/enums/TabsVariant.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/tabIndicator.kt","../../../../../core/src/main/kotlin/materialui/components/tabs/tabs.kt","../../../../../core/src/main/kotlin/materialui/components/textfield/TextFieldElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/textfield/textField.kt","../../../../../core/src/main/kotlin/materialui/components/toolbar/ToolbarElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/toolbar/enums/ToolbarStyle.kt","../../../../../core/src/main/kotlin/materialui/components/toolbar/enums/ToolbarVariant.kt","../../../../../core/src/main/kotlin/materialui/components/toolbar/toolbar.kt","../../../../../core/src/main/kotlin/materialui/components/tooltip/TooltipElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/tooltip/enums/TooltipPlacement.kt","../../../../../core/src/main/kotlin/materialui/components/tooltip/enums/TooltipStyle.kt","../../../../../core/src/main/kotlin/materialui/components/tooltip/tooltip.kt","../../../../../core/src/main/kotlin/materialui/components/typography/TypographyElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/typography/enums/TypographyAlign.kt","../../../../../core/src/main/kotlin/materialui/components/typography/enums/TypographyColor.kt","../../../../../core/src/main/kotlin/materialui/components/typography/enums/TypographyDisplay.kt","../../../../../core/src/main/kotlin/materialui/components/typography/enums/TypographyStyle.kt","../../../../../core/src/main/kotlin/materialui/components/typography/enums/TypographyVariant.kt","../../../../../core/src/main/kotlin/materialui/components/typography/typography.kt","../../../../../core/src/main/kotlin/materialui/components/zoom/ZoomElementBuilder.kt","../../../../../core/src/main/kotlin/materialui/components/zoom/zoom.kt","../../../../../core/src/main/kotlin/materialui/reacteventlistener/REventListenerBuilder.kt","../../../../../core/src/main/kotlin/materialui/reacttransiton/RTransitionBuilder.kt","../../../../../core/src/main/kotlin/materialui/reacttransiton/RTransitionGroupBuilder.kt","../../../../../core/src/main/kotlin/materialui/reacttransiton/RTransitionGroupProps.kt","../../../../../core/src/main/kotlin/materialui/styles/CssPropertiesDelegate.kt","../../../../../core/src/main/kotlin/materialui/styles/StylesBuilder.kt","generated/_Maps.kt","../../../../../core/src/main/kotlin/materialui/styles/breakpoint/Breakpoint.kt","../../../../../core/src/main/kotlin/materialui/styles/breakpoint/BreakpointValues.kt","../../../../../core/src/main/kotlin/materialui/styles/breakpoint/Breakpoints.kt","../../../../../core/src/main/kotlin/materialui/styles/breakpoint/BreakpointsDelegate.kt","../../../../../core/src/main/kotlin/materialui/styles/breakpoint/options/BreakpointValuesOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/breakpoint/options/BreakpointsOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/createBreakpoints.kt","../../../../../core/src/main/kotlin/materialui/styles/createMixins.kt","../../../../../core/src/main/kotlin/materialui/styles/createMuiTheme.kt","../../../../../core/src/main/kotlin/materialui/styles/createPalette.kt","../../../../../core/src/main/kotlin/materialui/styles/createTypography.kt","../../../../../core/src/main/kotlin/materialui/styles/makeStyles.kt","../../../../../core/src/main/kotlin/materialui/styles/mixins/Mixins.kt","../../../../../core/src/main/kotlin/materialui/styles/mixins/MixinsDelegate.kt","../../../../../core/src/main/kotlin/materialui/styles/mixins/options/MixinsOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/muitheme/MuiTheme.kt","../../../../../core/src/main/kotlin/materialui/styles/muitheme/options/MuiThemeOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/CommonColors.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/GreyColors.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/GreyType.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/Palette.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/PaletteColor.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/PaletteType.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/TypeAction.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/TypeBackground.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/TypeText.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/options/CommonColorsOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/options/GreyColorsOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/options/PaletteColorOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/options/PaletteOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/options/TypeActionOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/options/TypeBackgroundOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/palette/options/TypeTextOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/shadow/ShadowDelegate.kt","generated/_Sequences.kt","../../../../../core/src/main/kotlin/materialui/styles/themeprovider/ThemeProviderBuilder.kt","../../../../../core/src/main/kotlin/materialui/styles/themeprovider/themeProvider.kt","../../../../../core/src/main/kotlin/materialui/styles/transitions/Easing.kt","../../../../../core/src/main/kotlin/materialui/styles/transitions/Transitions.kt","../../../../../core/src/main/kotlin/materialui/styles/transitions/TransitionsDelegate.kt","../../../../../core/src/main/kotlin/materialui/styles/transitions/options/EasingOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/transitions/options/TransitionsOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/typography/FontStyle.kt","../../../../../core/src/main/kotlin/materialui/styles/typography/TypographyStyle.kt","../../../../../core/src/main/kotlin/materialui/styles/typography/options/FontStyleOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/typography/options/TypographyOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/typography/options/TypographyStyleOptions.kt","../../../../../core/src/main/kotlin/materialui/styles/withStyles.kt"],"sourcesContent":["/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal actual fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","package react\n\nimport kotlinext.js.*\nimport kotlin.reflect.*\n\n@DslMarker\nannotation class ReactDsl\n\n@ReactDsl\nopen class RBuilder {\n    val childList = mutableListOf<Any>()\n\n    fun child(element: ReactElement): ReactElement {\n        childList.add(element)\n        return element\n    }\n\n    operator fun String.unaryPlus() {\n        childList.add(this)\n    }\n\n    fun <P : RProps> child(type: Any, props: P, children: List<Any>) =\n        child(createElement(type, props, *children.toTypedArray()))\n\n    fun <P : RProps> child(type: Any, props: P, handler: RHandler<P>): ReactElement {\n        val children = with(RElementBuilder(props)) {\n            handler()\n            childList\n        }\n        return child(type, props, children)\n    }\n\n    operator fun <P : RProps> RClass<P>.invoke(handler: RHandler<P>) =\n        child(this, jsObject {}, handler)\n\n    operator fun <T> RProvider<T>.invoke(value: T, handler: RHandler<RProviderProps<T>>) =\n        child(this, jsObject { this.value = value }, handler)\n\n    operator fun <T> RConsumer<T>.invoke(handler: RBuilder.(T) -> Unit) =\n        child(this, jsObject<RConsumerProps<T>> {\n            this.children = { value ->\n                buildElements { handler(value) }\n            }\n        }) {}\n\n    fun <P : RProps> RClass<P>.node(\n        props: P,\n        children: List<Any> = emptyList()\n    ) = child(this, clone(props), children)\n\n    fun <P : RProps, C : Component<P, *>> child(klazz: KClass<C>, handler: RHandler<P>): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass(handler)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> child(noinline handler: RHandler<P>) =\n        child(C::class, handler)\n\n    fun <P : RProps, C : Component<P, *>> node(\n        klazz: KClass<C>,\n        props: P,\n        children: List<Any> = emptyList()\n    ): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass.node(props, children)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> node(props: P, children: List<Any> = emptyList()) =\n        node(C::class, props, children)\n\n    fun RProps.children() {\n        childList.addAll(Children.toArray(children))\n    }\n}\n\nopen class RBuilderMultiple : RBuilder() {\n}\n\nfun buildElements(handler: RBuilder.() -> Unit): dynamic {\n    val nodes = RBuilder().apply(handler).childList\n    return when {\n        nodes.size == 0 -> null\n        nodes.size == 1 -> nodes.first()\n        else -> createElement(Fragment, js {}, *nodes.toTypedArray())\n    }\n}\n\nopen class RBuilderSingle : RBuilder() {\n}\n\ninline fun buildElement(handler: RBuilder.() -> Unit): ReactElement? =\n    RBuilder().apply(handler).childList.first() as ReactElement?\n\nopen class RElementBuilder<out P : RProps>(open val attrs: P) : RBuilder() {\n    fun attrs(handler: P.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = attrs.key\n        set(value) {\n            attrs.key = value\n        }\n\n    var ref: RRef\n        get() = attrs.ref\n        set(value) {\n            attrs.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        attrs.ref(handler)\n    }\n}\n\ntypealias RHandler<P> = RElementBuilder<P>.() -> Unit\n\nfun <P : RProps> forwardRef(handler: RBuilder.(RProps, RRef) -> Unit): RClass<P> {\n    return rawForwardRef { props, ref ->\n        buildElements { handler(props, ref) }\n    }\n}\n\ntypealias FunctionalComponent<P> = (props: P) -> dynamic\n\n/**\n * Get functional component from [func]\n */\nfun <P : RProps> functionalComponent(\n    func: RBuilder.(props: P) -> Unit\n): FunctionalComponent<P> {\n    return { props: P ->\n        buildElements {\n            func(props)\n        }\n    }\n}\n\n/**\n * Append functional component [functionalComponent] as child of current builder\n */\nfun <P : RProps> RBuilder.child(\n    functionalComponent: FunctionalComponent<P>,\n    props: P = jsObject {},\n    handler: RHandler<P> = {}\n): ReactElement {\n    return child(functionalComponent, props, handler)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","package react\n\nimport kotlinext.js.*\n\n// Props\nexternal interface RProps\n\nval RProps.children: Any get() = asDynamic().children\nvar RProps.key: String\n    get() = error(\"key cannot be read from props\")\n    set(value) {\n        asDynamic().key = value\n    }\n\nvar RProps.ref: RRef\n    get() = error(\"ref cannot be read from props\")\n    set(value) {\n        asDynamic().ref = value\n    }\n\nfun <T> RProps.ref(ref: (T?) -> Unit) {\n    asDynamic().ref = ref\n}\n\n// State\nexternal interface RState\n\nclass BoxedState<T>(var state: T) : RState\n\n// Error info\nexternal interface RErrorInfo\n\nval RErrorInfo.componentStack: Any get() = asDynamic().componentStack\n\n// TODO: Should extend RComponentClassStatics, but has problems with generic params\nexternal interface RClass<in P : RProps> : RComponentClassStatics<RProps, RState, RContext<Any>?>\n\nexternal interface RComponentClassStatics<P : RProps, S : RState, C : RContext<Any>?> {\n    var displayName: String?\n\n    var defaultProps: P?\n\n    var contextType: C\n\n    var getDerivedStateFromProps: ((P, S) -> S?)?\n\n    var getDerivedStateFromError: ((Throwable) -> S?)?\n}\n\nexternal interface RProviderProps<T> : RProps {\n    var value: T\n}\n\nexternal interface RProvider<T> : RClass<RProviderProps<T>>\n\nexternal interface RConsumerProps<T> : RProps {\n    var children: (T) -> Any\n}\n\nexternal interface RConsumer<T> : RClass<RConsumerProps<T>>\n\n// Context (16.3+)\nexternal interface RContext<T> {\n    val Provider: RProvider<T>\n    val Consumer: RConsumer<T>\n}\n\n// Refs (16.3+)\nexternal interface RRef\n\nexternal interface RReadableRef<out T> : RRef {\n    val current: T?\n}\n\nfun <S : RState> Component<*, S>.setState(buildState: S.() -> Unit) =\n    setState({ assign(it, buildState) })\n\ninline fun <P : RProps> rFunction(\n    displayName: String,\n    crossinline render: RBuilder.(P) -> Unit\n): RClass<P> {\n    val fn = { props: P -> buildElements { render(props) } } as RClass<P>\n    fn.displayName = displayName\n    return fn\n}\n\nabstract class RComponent<P : RProps, S : RState> : Component<P, S> {\n    constructor() : super() {\n        state = jsObject { init() }\n    }\n\n    constructor(props: P) : super(props) {\n        state = jsObject { init(props) }\n    }\n\n    open fun S.init() {}\n\n    // if you use this method, don't forget to pass props to the constructor first\n    open fun S.init(props: P) {}\n\n    fun RBuilder.children() {\n        props.children()\n    }\n\n    abstract fun RBuilder.render()\n\n    override fun render() = buildElements { render() }\n}\n\nabstract class RPureComponent<P : RProps, S : RState> : PureComponent<P, S> {\n    constructor() : super() {\n        state = jsObject { init() }\n    }\n\n    constructor(props: P) : super(props) {\n        state = jsObject { init(props) }\n    }\n\n    open fun S.init() {}\n\n    // if you use this method, don't forget to pass props to the constructor first\n    open fun S.init(props: P) {}\n\n    fun RBuilder.children() {\n        props.children()\n    }\n\n    abstract fun RBuilder.render()\n\n    override fun render() = buildElements { render() }\n}\n",null,"package kotlinext.js\n\ninline fun <T : Any> jsObject(builder: T.() -> Unit): T {\n    val obj: T = js(\"({})\")\n    return obj.apply {\n        builder()\n    }\n}\n\ninline fun js(builder: dynamic.() -> Unit): dynamic = jsObject(builder)\n\nfun <T : Any> clone(obj: T) = Object.assign(jsObject<T> {}, obj)\n\ninline fun <T : Any> assign(obj: T, builder: T.() -> Unit) = clone(obj).apply(builder)\n\n@Deprecated(\n    message = \"Use Object.assign instead\",\n    replaceWith = ReplaceWith(\"Object.assign(dest, src)\", \"kotlinext.js\")\n)\nfun <T, R : T> assign(dest: R, src: T): R = Object.assign(dest, src)\n\nfun toPlainObjectStripNull(obj: Any) = js {\n    for (key in Object.keys(obj)) {\n        val value = obj.asDynamic()[key]\n        if (value != null) this[key] = value\n    }\n}\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the sequence is empty.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@scan) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@scanIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;;uBAknSA,gD;gCC1yPA,yD;oBC1zCA,qC;;;;;;;iBC0CA,0C;;;sBCkCA,mC;cAAA,uC;;;;;;;;;;;;sCCjEA,mD;;;;;kBCoDA,0C;;;;;;;;;;;;;;;;;;;;;gBChEA,K;2BNo2CA,oD;;;;mBOv2CA,qC;;;;;;;;;;;;;sBCmEA,glEmE,yD;IAI/D,uBAAe,OAAf,C;IAHA,gB;ICTA,UAAa,E;IDab,qBCZO,G;ID0CP,iCAAyB,kB;IACzB,mCAA8B,kB;IAC9B,mCAA8B,kB;IAGpB,qBAAN,UAAM,EAAQ,QAAR,C;IACN,sCAAkB,UAAM,QAAxB,C;G;qDAlCJ,gC;IACI,gCAAQ,OAAO,qCAAsB,SAAtB,CAAP,CAAR,C;EACJ,C;qDAEA,+B;IVmmSO,kBAAM,eUlmSD,QVkmSc,OAAb,C;IA6UA,Q;IAAb,wBU/6SY,QV+6SZ,gB;MAAa,WU/6SD,QV+6SZ,M;mBACI,W;MUh7SuB,IAAC,MVg7SE,IUh7SF,aAAD;QAAM,QVg7SH,IUh7SG,a;MVg7SjB,YAAZ,WAAY,EUh7S2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CVg7S3B,C;;IUh7SZ,gCVi7SG,WUj7SH,C;EACJ,C;qDAEA,+B;ITqzCO,kBAAM,eAAa,wBSpzCd,QTozCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OSz3CD,QTy3CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MS13CuB,IAAC,MT03CE,IS13CF,aAAD;QAAM,QT03CH,IS13CG,a;MT03CjB,YAAZ,WAAY,ES13C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CT03C3B,C;;IS13CZ,gCT23CG,WS33CH,C;EACJ,C;qDAEA,+B;IV2lSO,kBAAM,eU1lSD,QV0lSc,OAAb,C;IA6UA,Q;IAAb,wBUv6SY,QVu6SZ,gB;MAAa,WUv6SD,QVu6SZ,M;mBACI,W;MUx6SuB,IAAC,MVw6SE,IUx6SF,aAAD;QAAM,QVw6SH,IUx6SG,a;MVw6SjB,YAAZ,WAAY,EUx6S2B,QAAO,KAAP,CVw6S3B,C;;IUx6SZ,gCVy6SG,WUz6SH,C;EACJ,C;qDAEA,+B;IASc,Q;IARV,IAAI,QAAS,UAAb,C;MACI,M;KCjCR,UAAa,E;IDoCT,iBCnCG,G;IVqmDS,U;IAAA,SShkDZ,QTgkDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MShkDO,IAAC,MTgkDK,OShkDL,aAAD;QAAM,QTgkDA,OShkDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,oCAAU,yDAAV,C;EACJ,C;;yDAEA,qB;WAAA,4F;G;yDAAA,8B;IAAA,qG;G;;2DACA,qB;WAAA,gG;G;0DAAA,gC;IAAA,2G;G;;2DACA,qB;WAAA,gG;G;0DAAA,gC;IAAA,2G;G;4CAOA,Y;IAC+B,gBAA3B,MAAO,MAAK,kBAAL,C;IV+lWK,Q;IAAhB,wBAAgB,SAAhB,gB;MAAgB,cAAA,SAAhB,M;MU/lWgD,qBV+lWnB,OU/lWmB,EAAa,0BV+lWhC,OU/lWgC,CAAb,C;;IAE5C,OAAO,2BAAc,SAAd,EAAoB,UAApB,SR3CuD,YQ2C3B,cR3C2B,CQ2CvD,E;EACX,C;;;;;;EEzDJ,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;G;;EAAA,0C;IAAA,0B;IAAA,kC;G;;;;;;EAFJ,gC;IAAA,yC;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,QAAA,wE;;G;;ECQA,+B;IAAoD,iBAAY,GAAZ,C;G;EAEpD,gD;IACU,iBAAY,QAAS,aAArB,C;G;EAEV,uD;IACI,UAAY,QAAS,aAArB,IAA6B,K;EACjC,C;0GAEA,yB;IAAA,8B;IAAA,0B;IAAA,yD;MACW,gB;MAAD,U;MAAA,KAAC,2BAAY,QAAS,aAArB,0DAAD,U;QAAuE,kBAAhB,Y;QbqyBtD,sB;;UAyXS,U;UAAhB,yD;YAAgB,cAAhB,mB;YAAsB,Ia9pC8D,Ob8pChD,Oa9pCmD,WAAH,Sb8pC9D,C;cAAwB,qBAAO,O;cAAP,uB;;UAC9C,qBAAO,I;;;Qa/pCD,SbqyBN,kB;;QaryBM,a;MAAA,a;K;GADV,C;0GAGA,yD;IACI,UAAY,QAAS,aAArB,IAA6B,uC;EACjC,C;ECZmC,uD;IAI/B,+BAAoC,IAApC,EAA0C,QAA1C,EAAoD,OAApD,C;IAKA,+BAA+B,kB;IAC/B,kCAAqC,kB;G;mDALrC,+B;IdwmSO,kBAAM,ecvmSD,QdumSc,OAAb,C;IA6UA,Q;IAAb,wBcp7SY,Qdo7SZ,gB;MAAa,Wcp7SD,Qdo7SZ,M;MACI,WAAY,Wcr7SW,Gdq7SG,Icr7SA,MAAH,Edq7SG,Icr7SY,OAAf,Cdq7SX,C;;Icr7SZ,gCds7SG,Wct7SH,C;EACJ,C;;qDAEA,qB;WAAA,sF;G;qDAAA,4B;IDEA,6BAAqB,gDAArB,IAA6B,uC;G;;wDCD7B,qB;WAAA,4F;G;wDAAA,+B;IDCA,gCAAqB,mDAArB,IAA6B,6C;G;;;;;;;EEDoC,2B;IAAE,eZyCzB,UYzCyB,EAAa,EAAb,C;EAAiB,C;EADxF,4C;IAC0F,kBAA9E,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,aAAzD,C;IAAoF,KC4D5F,a;ID5DE,+BC6DK,WD7D4F,SAAjG,C;G;EAEN,uD;IAC8E,kBAAlE,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,OAAzD,C;IAAwE,KCyDhF,a;IDzDE,+BC0DK,WD1DgF,SAArF,C;G;EEvBN,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,4D;IAAS,4D;IAAS,gE;IAAW,4D;G;;EAA7B,2C;IAAA,wB;IAAA,mC;G;;EAAS,2C;IAAA,wB;IAAA,mC;G;;EAAS,6C;IAAA,wB;IAAA,qC;G;;EAAW,2C;IAAA,wB;IAAA,mC;G;;;;;;EAFjC,8B;IAAA,qJ;G;;EAAA,mC;IAAA,a;MAAA,e;QAAA,wC;MAAA,e;QAAA,wC;MAAA,iB;QAAA,0C;MAAA,e;QAAA,wC;MAAA,QAAA,mF;;G;;ECAA,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,8D;IAAO,oE;IAAU,gE;IAAQ,gE;IAAQ,oE;G;;EAAjC,4C;IAAA,2B;IAAA,oC;G;;EAAO,+C;IAAA,2B;IAAA,uC;G;;EAAU,6C;IAAA,2B;IAAA,qC;G;;EAAQ,6C;IAAA,2B;IAAA,qC;G;;EAAQ,+C;IAAA,2B;IAAA,uC;G;;;;;;EAFrC,iC;IAAA,mM;G;;EAAA,sC;IAAA,a;MAAA,a;QAAA,yC;MAAA,gB;QAAA,4C;MAAA,c;QAAA,0C;MAAA,c;QAAA,0C;MAAA,gB;QAAA,4C;MAAA,QAAA,sF;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,sD;IACA,wE;IACA,8E;IACA,0E;IACA,0E;IACA,8E;IACA,sE;IACA,sE;IACA,0E;G;;EARA,wC;IAAA,wB;IAAA,gC;G;;EACA,iD;IAAA,wB;IAAA,yC;G;;EACA,oD;IAAA,wB;IAAA,4C;G;;EACA,kD;IAAA,wB;IAAA,0C;G;;EACA,kD;IAAA,wB;IAAA,0C;G;;EACA,oD;IAAA,wB;IAAA,4C;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,kD;IAAA,wB;IAAA,0C;G;;;;;;EAVJ,8B;IAAA,sX;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,qB;QAAA,8C;MAAA,wB;QAAA,iD;MAAA,sB;QAAA,+C;MAAA,sB;QAAA,+C;MAAA,wB;QAAA,iD;MAAA,oB;QAAA,6C;MAAA,oB;QAAA,6C;MAAA,sB;QAAA,+C;MAAA,QAAA,mF;;G;;ECYmC,uD;IAI/B,kCAAuC,IAAvC,EAA6C,QAA7C,EAAuD,OAAvD,C;IAKA,kCAA6B,kB;IAC7B,4BAAwB,kB;IACxB,2CAAsC,kB;IACtC,+BAA0B,kB;IAC1B,6BAAwB,kB;IACxB,gCAA2B,kB;G;mDAT3B,+B;IpBsmSO,kBAAM,eoBrmSD,QpBqmSc,OAAb,C;IA6UA,Q;IAAb,wBoBl7SY,QpBk7SZ,gB;MAAa,WoBl7SD,QpBk7SZ,M;MACI,WAAY,WoBn7SW,GpBm7SG,IoBn7SA,MAAH,EpBm7SG,IoBn7SY,OAAf,CpBm7SX,C;;IoBn7SZ,gCpBo7SG,WoBp7SH,C;EACJ,C;;wDAEA,qB;WAAA,4F;G;wDAAA,+B;IAAA,sG;G;;mDACA,qB;WAAA,iF;G;kDAAA,0B;IAAA,sF;G;;iEACA,qB;WAAA,8G;G;gEAAA,wC;IAAA,iI;G;;qDACA,qB;WAAA,sF;G;oDAAA,4B;IAAA,6F;G;;mDACA,qB;WAAA,kF;G;kDAAA,0B;IAAA,uF;G;;sDACA,qB;WAAA,wF;G;qDAAA,6B;IAAA,gG;G;oDAEA,4B;IAQe,Q;ITnCf,UAAa,E;IS4BT,YT3BG,G;IS6BwB,kBAA3B,QjB8BsC,UiB9BtC,EAAa,YAAb,C;IAAiC,KJiDrC,a;IfuhDgB,U;IAAA,SethDT,WIlDqC,kBnBwkD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MmBxkDyD,UnBwkD5C,OE50CmC,I;MiB5Pc,YnBwkDjD,OE/zCmC,M;MiBxQxD,MAAM,GAAN,IAAa,K;;IAIjB,qCAAW,uDAAX,C;EACJ,C;;;;;;;ECZiE,2B;IAAE,elBoCzB,UkBpCyB,EAAa,EAAb,C;EAAiB,C;EADxF,4C;IAC0F,kBAA9E,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,aAAzD,C;IAAoF,KLuD5F,a;IKvDE,+BLwDK,WKxD4F,SAAjG,C;G;EAEN,uD;IAC8E,kBAAlE,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,OAAzD,C;IAAwE,KLoDhF,a;IKpDE,+BLqDK,WKrDgF,SAArF,C;G;EC5BN,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,sD;IACA,sE;IACA,oD;G;;EAFA,wC;IAAA,wB;IAAA,gC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,uC;IAAA,wB;IAAA,+B;G;;;;;;EAJJ,8B;IAAA,8G;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,oB;QAAA,6C;MAAA,W;QAAA,oC;MAAA,QAAA,kF;;G;;ECM6B,gD;IZLzB,UAAa,E;IYQb,8BAAkC,IAAlC,EZPO,GYOP,C;IAEU,qBAAN,UAAM,EAAQ,QAAR,C;G;qDAGV,+B;IvBymSO,kBAAM,euBxmSD,QvBwmSc,OAAb,C;IA6UA,Q;IAAb,wBuBr7SY,QvBq7SZ,gB;MAAa,WuBr7SD,QvBq7SZ,M;mBACI,W;MuBt7SuB,IAAC,MvBs7SE,IuBt7SF,aAAD;QAAM,QvBs7SH,IuBt7SG,a;MvBs7SjB,YAAZ,WAAY,EuBt7S2B,QAAO,KAAP,CvBs7S3B,C;;IuBt7SZ,gCvBu7SG,WuBv7SH,C;EACJ,C;qDAEA,+B;ItB2zCO,kBAAM,eAAa,wBsB1zCd,QtB0zCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OsB/3CD,QtB+3CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MsBh4CuB,IAAC,MtBg4CE,IsBh4CF,aAAD;QAAM,QtBg4CH,IsBh4CG,a;MtBg4CjB,YAAZ,WAAY,EsBh4C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CtBg4C3B,C;;IsBh4CZ,gCtBi4CG,WsBj4CH,C;EACJ,C;qDAEA,+B;IvBimSO,kBAAM,euBhmSD,QvBgmSc,OAAb,C;IA6UA,Q;IAAb,wBuB76SY,QvB66SZ,gB;MAAa,WuB76SD,QvB66SZ,M;mBACI,W;MuB96SuB,IAAC,MvB86SE,IuB96SF,aAAD;QAAM,QvB86SH,IuB96SG,a;MvB86SjB,YAAZ,WAAY,EuB96S2B,QAAO,KAAP,CvB86S3B,C;;IuB96SZ,gCvB+6SG,WuB/6SH,C;EACJ,C;qDAEA,+B;IAS6B,Q;IARzB,IAAI,QAAS,UAAb,C;MACI,M;KZ3BR,UAAa,E;IY8BT,iBZ7BG,G;IVqmDS,U;IAAA,SsBtkDZ,QtBskDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MsBtkDO,IAAC,MtBskDK,OsBtkDL,aAAD;QAAM,QtBskDA,OsBtkDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,UAAY,SAAZ,IAAyB,yD;EAC7B,C;gEAEA,2B;IAAmD,+BAAqB,I;EAAK,C;gEAC7E,mC;IZtCA,UAAa,E;IACN,GYqCsF,CAAK,OAAL,S;IZrCtF,GYqC6G,CAAK,OAAL,C;IAAjD,+BZrC5D,G;EYqC6H,C;;;;;;;ECrBxI,8C;IACyE,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,KR6D3E,a;IQ7DE,+BR8DK,WQ9D2E,SAAhF,C;G;ECnBN,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IACA,oE;G;;EADA,0C;IAAA,0B;IAAA,kC;G;;EACA,+C;IAAA,0B;IAAA,uC;G;;;;;;EAHJ,gC;IAAA,gF;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,iB;QAAA,4C;MAAA,QAAA,sF;;G;;ECakC,sD;IAI9B,kCAAsC,IAAtC,EAA4C,QAA5C,EAAsD,OAAtD,C;IAKA,sCAAuC,kB;IACvC,8BAA8B,kB;IAC9B,mCAA+B,kB;IAC/B,6BAAwB,kB;IACxB,kCAA8B,kB;IAC9B,iCAAkC,kB;G;kDATlC,+B;I1BqmSO,kBAAM,e0BpmSD,Q1BomSc,OAAb,C;IA6UA,Q;IAAb,wB0Bj7SY,Q1Bi7SZ,gB;MAAa,W0Bj7SD,Q1Bi7SZ,M;MACI,WAAY,W0Bl7SW,G1Bk7SG,I0Bl7SA,MAAH,E1Bk7SG,I0Bl7SY,OAAf,C1Bk7SX,C;;I0Bl7SZ,gC1Bm7SG,W0Bn7SH,C;EACJ,C;;2DAEA,qB;WAAA,mG;G;2DAAA,mC;IAAA,iH;G;;oDACA,qB;WAAA,oF;G;oDAAA,4B;IbFA,4BAAqB,+CAArB,IAA6B,uC;G;;wDaG7B,qB;WAAA,6F;G;wDAAA,gC;IAAA,wG;G;;kDACA,qB;WAAA,iF;G;kDAAA,0B;IAAA,sF;G;;uDACA,qB;WAAA,2F;G;uDAAA,+B;IAAA,qG;G;;sDACA,qB;WAAA,yF;G;sDAAA,8B;IbNA,+BAAqB,iDAArB,IAA6B,2C;G;uDaQ7B,4B;ItB4DW,kBAAX,mB;IsB5D+E,KVmD/E,a;IUnDmD,yCtB4DnD,MYRO,WZQmB,UAA1B,CsB5DmD,C;EAAmC,C;;;;;;;ECFvB,0B;IAAE,gBxBkCvB,UwBlCuB,EAAc,EAAd,C;EAAkB,C;EADvF,2C;IACyF,kBAA7E,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,EAAuD,YAAvD,C;IAAmF,KXqD3F,a;IWrDE,+BXsDK,WWtD2F,SAAhG,C;G;EAEN,sD;IAC4E,kBAAhE,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,EAAuD,OAAvD,C;IAAsE,KXkD9E,a;IWlDE,+BXmDK,WWnD8E,SAAnF,C;G;EC9BN,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,0D;IAAS,0D;IAAS,8D;IAAW,sD;G;;EAA7B,0C;IAAA,uB;IAAA,kC;G;;EAAS,0C;IAAA,uB;IAAA,kC;G;;EAAS,4C;IAAA,uB;IAAA,oC;G;;EAAW,wC;IAAA,uB;IAAA,gC;G;;;;;;EAFjC,6B;IAAA,+I;G;;EAAA,kC;IAAA,a;MAAA,e;QAAA,uC;MAAA,e;QAAA,uC;MAAA,iB;QAAA,yC;MAAA,a;QAAA,qC;MAAA,QAAA,iF;;G;;ECAA,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,oD;IACA,sD;IACA,oE;IACA,wE;IACA,gE;IACA,8D;IACA,kD;G;;EANA,uC;IAAA,uB;IAAA,+B;G;;EACA,wC;IAAA,uB;IAAA,gC;G;;EACA,+C;IAAA,uB;IAAA,uC;G;;EACA,iD;IAAA,uB;IAAA,yC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,4C;IAAA,uB;IAAA,oC;G;;EACA,sC;IAAA,uB;IAAA,8B;G;;;;;;EARJ,6B;IAAA,6P;G;;EAAA,kC;IAAA,a;MAAA,Y;QAAA,oC;MAAA,a;QAAA,qC;MAAA,oB;QAAA,4C;MAAA,sB;QAAA,8C;MAAA,kB;QAAA,0C;MAAA,iB;QAAA,yC;MAAA,W;QAAA,mC;MAAA,QAAA,iF;;G;;ECAA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,gE;IAAU,sD;G;;EAAV,6C;IAAA,yB;IAAA,qC;G;;EAAU,wC;IAAA,yB;IAAA,gC;G;;;;;;EAFd,+B;IAAA,4E;G;;EAAA,oC;IAAA,a;MAAA,gB;QAAA,0C;MAAA,W;QAAA,qC;MAAA,QAAA,mF;;G;;ECO6C,iE;IAIzC,kCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,OAAjE,C;IACA,oCAAgC,kB;IAChC,+BAAuB,kB;G;;oEADvB,qB;WAAA,0G;G;oEAAA,iC;IAAA,sH;G;;+DACA,qB;WAAA,gG;G;+DAAA,4B;IAAA,uG;G;;;;;;;ECO8H,qC;IAAE,e7ByCtF,U6BzCsF,EAAa,EAAb,C;EAAiB,C;EADrJ,uD;IAA8B,yB;MAAA,YAAqB,I;IACoG,kBAA3I,mCAA+B,yBAA/B,EAA0D,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA1D,EAAsH,uBAAtH,C;IAAiJ,KhB4DzJ,a;IgB5DE,+BhB6DK,WgB7DyJ,SAA9J,C;G;EAEN,kE;IAAuC,yB;MAAA,YAAqB,I;IAC+E,kBAA/H,mCAA+B,yBAA/B,EAA0D,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA1D,EAAsH,OAAtH,C;IAAqI,KhByD7I,a;IgBzDE,+BhB0DK,WgB1D6I,SAAlJ,C;G;ECZ6C,uE;IAI/C,oCAAyD,IAAzD,EAA+D,QAA/D,EAAyE,OAAzE,C;IAEA,8BAA+B,kB;IAC/B,+BAAgC,kB;IAChC,iCAA8B,kB;IAC9B,mCAA+B,kB;IAC/B,+BAAuB,kB;G;;oEAJvB,qB;WAAA,oG;G;oEAAA,2B;IAAA,0G;G;;qEACA,qB;WAAA,sG;G;qEAAA,4B;IAAA,6G;G;;wEACA,qB;WAAA,2G;G;wEAAA,+B;IAAA,qH;G;;yEACA,qB;WAAA,8G;G;yEAAA,gC;IAAA,yH;G;;qEACA,qB;WAAA,sG;G;qEAAA,4B;IAAA,6G;G;gEAEA,4B;I7BkEW,kBAAX,mB;I6BlE+D,KjByD/D,a;IiBzD2C,iC7BkE3C,MYRO,WZQmB,UAA1B,C6BlE2C,C;EAA2B,C;iEACtE,4B;I7BiEW,kBAAX,mB;I6BjEiE,KjBwDjE,a;IiBxD4C,kC7BiE5C,MYRO,WZQmB,UAA1B,C6BjE4C,C;EAA4B,C;;;;;;;ECAyB,2C;IAAE,kB/BqCzD,U+BrCyD,EAAgB,EAAhB,C;EAAoB,C;EAD3H,4D;IAC6H,kBAAjH,yCAAqC,+BAArC,EAA+E,OAAT,QAAS,CAA/E,EAAyF,6BAAzF,C;IAAuH,KlBwD/H,a;IkBxDE,+BlByDK,WkBzD+H,SAApI,C;G;EAEN,uE;IAC8G,kBAAlG,yCAAqC,+BAArC,EAA+E,OAAT,QAAS,CAA/E,EAAyF,OAAzF,C;IAAwG,KlBqDhH,a;IkBrDE,+BlBsDK,WkBtDgH,SAArH,C;G;ECb6B,uD;IAI/B,oCAAyC,IAAzC,EAA+C,QAA/C,EAAyD,OAAzD,C;IAKA,+BAA+B,kB;IAC/B,iCAAkC,kB;IAClC,mCAA+B,kB;IAC/B,8BAAyB,kB;IACzB,8BAA6B,kB;IAC7B,mCAAoC,kB;IACpC,iCAAmC,kB;G;mDAVnC,+B;InComSO,kBAAM,emCnmSD,QnCmmSc,OAAb,C;IA6UA,Q;IAAb,wBmCh7SY,QnCg7SZ,gB;MAAa,WmCh7SD,QnCg7SZ,M;MACI,WAAY,WmCj7SW,GnCi7SG,ImCj7SA,MAAH,EnCi7SG,ImCj7SY,OAAf,CnCi7SX,C;;ImCj7SZ,gCnCk7SG,WmCl7SH,C;EACJ,C;;qDAEA,qB;WAAA,sF;G;oDAAA,4B;ItBFA,6BAAqB,gDAArB,IAA6B,uC;G;;uDsBG7B,qB;WAAA,0F;G;uDAAA,8B;IAAA,mG;G;;yDACA,qB;WAAA,8F;G;yDAAA,gC;IAAA,yG;G;;oDACA,qB;WAAA,oF;G;mDAAA,2B;IAAA,0F;G;;oDACA,qB;WAAA,oF;G;oDAAA,2B;ItBNA,4BAAqB,+CAArB,IAA6B,qC;G;;yDsBO7B,qB;WAAA,8F;G;yDAAA,gC;IAAA,yG;G;;uDACA,qB;WAAA,0F;G;uDAAA,8B;ItBRA,+BAAqB,kDAArB,IAA6B,2C;G;mDsBU7B,8B;I/B0DW,kBAAX,mB;I+B1DuE,OnBiDvE,a;ImBjDgD,oC/B0DhD,MYRO,WZQmB,UAA1B,C+B1DgD,C;EAAgC,C;qDAChF,8B;I/ByDW,kBAAX,mB;I+BzD2E,OnBgD3E,a;ImBhDkD,sC/ByDlD,MYRO,WZQmB,UAA1B,C+BzDkD,C;EAAkC,C;;;;;;;ECDnB,2B;IAAE,kBjC8BzB,UiC9ByB,EAAgB,EAAhB,C;EAAoB,C;EAD3F,4C;IAC6F,kBAAjF,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,aAAzD,C;IAAuF,KpBiD/F,a;IoBjDE,+BpBkDK,WoBlD+F,SAApG,C;G;EAEN,uD;IAC8E,kBAAlE,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,EAAyD,OAAzD,C;IAAwE,KpB8ChF,a;IoB9CE,+BpB+CK,WoB/CgF,SAArF,C;G;EClCN,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,4D;IAAS,4D;IAAS,4D;IAAS,gE;G;;EAA3B,2C;IAAA,wB;IAAA,mC;G;;EAAS,2C;IAAA,wB;IAAA,mC;G;;EAAS,2C;IAAA,wB;IAAA,mC;G;;EAAS,6C;IAAA,wB;IAAA,qC;G;;;;;;EAF/B,8B;IAAA,qJ;G;;EAAA,mC;IAAA,a;MAAA,e;QAAA,wC;MAAA,e;QAAA,wC;MAAA,e;QAAA,wC;MAAA,iB;QAAA,0C;MAAA,QAAA,mF;;G;;ECAA,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,sD;IAAO,wD;IAAQ,sD;G;;EAAf,wC;IAAA,uB;IAAA,gC;G;;EAAO,yC;IAAA,uB;IAAA,iC;G;;EAAQ,wC;IAAA,uB;IAAA,gC;G;;;;;;EAFnB,6B;IAAA,wG;G;;EAAA,kC;IAAA,a;MAAA,a;QAAA,qC;MAAA,c;QAAA,sC;MAAA,a;QAAA,qC;MAAA,QAAA,kF;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,sD;IACA,wD;IACA,sD;IACA,oE;IACA,wE;IACA,8D;IACA,4E;IACA,gF;IACA,gE;IACA,8E;IACA,mF;IACA,+E;IACA,uE;IACA,+D;IACA,uE;IACA,yE;IACA,yE;IACA,iF;IACA,iF;IACA,mF;IACA,mF;IACA,iE;IACA,iE;IACA,iE;IACA,iE;IACA,6D;IACA,yE;IACA,2E;IACA,yE;G;;EA5BA,wC;IAAA,wB;IAAA,gC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;EACA,wC;IAAA,wB;IAAA,gC;G;;EACA,+C;IAAA,wB;IAAA,uC;G;;EACA,iD;IAAA,wB;IAAA,yC;G;;EACA,4C;IAAA,wB;IAAA,oC;G;;EACA,mD;IAAA,wB;IAAA,2C;G;;EACA,qD;IAAA,wB;IAAA,6C;G;;EACA,6C;IAAA,wB;IAAA,qC;G;;EACA,oD;IAAA,wB;IAAA,4C;G;;EACA,sD;IAAA,wB;IAAA,8C;G;;EACA,oD;IAAA,wB;IAAA,4C;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,4C;IAAA,wB;IAAA,oC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,iD;IAAA,wB;IAAA,yC;G;;EACA,iD;IAAA,wB;IAAA,yC;G;;EACA,qD;IAAA,wB;IAAA,6C;G;;EACA,qD;IAAA,wB;IAAA,6C;G;;EACA,sD;IAAA,wB;IAAA,8C;G;;EACA,sD;IAAA,wB;IAAA,8C;G;;EACA,6C;IAAA,wB;IAAA,qC;G;;EACA,6C;IAAA,wB;IAAA,qC;G;;EACA,6C;IAAA,wB;IAAA,qC;G;;EACA,6C;IAAA,wB;IAAA,qC;G;;EACA,2C;IAAA,wB;IAAA,mC;G;;EACA,iD;IAAA,wB;IAAA,yC;G;;EACA,kD;IAAA,wB;IAAA,0C;G;;EACA,iD;IAAA,wB;IAAA,yC;G;;;;;;EA9BJ,8B;IAAA,8oC;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,a;QAAA,sC;MAAA,Y;QAAA,qC;MAAA,mB;QAAA,4C;MAAA,qB;QAAA,8C;MAAA,gB;QAAA,yC;MAAA,uB;QAAA,gD;MAAA,yB;QAAA,kD;MAAA,iB;QAAA,0C;MAAA,wB;QAAA,iD;MAAA,0B;QAAA,mD;MAAA,wB;QAAA,iD;MAAA,oB;QAAA,6C;MAAA,gB;QAAA,yC;MAAA,oB;QAAA,6C;MAAA,qB;QAAA,8C;MAAA,qB;QAAA,8C;MAAA,yB;QAAA,kD;MAAA,yB;QAAA,kD;MAAA,0B;QAAA,mD;MAAA,0B;QAAA,mD;MAAA,iB;QAAA,0C;MAAA,iB;QAAA,0C;MAAA,iB;QAAA,0C;MAAA,iB;QAAA,0C;MAAA,e;QAAA,wC;MAAA,qB;QAAA,8C;MAAA,sB;QAAA,+C;MAAA,qB;QAAA,8C;MAAA,QAAA,mF;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IAAM,kE;IAAU,oE;G;;EAAhB,0C;IAAA,0B;IAAA,kC;G;;EAAM,8C;IAAA,0B;IAAA,sC;G;;EAAU,+C;IAAA,0B;IAAA,uC;G;;;;;;EAFpB,gC;IAAA,sH;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,gB;QAAA,2C;MAAA,iB;QAAA,4C;MAAA,QAAA,qF;;G;;ECaoE,2D;IAIhE,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,mCAA4B,kB;IAC5B,sCAAkC,kB;IAClC,kCAA8B,kB;IAC9B,uCAAmC,kB;IACnC,4CAAwC,kB;IACxC,qCAAiC,kB;IACjC,+CAA0C,kB;IAC1C,wCAA8C,kB;IAC9C,0CAAqC,kB;IACrC,8BAA8B,kB;G;uDAb9B,+B;IzCqmSO,kBAAM,eyCpmSD,QzComSc,OAAb,C;IA6UA,Q;IAAb,wByCj7SY,QzCi7SZ,gB;MAAa,WyCj7SD,QzCi7SZ,M;MACI,WAAY,WyCl7SW,GzCk7SG,IyCl7SA,MAAH,EzCk7SG,IyCl7SY,OAAf,CzCk7SX,C;;IyCl7SZ,gCzCm7SG,WyCn7SH,C;EACJ,C;;6DAEA,qB;WAAA,kG;G;4DAAA,gC;IAAA,6G;G;;gEACA,qB;WAAA,wG;G;gEAAA,mC;IAAA,sH;G;;4DACA,qB;WAAA,gG;G;4DAAA,+B;IAAA,0G;G;;iEACA,qB;WAAA,0G;G;iEAAA,oC;IAAA,yH;G;;sEACA,qB;WAAA,oH;G;sEAAA,yC;IAAA,wI;G;;+DACA,qB;WAAA,sG;G;+DAAA,kC;IAAA,mH;G;;yEACA,qB;WAAA,0H;G;wEAAA,4C;IAAA,iJ;G;;kEACA,qB;WAAA,4G;G;kEAAA,qC;IAAA,4H;G;;oEACA,qB;WAAA,gH;G;oEAAA,uC;IAAA,kI;G;;wDACA,qB;WAAA,wF;G;wDAAA,2B;I5BVA,4BAAqB,mDAArB,IAA6B,qC;G;gE4BY7B,4B;I9BhCA,UAAa,E;I8BgC2E,K9B9BpF,CADG,GACH,C;I8B8BwD,6C9B/BrD,G8B+BqD,C;EAAmC,C;;;;;;ECzBnE,mD;IAG5B,mCAAgD,IAAhD,EAAsD,QAAtD,EAAgE,qCAAhE,C;IAKA,+BAA4B,e;G;wDAJ5B,+B;I1C2mSO,kBAAM,e0C1mSD,Q1C0mSc,OAAb,C;IA6UA,Q;IAAb,wB0Cv7SY,Q1Cu7SZ,gB;MAAa,W0Cv7SD,Q1Cu7SZ,M;MACI,WAAY,W0Cx7SW,G1Cw7SG,I0Cx7SA,MAAH,E1Cw7SG,I0Cx7SY,OAAf,C1Cw7SX,C;;I0Cx7SZ,gC1Cy7SG,W0Cz7SH,C;EACJ,C;;2DAEA,qB;WAAA,8F;G;2DAAA,6B;IAAA,sG;G;EALgE,mD;IAAE,gBvCkDxB,UuClDwB,EAAc,EAAd,C;EAAkB,C;;;;;;;ECoBX,+B;IAAE,kBxC8BjC,UwC9BiC,EAAgB,EAAhB,C;EAAoB,C;EADnG,gD;IACqG,kBAAzF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA+F,K3BiDvG,a;I2BjDE,+B3BkDK,W2BlDuG,SAA5G,C;G;EAEN,2D;IACsF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,K3B8CxF,a;I2B9CE,+B3B+CK,W2B/CwF,SAA7F,C;G;EClCN,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,8D;IACA,sE;IACA,8E;G;;EAFA,4C;IAAA,4B;IAAA,oC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,oD;IAAA,4B;IAAA,4C;G;;;;;;EAJJ,kC;IAAA,+H;G;;EAAA,uC;IAAA,a;MAAA,Y;QAAA,yC;MAAA,gB;QAAA,6C;MAAA,oB;QAAA,iD;MAAA,QAAA,2F;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IAAM,4D;IAAQ,4D;IAAQ,0D;G;;EAAtB,0C;IAAA,0B;IAAA,kC;G;;EAAM,0C;IAAA,0B;IAAA,kC;G;;EAAQ,0C;IAAA,0B;IAAA,kC;G;;EAAQ,yC;IAAA,0B;IAAA,iC;G;;;;;;EAF1B,gC;IAAA,8I;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,c;QAAA,uC;MAAA,c;QAAA,uC;MAAA,a;QAAA,sC;MAAA,QAAA,uF;;G;;ECAA,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,gE;IACA,oE;IAAQ,kF;IAAe,kF;IACvB,kE;IAAO,gF;IAAc,gF;G;;EAFrB,6C;IAAA,6B;IAAA,qC;G;;EACA,+C;IAAA,6B;IAAA,uC;G;;EAAQ,sD;IAAA,6B;IAAA,8C;G;;EAAe,sD;IAAA,6B;IAAA,8C;G;;EACvB,8C;IAAA,6B;IAAA,sC;G;;EAAO,qD;IAAA,6B;IAAA,6C;G;;EAAc,qD;IAAA,6B;IAAA,6C;G;;;;;;EAJzB,mC;IAAA,+S;G;;EAAA,wC;IAAA,a;MAAA,Y;QAAA,0C;MAAA,c;QAAA,4C;MAAA,qB;QAAA,mD;MAAA,qB;QAAA,mD;MAAA,a;QAAA,2C;MAAA,oB;QAAA,kD;MAAA,oB;QAAA,kD;MAAA,QAAA,4F;;G;;;ECgBA,iD;IAC+E,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,K/B+DjF,a;I+B/DE,+B/BgEK,W+BhEiF,SAAtF,C;G;ECLkC,4D;IAIpC,kCAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;IAKF,+BAA+B,kB;IAC/B,kCAA8B,kB;IAC9B,uCAAmC,kB;IACnC,4CAAwC,kB;IACxC,mCAA+B,kB;IAC/B,qCAAgD,kB;IAChD,8BAA6B,kB;IAC7B,iCAAmC,kB;G;wDAXjC,+B;IhDsmSO,kBAAM,egDrmSD,QhDqmSc,OAAb,C;IA6UA,Q;IAAb,wBgDl7SY,QhDk7SZ,gB;MAAa,WgDl7SD,QhDk7SZ,M;MACI,WAAY,WgDn7SW,GhDm7SG,IgDn7SA,MAAH,EhDm7SG,IgDn7SY,OAAf,ChDm7SX,C;;IgDn7SZ,gChDo7SG,WgDp7SH,C;EACJ,C;;0DAEF,qB;WAAA,2F;G;yDAAA,4B;InCAE,6BAAqB,qDAArB,IAA6B,uC;G;;6DmCC/B,qB;WAAA,iG;G;6DAAA,+B;IAAA,2G;G;;kEACA,qB;WAAA,2G;G;kEAAA,oC;IAAA,0H;G;;uEACA,qB;WAAA,qH;G;uEAAA,yC;IAAA,yI;G;;8DACA,qB;WAAA,mG;G;8DAAA,gC;IAAA,8G;G;;gEACA,qB;WAAA,uG;G;gEAAA,kC;InCLE,mCAAqB,2DAArB,IAA6B,mD;G;;yDmCM/B,qB;WAAA,yF;G;yDAAA,2B;InCNE,4BAAqB,oDAArB,IAA6B,qC;G;;4DmCO/B,qB;WAAA,+F;G;4DAAA,8B;InCPE,+BAAqB,uDAArB,IAA6B,2C;G;;;;;;;EoCO8C,gC;IAAE,e9CiCnC,U8CjCmC,EAAa,EAAb,C;EAAiB,C;EADlG,iD;IACoG,kBAAxF,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,EAAmE,kBAAnE,C;IAA8F,KjCoDtG,a;IiCpDE,+BjCqDK,WiCrDsG,SAA3G,C;G;EAEN,4D;IACwF,kBAA5E,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,EAAmE,OAAnE,C;IAAkF,KjCiD1F,a;IiCjDE,+BjCkDK,WiClD0F,SAA/F,C;G;EC/BN,+C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,6C;IAAA,gD;K;IAEI,oF;IAAU,wF;G;;EAAV,uD;IAAA,mC;IAAA,+C;G;;EAAU,yD;IAAA,mC;IAAA,iD;G;;;;;;EAFd,yC;IAAA,uG;G;;EAAA,8C;IAAA,a;MAAA,gB;QAAA,oD;MAAA,kB;QAAA,sD;MAAA,QAAA,mG;;G;;ECAA,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,gE;IACA,0E;IACA,wE;IACA,0E;IACA,wE;IACA,sE;IACA,0F;IACA,sF;IACA,8E;IACA,kG;IACA,+F;IACA,6F;IACA,iG;IACA,uF;IACA,2G;IACA,uG;IACA,qG;IACA,yG;IACA,yF;IACA,6G;IACA,yG;IACA,uG;IACA,2G;G;;EAtBA,6C;IAAA,6B;IAAA,qC;G;;EACA,kD;IAAA,6B;IAAA,0C;G;;EACA,iD;IAAA,6B;IAAA,yC;G;;EACA,kD;IAAA,6B;IAAA,0C;G;;EACA,iD;IAAA,6B;IAAA,yC;G;;EACA,gD;IAAA,6B;IAAA,wC;G;;EACA,0D;IAAA,6B;IAAA,kD;G;;EACA,wD;IAAA,6B;IAAA,gD;G;;EACA,oD;IAAA,6B;IAAA,4C;G;;EACA,8D;IAAA,6B;IAAA,sD;G;;EACA,4D;IAAA,6B;IAAA,oD;G;;EACA,2D;IAAA,6B;IAAA,mD;G;;EACA,6D;IAAA,6B;IAAA,qD;G;;EACA,wD;IAAA,6B;IAAA,gD;G;;EACA,kE;IAAA,6B;IAAA,0D;G;;EACA,gE;IAAA,6B;IAAA,wD;G;;EACA,+D;IAAA,6B;IAAA,uD;G;;EACA,iE;IAAA,6B;IAAA,yD;G;;EACA,yD;IAAA,6B;IAAA,iD;G;;EACA,mE;IAAA,6B;IAAA,2D;G;;EACA,iE;IAAA,6B;IAAA,yD;G;;EACA,gE;IAAA,6B;IAAA,wD;G;;EACA,kE;IAAA,6B;IAAA,0D;G;;;;;;EAxBJ,mC;IAAA,moC;G;;EAAA,wC;IAAA,a;MAAA,Y;QAAA,0C;MAAA,iB;QAAA,+C;MAAA,gB;QAAA,8C;MAAA,iB;QAAA,+C;MAAA,gB;QAAA,8C;MAAA,e;QAAA,6C;MAAA,yB;QAAA,uD;MAAA,uB;QAAA,qD;MAAA,mB;QAAA,iD;MAAA,6B;QAAA,2D;MAAA,2B;QAAA,yD;MAAA,0B;QAAA,wD;MAAA,4B;QAAA,0D;MAAA,uB;QAAA,qD;MAAA,iC;QAAA,+D;MAAA,+B;QAAA,6D;MAAA,8B;QAAA,4D;MAAA,gC;QAAA,8D;MAAA,wB;QAAA,sD;MAAA,kC;QAAA,gE;MAAA,gC;QAAA,8D;MAAA,+B;QAAA,6D;MAAA,iC;QAAA,+D;MAAA,QAAA,6F;;G;;ECOiC,qD;IAI7B,+BAAkC,IAAlC,EAAwC,QAAxC,EAAkD,OAAlD,C;IACA,gCAA4B,kB;G;;oDAA5B,qB;WAAA,sF;G;oDAAA,6B;IAAA,8F;G;;;;;;;ECO6D,yB;IAAE,elD0CrB,UkD1CqB,EAAa,EAAb,C;EAAiB,C;EADpF,0C;IACsF,kBAA1E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAgF,KrC6DxF,a;IqC7DE,+BrC8DK,WqC9DwF,SAA7F,C;G;EAEN,qD;IAC0E,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KrC0D5E,a;IqC1DE,+BrC2DK,WqC3D4E,SAAjF,C;G;ECjBqC,+D;IAIvC,oCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,OAAjE,C;G;;;;;;;ECQiF,mC;IAAE,kBpD4CzC,UoD5CyC,EAAgB,EAAhB,C;EAAoB,C;EAD3G,oD;IAC6G,kBAAjG,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAuG,KvC+D/G,a;IuC/DE,+BvCgEK,WuChE+G,SAApH,C;G;EAEN,+D;IAC8F,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,KvC4DhG,a;IuC5DE,+BvC6DK,WuC7DgG,SAArG,C;G;ECZ0B,mD;IAG5B,kCAA8C,IAA9C,EAA6D,SAAT,QAAS,CAA7D,EAAuE,qCAAvE,C;IAKA,wCAAoC,kB;G;wDAJpC,+B;IxD2mSO,kBAAM,ewD1mSD,QxD0mSc,OAAb,C;IA6UA,Q;IAAb,wBwDv7SY,QxDu7SZ,gB;MAAa,WwDv7SD,QxDu7SZ,M;MACI,WAAY,WwDx7SW,GxDw7SG,IwDx7SA,MAAH,ExDw7SG,IwDx7SY,OAAf,CxDw7SX,C;;IwDx7SZ,gCxDy7SG,WwDz7SH,C;EACJ,C;;mEAEA,qB;WAAA,6G;G;mEAAA,qC;IAAA,6H;G;EALuE,mD;IAAE,erDkD/B,UqDlD+B,EAAa,EAAb,C;EAAiB,C;;;;;;;ECG9F,iD;IAC+E,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,KzCiEjF,a;IyCjEE,+BzCkEK,WyClEiF,SAAtF,C;G;ECfN,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,gE;IAAM,sE;G;;EAAN,6C;IAAA,6B;IAAA,qC;G;;EAAM,gD;IAAA,6B;IAAA,wC;G;;;;;;EAFV,mC;IAAA,oF;G;;EAAA,wC;IAAA,a;MAAA,Y;QAAA,0C;MAAA,e;QAAA,6C;MAAA,QAAA,6F;;G;;ECKwC,4D;IAIpC,kCAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;G;;;;;;;ECQoH,gC;IAAE,ezD4C5E,UyD5C4E,EAAa,EAAb,C;EAAiB,C;EAD3I,kD;IAAyB,yB;MAAA,YAAqB,I;IAC+F,kBAAjI,8BAA0B,oBAA1B,EAAgD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAhD,EAA4G,kBAA5G,C;IAAuI,K5C+D/I,a;I4C/DE,+B5CgEK,W4ChE+I,SAApJ,C;G;EAEN,6D;IAAkC,yB;MAAA,YAAqB,I;IAC0E,kBAArH,8BAA0B,oBAA1B,EAAgD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAhD,EAA4G,OAA5G,C;IAA2H,K5C4DnI,a;I4C5DE,+B5C6DK,W4C7DmI,SAAxI,C;G;ECPiC,2D;IAInC,kCAA2C,IAA3C,EAAiD,QAAjD,EAA2D,OAA3D,C;IAKA,gCAAiC,kB;IACjC,gCAAiC,kB;IACjC,2CAAuC,kB;IACvC,mCAAoC,kB;IACpC,kDAA6C,kB;IAC7C,+BAAgC,kB;IAChC,8CAAyC,kB;G;uDAVzC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;0DAEA,qB;WAAA,4F;G;0DAAA,6B;IAAA,oG;G;;0DACA,qB;WAAA,4F;G;0DAAA,6B;IAAA,oG;G;;qEACA,qB;WAAA,kH;G;qEAAA,wC;IAAA,qI;G;;6DACA,qB;WAAA,kG;G;6DAAA,gC;IAAA,6G;G;;4EACA,qB;WAAA,gI;G;4EAAA,+C;IAAA,0J;G;;yDACA,qB;WAAA,0F;G;yDAAA,4B;IAAA,iG;G;;wEACA,qB;WAAA,wH;G;wEAAA,2C;IAAA,8I;G;sDAEA,4B;IzD2DW,kBAAX,mB;IyD3DmE,K7CkDnE,a;I6ClD6C,mCzD2D7C,MYRO,WZQmB,UAA1B,CyD3D6C,C;EAA6B,C;sDAC1E,4B;IzD0DW,kBAAX,mB;IyD1DmE,K7CiDnE,a;I6CjD6C,mCzD0D7C,MYRO,WZQmB,UAA1B,CyD1D6C,C;EAA6B,C;yDAC1E,4B;IzDyDW,kBAAX,mB;IyDzDyE,K7CgDzE,a;I6ChDgD,sCzDyDhD,MYRO,WZQmB,UAA1B,CyDzDgD,C;EAAgC,C;qDAChF,4B;IzDwDW,kBAAX,mB;IyDxDiE,K7C+CjE,a;I6C/C4C,kCzDwD5C,MYRO,WZQmB,UAA1B,CyDxD4C,C;EAA4B,C;wEAExE,4B;IACI,qDAAsC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAAhE,C;EACJ,C;wEACA,4B;IACI,qDAAsC,aAAX,mBAAW,MAAe,IAAf,EAA6B,KAA7B,CAAoC,MAA1E,C;EACJ,C;oEACA,4B;IACI,iDAAkC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAA5D,C;EACJ,C;oEACA,4B;IACI,iDAAkC,aAAX,mBAAW,MAAe,IAAf,EAA6B,KAA7B,CAAoC,MAAtE,C;EACJ,C;;;;;;;ECnByE,+B;IAAE,e3DkCjC,U2DlCiC,EAAa,EAAb,C;EAAiB,C;EADhG,gD;IACkG,kBAAtF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA4F,K9CqDpG,a;I8CrDE,+B9CsDK,W8CtDoG,SAAzG,C;G;EAEN,2D;IACsF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,K9CkDxF,a;I8ClDE,+B9CmDK,W8CnDwF,SAA7F,C;G;EC9BN,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,8D;IAAM,kE;IAAQ,kE;IAAQ,oE;IAAS,gE;IAAO,wE;G;;EAAtC,4C;IAAA,4B;IAAA,oC;G;;EAAM,8C;IAAA,4B;IAAA,sC;G;;EAAQ,8C;IAAA,4B;IAAA,sC;G;;EAAQ,+C;IAAA,4B;IAAA,uC;G;;EAAS,6C;IAAA,4B;IAAA,qC;G;;EAAO,iD;IAAA,4B;IAAA,yC;G;;;;;;EAF1C,kC;IAAA,4O;G;;EAAA,uC;IAAA,a;MAAA,Y;QAAA,yC;MAAA,c;QAAA,2C;MAAA,c;QAAA,2C;MAAA,e;QAAA,4C;MAAA,a;QAAA,0C;MAAA,iB;QAAA,8C;MAAA,QAAA,2F;;G;;ECQsC,0D;IAIlC,kCAA0C,IAA1C,EAAgD,QAAhD,EAA0D,OAA1D,C;IAKA,+BAA0B,kB;IAC1B,6BAAwB,kB;IACxB,+BAAuB,kB;G;sDANvB,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;wDAEA,qB;WAAA,yF;G;uDAAA,4B;IAAA,gG;G;;sDACA,qB;WAAA,qF;G;qDAAA,0B;IAAA,0F;G;;wDACA,qB;WAAA,yF;G;wDAAA,4B;IAAA,gG;G;;;;;;;ECEuE,8B;IAAE,e9DwC/B,U8DxC+B,EAAa,EAAb,C;EAAiB,C;EAD9F,+C;IACgG,kBAApF,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,gBAA/D,C;IAA0F,KjD2DlG,a;IiD3DE,+BjD4DK,WiD5DkG,SAAvG,C;G;EAEN,0D;IACoF,kBAAxE,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,OAA/D,C;IAA8E,KjDwDtF,a;IiDxDE,+BjDyDK,WiDzDsF,SAA3F,C;G;ECxBN,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,4D;IAAM,8D;G;;EAAN,2C;IAAA,2B;IAAA,mC;G;;EAAM,4C;IAAA,2B;IAAA,oC;G;;;;;;EAFV,iC;IAAA,8E;G;;EAAA,sC;IAAA,a;MAAA,Y;QAAA,wC;MAAA,a;QAAA,yC;MAAA,QAAA,yF;;G;;ECS6B,gD;IAGzB,oCAAwC,IAAxC,EAA8C,QAA9C,C;IAKA,+BAAiC,kB;IACjC,uCAAmC,kB;IACnC,2CAA4C,kB;IAC5C,+BAA0B,kB;G;qDAP1B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;uDAEA,qB;WAAA,wF;G;uDAAA,4B;ItDIA,6BAAqB,kDAArB,IAA6B,uC;G;;+DsDH7B,qB;WAAA,wG;G;+DAAA,oC;IAAA,uH;G;;mEACA,qB;WAAA,gH;G;mEAAA,wC;IAAA,mI;G;;uDACA,qB;WAAA,wF;G;sDAAA,4B;IAAA,+F;G;;;;;;;ECJJ,8C;IACyE,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,KpD+D3E,a;IoD/DE,+BpDgEK,WoDhE2E,SAAhF,C;G;ECjBN,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,gE;IAAS,oE;IAAW,gE;G;;EAApB,6C;IAAA,0B;IAAA,qC;G;;EAAS,+C;IAAA,0B;IAAA,uC;G;;EAAW,6C;IAAA,0B;IAAA,qC;G;;;;;;EAFxB,gC;IAAA,wH;G;;EAAA,qC;IAAA,a;MAAA,e;QAAA,0C;MAAA,iB;QAAA,4C;MAAA,e;QAAA,0C;MAAA,QAAA,uF;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IACA,gE;IACA,kE;IACA,4E;IACA,0E;IACA,8E;G;;EALA,0C;IAAA,0B;IAAA,kC;G;;EACA,6C;IAAA,0B;IAAA,qC;G;;EACA,8C;IAAA,0B;IAAA,sC;G;;EACA,mD;IAAA,0B;IAAA,2C;G;;EACA,kD;IAAA,0B;IAAA,0C;G;;EACA,oD;IAAA,0B;IAAA,4C;G;;;;;;EAPJ,gC;IAAA,qP;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,e;QAAA,0C;MAAA,gB;QAAA,2C;MAAA,qB;QAAA,gD;MAAA,oB;QAAA,+C;MAAA,sB;QAAA,iD;MAAA,QAAA,uF;;G;;ECciC,qD;IAI7B,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,gCAAiC,kB;IACjC,mCAA+B,kB;IAC/B,+BAA6B,kB;IAC7B,oCAAqC,kB;IACrC,8BAA+B,kB;IAC/B,+BAAgC,kB;IAChC,kCAAwC,kB;IACxC,kCAA6B,kB;IAC7B,iCAAiC,kB;G;iDAZjC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;oDAEA,qB;WAAA,sF;G;oDAAA,6B;IAAA,8F;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;IAAA,uG;G;;mDACA,qB;WAAA,oF;G;mDAAA,4B;I1DJA,6BAAqB,8CAArB,IAA6B,uC;G;;wD0DK7B,qB;WAAA,8F;G;wDAAA,iC;IAAA,0G;G;;kDACA,qB;WAAA,kF;G;kDAAA,2B;IAAA,wF;G;;mDACA,qB;WAAA,oF;G;mDAAA,4B;IAAA,2F;G;;sDACA,qB;WAAA,0F;G;sDAAA,+B;IAAA,oG;G;;sDACA,qB;WAAA,0F;G;;qDACA,qB;WAAA,wF;G;qDAAA,8B;I1DVA,+BAAqB,gDAArB,IAA6B,2C;G;gD0DY7B,4B;InEwDW,kBAAX,mB;ImExDmE,KvD+CnE,a;IuD/C6C,mCnEwD7C,MYRO,WZQmB,UAA1B,CmExD6C,C;EAA6B,C;oDAC1E,4B;InEuDW,kBAAX,mB;ImEvD2E,KvD8C3E,a;IuD9CiD,uCnEuDjD,MYRO,WZQmB,UAA1B,CmEvDiD,C;EAAiC,C;8CAClF,4B;InEsDW,kBAAX,mB;ImEtD+D,KvD6C/D,a;IuD7C2C,iCnEsD3C,MYRO,WZQmB,UAA1B,CmEtD2C,C;EAA2B,C;+CACtE,4B;InEqDW,kBAAX,mB;ImErDiE,KvD4CjE,a;IuD5C4C,kCnEqD5C,MYRO,WZQmB,UAA1B,CmErD4C,C;EAA4B,C;kDACxE,4B;IAAkC,8BAAyB,K;EAAM,C;kDACjE,4B;IAAkC,8BAAyB,K;EAAM,C;;;;;;;ECTJ,yB;IAAE,erEgCrB,UqEhCqB,EAAa,EAAb,C;EAAiB,C;EADpF,0C;IACsF,kBAA1E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAgF,KxDmDxF,a;IwDnDE,+BxDoDK,WwDpDwF,SAA7F,C;G;EAEN,qD;IAC0E,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KxDgD5E,a;IwDhDE,+BxDiDK,WwDjD4E,SAAjF,C;G;EChCN,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,wD;IAAS,wD;IAAS,4D;G;;EAAlB,yC;IAAA,sB;IAAA,iC;G;;EAAS,yC;IAAA,sB;IAAA,iC;G;;EAAS,2C;IAAA,sB;IAAA,mC;G;;;;;;EAFtB,4B;IAAA,4G;G;;EAAA,iC;IAAA,a;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;G;;ECAA,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,kD;IACA,kE;IACA,sE;IACA,4D;IACA,oF;IACA,wF;IACA,4D;IACA,oF;IACA,wF;IACA,0D;IACA,yE;IACA,6E;IACA,uD;IACA,+E;IACA,mF;IACA,uE;IACA,mD;IACA,2E;IACA,+E;IACA,qD;IACA,+D;IACA,uF;IACA,2F;IACA,uG;IACA,2G;G;;EAxBA,sC;IAAA,sB;IAAA,8B;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,uD;IAAA,sB;IAAA,+C;G;;EACA,yD;IAAA,sB;IAAA,iD;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,uD;IAAA,sB;IAAA,+C;G;;EACA,yD;IAAA,sB;IAAA,iD;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,iD;IAAA,sB;IAAA,yC;G;;EACA,mD;IAAA,sB;IAAA,2C;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,oD;IAAA,sB;IAAA,4C;G;;EACA,sD;IAAA,sB;IAAA,8C;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,kD;IAAA,sB;IAAA,0C;G;;EACA,oD;IAAA,sB;IAAA,4C;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,wD;IAAA,sB;IAAA,gD;G;;EACA,0D;IAAA,sB;IAAA,kD;G;;EACA,gE;IAAA,sB;IAAA,wD;G;;EACA,kE;IAAA,sB;IAAA,0D;G;;;;;;EA1BJ,4B;IAAA,4hC;G;;EAAA,iC;IAAA,a;MAAA,Y;QAAA,mC;MAAA,oB;QAAA,2C;MAAA,sB;QAAA,6C;MAAA,iB;QAAA,wC;MAAA,6B;QAAA,oD;MAAA,+B;QAAA,sD;MAAA,iB;QAAA,wC;MAAA,6B;QAAA,oD;MAAA,+B;QAAA,sD;MAAA,gB;QAAA,uC;MAAA,uB;QAAA,8C;MAAA,yB;QAAA,gD;MAAA,c;QAAA,qC;MAAA,0B;QAAA,iD;MAAA,4B;QAAA,mD;MAAA,sB;QAAA,6C;MAAA,Y;QAAA,mC;MAAA,wB;QAAA,+C;MAAA,0B;QAAA,iD;MAAA,a;QAAA,oC;MAAA,kB;QAAA,yC;MAAA,8B;QAAA,qD;MAAA,gC;QAAA,uD;MAAA,sC;QAAA,6D;MAAA,wC;QAAA,+D;MAAA,QAAA,+E;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,4D;IAAS,8D;G;;EAAT,2C;IAAA,wB;IAAA,mC;G;;EAAS,4C;IAAA,wB;IAAA,oC;G;;;;;;EAFb,8B;IAAA,8E;G;;EAAA,mC;IAAA,a;MAAA,e;QAAA,wC;MAAA,gB;QAAA,yC;MAAA,QAAA,iF;;G;;ECUqC,wD;IAGjC,kCAAmD,IAAnD,EAAkE,SAAT,QAAS,CAAlE,EAA4E,0CAA5E,C;IAKA,+BAAyC,kB;IACzC,uCAAmC,kB;IACnC,8BAAyB,kB;IACzB,+BAAuB,kB;IACvB,mCAA8B,kB;IAC9B,+BAA0B,kB;IAC1B,iCAA6C,kB;G;6DAV7C,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;+DAEA,qB;WAAA,gG;G;+DAAA,4B;I/DGA,6BAAqB,0DAArB,IAA6B,uC;G;;uE+DF7B,qB;WAAA,gH;G;uEAAA,oC;IAAA,+H;G;;8DACA,qB;WAAA,8F;G;;+DACA,qB;WAAA,gG;G;+DAAA,4B;IAAA,uG;G;;mEACA,qB;WAAA,wG;G;mEAAA,gC;IAAA,mH;G;;+DACA,qB;WAAA,gG;G;+DAAA,4B;IAAA,uG;G;;iEACA,qB;WAAA,oG;G;iEAAA,8B;I/DHA,+BAAqB,4DAArB,IAA6B,2C;G;0D+DK7B,2B;IAA6B,0BAAqB,I;EAAK,C;0DACvD,2B;IAA6B,0BAAqB,I;EAAK,C;EAdqB,wD;IAAE,ezEgDpC,UyEhDoC,EAAa,EAAb,C;EAAiB,C;;;;;;;ECQnG,sD;IACyF,kBAA7E,mCAA+B,yBAA/B,EAAmE,OAAT,QAAS,CAAnE,C;IAAmF,K7D0D3F,a;I6D1DE,+B7D2DK,W6D3D2F,SAAhG,C;G;ECtBN,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,gF;IAAS,oF;IAAW,gF;G;;EAApB,qD;IAAA,kC;IAAA,6C;G;;EAAS,uD;IAAA,kC;IAAA,+C;G;;EAAW,qD;IAAA,kC;IAAA,6C;G;;;;;;EAFxB,wC;IAAA,gJ;G;;EAAA,6C;IAAA,a;MAAA,e;QAAA,kD;MAAA,iB;QAAA,oD;MAAA,e;QAAA,kD;MAAA,QAAA,uG;;G;;ECAA,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,0E;IACA,8E;IACA,4F;IACA,0F;IACA,8F;IACA,wE;IACA,8E;IACA,0F;IACA,wG;IACA,wG;G;;EATA,kD;IAAA,kC;IAAA,0C;G;;EACA,oD;IAAA,kC;IAAA,4C;G;;EACA,2D;IAAA,kC;IAAA,mD;G;;EACA,0D;IAAA,kC;IAAA,kD;G;;EACA,4D;IAAA,kC;IAAA,oD;G;;EACA,iD;IAAA,kC;IAAA,yC;G;;EACA,oD;IAAA,kC;IAAA,4C;G;;EACA,0D;IAAA,kC;IAAA,kD;G;;EACA,iE;IAAA,kC;IAAA,yD;G;;EACA,iE;IAAA,kC;IAAA,yD;G;;;;;;EAXJ,wC;IAAA,+e;G;;EAAA,6C;IAAA,a;MAAA,Y;QAAA,+C;MAAA,c;QAAA,iD;MAAA,qB;QAAA,wD;MAAA,oB;QAAA,uD;MAAA,sB;QAAA,yD;MAAA,W;QAAA,8C;MAAA,c;QAAA,iD;MAAA,oB;QAAA,uD;MAAA,2B;QAAA,8D;MAAA,2B;QAAA,8D;MAAA,QAAA,uG;;G;;ECAA,gD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,8C;IAAA,iD;K;IAEI,4F;IAAa,gG;IAAe,kF;G;;EAA5B,2D;IAAA,oC;IAAA,mD;G;;EAAa,6D;IAAA,oC;IAAA,qD;G;;EAAe,sD;IAAA,oC;IAAA,8C;G;;;;;;EAFhC,0C;IAAA,6J;G;;EAAA,+C;IAAA,a;MAAA,mB;QAAA,wD;MAAA,qB;QAAA,0D;MAAA,c;QAAA,mD;MAAA,QAAA,yG;;G;;ECM+B,wC;ItEL3B,UAAa,E;IsEOb,iCAA8C,IAA9C,EtENO,GsEMP,C;G;0DAEA,oC;IAAkE,sB;MAAA,SAAkB,I;IAChF,IAAI,CAAC,MAAL,C;MACI,uBAAa,K;MACb,M;KAGJ,uBAAa,KAAM,W;EACvB,C;yDACA,oC;IAAkE,sB;MAAA,SAAkB,I;IAChF,IAAI,CAAC,MAAL,C;MACI,uBAAa,K;MACb,M;KAGJ,uBAAa,KAAM,W;EACvB,C;;;;;;;ECRJ,6C;IACiE,kBAArD,6BAAyB,0BAAzB,C;IAA2D,KlE8DnE,a;IkE9DE,+BlE+DK,WkE/DmE,SAAxE,C;G;EClBN,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,4E;IAAS,oF;IAAa,gF;G;;EAAtB,mD;IAAA,gC;IAAA,2C;G;;EAAS,uD;IAAA,gC;IAAA,+C;G;;EAAa,qD;IAAA,gC;IAAA,6C;G;;;;;;EAF1B,sC;IAAA,8I;G;;EAAA,2C;IAAA,a;MAAA,e;QAAA,gD;MAAA,mB;QAAA,oD;MAAA,iB;QAAA,kD;MAAA,QAAA,sG;;G;;ECAA,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,sF;IAAc,kF;G;;EAAd,wD;IAAA,gC;IAAA,gD;G;;EAAc,sD;IAAA,gC;IAAA,8C;G;;;;;;EAFlB,sC;IAAA,qG;G;;EAAA,2C;IAAA,a;MAAA,oB;QAAA,qD;MAAA,kB;QAAA,mD;MAAA,QAAA,sG;;G;;ECaqC,yD;IAIjC,kCAAyC,IAAzC,EAA+C,QAA/C,EAAyD,OAAzD,C;IAQA,+BAAuB,kB;IACvB,+BAA4B,kB;IAE5B,4BAA0B,kB;IAC1B,sCAAkC,kB;IAClC,uCAAmC,kB;IACnC,gCAA4B,kB;IAC5B,+BAA2B,kB;IAC3B,8BAA0B,kB;IAC1B,wCAAsE,kB;IACtE,iCAAuD,kB;IACvD,oCAA0D,kB;IAC1D,mCAAyD,kB;IACzD,gCAA6C,kB;IAC7C,mCAAgD,kB;IAChD,kCAA+C,kB;G;qDAtB/C,+B;IrFqmSO,kBAAM,eqFpmSD,QrFomSc,OAAb,C;IA6UA,Q;IAAb,wBqFj7SY,QrFi7SZ,gB;MAAa,WqFj7SD,QrFi7SZ,M;MACI,WAAY,WqFl7SW,GrFk7SG,IqFl7SA,MAAH,ErFk7SG,IqFl7SY,OAAf,CrFk7SX,C;;IqFl7SZ,gCrFm7SG,WqFn7SH,C;EACJ,C;iEAGI,qB;IAAQ,OAAc,oBAAd,kBAAc,C;G;iEACtB,4B;IAAa,wCAAgC,KAAhC,C;EAAsC,C;;uDACvD,qB;WAAA,wF;G;uDAAA,4B;IAAA,+F;G;;uDACA,qB;WAAA,wF;G;uDAAA,4B;IAAA,+F;G;;oDAEA,qB;WAAA,kF;G;oDAAA,2B;IAAA,wF;G;;8DACA,qB;WAAA,sG;G;8DAAA,mC;IAAA,oH;G;;+DACA,qB;WAAA,wG;G;+DAAA,oC;IAAA,uH;G;;wDACA,qB;WAAA,0F;G;wDAAA,6B;IAAA,kG;G;;uDACA,qB;WAAA,wF;G;uDAAA,4B;IAAA,+F;G;;sDACA,qB;WAAA,sF;G;sDAAA,2B;IAAA,4F;G;;gEACA,qB;WAAA,0G;G;gEAAA,qC;IAAA,0H;G;;yDACA,qB;WAAA,4F;G;yDAAA,8B;IAAA,qG;G;;4DACA,qB;WAAA,kG;G;4DAAA,iC;IAAA,8G;G;;2DACA,qB;WAAA,gG;G;2DAAA,gC;IAAA,2G;G;;wDACA,qB;WAAA,0F;G;wDAAA,6B;IAAA,kG;G;;2DACA,qB;WAAA,gG;G;2DAAA,gC;IAAA,2G;G;;0DACA,qB;WAAA,8F;G;0DAAA,+B;IAAA,wG;G;qDAEA,2B;IAA8B,6BAAwB,I;EAAK,C;qDAC3D,iC;IAA0C,6B;I1E1C1C,UAAa,E;IACN,G0EyCgE,CAAK,OAAL,S;I1EzChE,G0EyCuF,CAAK,KAAL,O;IAApD,e1EzCnC,G;E0EyC2G,C;qDAClH,qB;IAAoB,6BAAwB,M;EAAO,C;;;;;;;;ECxBvD,wC;WAAA,qE;G;EAAA,2D;IAAA,wF;G;;EAMyE,6B;IAAE,enFmC7B,UmFnC6B,EAAa,EAAb,C;EAAiB,C;EAD5F,8C;IAC8F,kBAAlF,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,eAA7D,C;IAAwF,KtEsDhG,a;IsEtDE,+BtEuDK,WsEvDgG,SAArG,C;G;EAEN,yD;IACkF,kBAAtE,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,KtEmDpF,a;IsEnDE,+BtEoDK,WsEpDoF,SAAzF,C;G;EC7BN,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,oE;IAAW,gE;IAAS,gE;IAAS,0E;G;;EAA7B,+C;IAAA,0B;IAAA,uC;G;;EAAW,6C;IAAA,0B;IAAA,qC;G;;EAAS,6C;IAAA,0B;IAAA,qC;G;;EAAS,kD;IAAA,0B;IAAA,0C;G;;;;;;EAFjC,gC;IAAA,kK;G;;EAAA,qC;IAAA,a;MAAA,iB;QAAA,4C;MAAA,e;QAAA,0C;MAAA,e;QAAA,0C;MAAA,oB;QAAA,+C;MAAA,QAAA,uF;;G;;;ECcA,uC;IAC0B,+B;I7EdtB,UAAa,E;wBACN,G;;I6EaiF,kBAAX,mB;IAAiB,KxEiE9F,a;IwEjEE,+BAAM,8CtFF0D,YcoE3D,WwElE8F,UtFFnC,CsFE1D,EAAN,C;G;ECMqB,8C;IAGvB,+BAAiC,IAAjC,EAAuC,QAAvC,C;IAKA,oCAAgC,kB;IAChC,mCAA+B,kB;IAC/B,kCAAqC,kB;IACrC,oCAA+B,kB;IAC/B,gCAAiC,kB;IACjC,yCAAoC,kB;G;mDATpC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;0DAEA,qB;WAAA,gG;G;0DAAA,iC;IAAA,4G;G;;yDACA,qB;WAAA,8F;G;yDAAA,gC;IAAA,yG;G;;wDACA,qB;WAAA,4F;G;wDAAA,+B;I5EVA,gCAAqB,mDAArB,IAA6B,6C;G;;0D4EW7B,qB;WAAA,gG;G;0DAAA,iC;IAAA,4G;G;;sDACA,qB;WAAA,wF;G;sDAAA,6B;I5EZA,8BAAqB,iDAArB,IAA6B,yC;G;;+D4Ea7B,qB;WAAA,0G;G;+DAAA,sC;IAAA,2H;G;yDAEA,6B;IAGmC,IAAO,I;IAAtC,oCAA+B,cAAO,cAAP,MAAO,CAAP,6B;EACnC,C;0DACA,8B;IAA0C,oCAA+B,O;EAAQ,C;sDACjF,4B;IACI,uCAAwB,MAAX,mBAAW,MAAc,KAAd,CAAqB,MAA7C,C;EACJ,C;sDACA,qC;IACI,uCAAwB,QAAX,mBAAW,MAAgB,OAAhB,EAAiC,KAAjC,CAAwC,MAAhE,C;EACJ,C;8DACA,+B;IAA+C,wCAAmC,Q;EAAS,C;8DAC3F,kC;IAA2B,qB;MAAA,QAAiB,I;IAAM,oB;MAAA,OAAgB,I;IAAQ,6B;I9EhD1E,UAAa,E;IACN,G8E+C2G,CAAK,OAAL,S;I9E/C3G,G8E+CkI,CAAK,KAAL,Q;IAA/D,0B9E/CnE,G;E8E+CuJ,C;8DAC9J,6B;IAGwC,IAAO,I;IAA3C,yCAAoC,cAAO,cAAP,MAAO,CAAP,6B;EACxC,C;+DACA,8B;IAA+C,yCAAoC,O;EAAQ,C;2DAC3F,4B;I9EvDA,UAAa,E;I8EuD4E,K9ErDrF,CADG,GACH,C;I8EqD0D,4C9EtDvD,G8EsDuD,C;EAAkC,C;;;;;;;EChCpG,4C;IACqE,kBAAzD,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,C;IAA+D,K1EuDvE,a;I0EvDE,+B1EwDK,W0ExDuE,SAA5E,C;G;ECzBN,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,wD;IAAI,wD;IAAI,wD;IAAI,wD;IAAI,wD;IAAI,8D;IAEpB,sC;G;;EAFA,yC;IAAA,2B;IAAA,iC;G;;EAAI,yC;IAAA,2B;IAAA,iC;G;;EAAI,yC;IAAA,2B;IAAA,iC;G;;EAAI,yC;IAAA,2B;IAAA,iC;G;;EAAI,yC;IAAA,2B;IAAA,iC;G;;EAAI,4C;IAAA,2B;IAAA,oC;G;EAEpB,oC;IAAA,wC;G;2DACI,oB;IAAyD,IAEtB,I;IAD/B,WADqD,QACrD,S;MAD+C,yC;;MAAA,OAExB,uBAAQ,yDAAR,C;;G;;;;;;;EAH/B,gD;IAAA,2B;IAAA,+C;MAAA,8B;KAAA,wC;G;;;;;;EAJJ,iC;IAAA,gN;G;;EAAA,sC;IAAA,a;MAAA,U;QAAA,sC;MAAA,U;QAAA,sC;MAAA,U;QAAA,sC;MAAA,U;QAAA,sC;MAAA,U;QAAA,sC;MAAA,a;QAAA,yC;MAAA,QAAA,sF;;G;;ECAA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,wD;IAAM,0D;G;;EAAN,yC;IAAA,yB;IAAA,iC;G;;EAAM,0C;IAAA,yB;IAAA,kC;G;;;;;;EAFV,+B;IAAA,0E;G;;EAAA,oC;IAAA,a;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,QAAA,oF;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,sD;IACA,oE;IACA,kE;IACA,gE;IACA,wD;IACA,8E;IACA,4E;IACA,sE;IACA,sE;IACA,sE;IACA,uE;IACA,uE;IACA,2E;IACA,6E;G;;EAbA,wC;IAAA,wB;IAAA,gC;G;;EACA,+C;IAAA,wB;IAAA,uC;G;;EACA,8C;IAAA,wB;IAAA,sC;G;;EACA,6C;IAAA,wB;IAAA,qC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;EACA,oD;IAAA,wB;IAAA,4C;G;;EACA,mD;IAAA,wB;IAAA,2C;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,kD;IAAA,wB;IAAA,0C;G;;EACA,mD;IAAA,wB;IAAA,2C;G;;;;;;EAfJ,8B;IAAA,8iB;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,mB;QAAA,4C;MAAA,kB;QAAA,2C;MAAA,iB;QAAA,0C;MAAA,a;QAAA,sC;MAAA,wB;QAAA,iD;MAAA,uB;QAAA,gD;MAAA,oB;QAAA,6C;MAAA,oB;QAAA,6C;MAAA,oB;QAAA,6C;MAAA,oB;QAAA,6C;MAAA,oB;QAAA,6C;MAAA,sB;QAAA,+C;MAAA,uB;QAAA,gD;MAAA,QAAA,mF;;G;;ECQkC,qD;IAG9B,kCAA+C,IAA/C,EAAqD,QAArD,EAA+D,uCAA/D,C;IAKA,wCAAoC,kB;G;0DAJpC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;qEAEA,qB;WAAA,+G;G;qEAAA,qC;IAAA,+H;G;EAL+D,qD;IAAE,e3FkDvB,U2FlDuB,EAAa,EAAb,C;EAAiB,C;;;;;;;ECItF,mD;IACmF,kBAAvE,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,C;IAA6E,K/EgErF,a;I+EhEE,+B/EiEK,W+EjEqF,SAA1F,C;G;EChBN,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,oE;IAAM,0E;G;;EAAN,+C;IAAA,+B;IAAA,uC;G;;EAAM,kD;IAAA,+B;IAAA,0C;G;;;;;;EAFV,qC;IAAA,wF;G;;EAAA,0C;IAAA,a;MAAA,Y;QAAA,4C;MAAA,e;QAAA,+C;MAAA,QAAA,iG;;G;;ECIkC,qD;IAG9B,kCAAgD,IAAhD,EAAsD,QAAtD,EAAgE,uCAAhE,C;G;EAAgE,qD;IAAE,e9FsDxB,U8FtDwB,EAAa,EAAb,C;EAAiB,C;;;;;;;ECMvF,oD;IAA2B,yB;MAAA,YAAqB,I;IAC4E,kBAAhH,gCAA4B,sBAA5B,EAAoD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAApD,C;IAAsH,KlFkE9H,a;IkFlEE,+BlFmEK,WkFnE8H,SAAnI,C;G;ECTwC,kE;IAI1C,oCAAoD,IAApD,EAA0D,QAA1D,EAAoE,OAApE,C;G;;;;;;;ECQgI,sC;IAAE,ajG4CxF,UiG5CwF,EAAW,EAAX,C;EAAe,C;EADrJ,wD;IACuJ,kBAA3I,oCAAgC,0BAAhC,EAA4D,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA5D,EAAwH,wBAAxH,C;IAAiJ,KpF+DzJ,a;IoF/DE,+BpFgEK,WoFhEyJ,SAA9J,C;G;EAEN,mE;IAC6I,kBAAjI,oCAAgC,0BAAhC,EAA4D,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA5D,EAAwH,OAAxH,C;IAAuI,KpF4D/I,a;IoF5DE,+BpF6DK,WoF7D+I,SAApJ,C;G;ECb0B,mD;IAG5B,kCAA8C,IAA9C,EAAoD,QAApD,EAA8D,qCAA9D,C;IAEA,2CAAuC,kB;G;;sEAAvC,qB;WAAA,mH;G;sEAAA,wC;IAAA,sI;G;EAF8D,mD;IAAE,elGmDtB,UkGnDsB,EAAa,EAAb,C;EAAiB,C;;;;;;;ECKrF,kD;IAAyB,yB;MAAA,YAAqB,I;IAC0E,kBAA5G,8BAA0B,oBAA1B,EAAgD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAhD,C;IAAkH,KtFgE1H,a;IsFhEE,+BtFiEK,WsFjE0H,SAA/H,C;G;ECP8B,wD;IAIhC,kCAAwC,IAAxC,EAA8C,QAA9C,EAAwD,OAAxD,C;IAKA,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,iCAAoC,kB;G;oDANpC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;yDAEA,qB;WAAA,6F;G;yDAAA,+B;IAAA,uG;G;;sDACA,qB;WAAA,uF;G;sDAAA,4B;IAAA,8F;G;;wDACA,qB;WAAA,2F;G;wDAAA,8B;I1FCA,+BAAqB,mDAArB,IAA6B,2C;G;;;;;;;E2FAsC,4B;IAAE,crGwC3B,UqGxC2B,EAAY,EAAZ,C;EAAgB,C;EADzF,6C;IAC2F,kBAA/E,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,cAA3D,C;IAAqF,KxF2D7F,a;IwF3DE,+BxF4DK,WwF5D6F,SAAlG,C;G;EAEN,wD;IACgF,kBAApE,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,OAA3D,C;IAA0E,KxFwDlF,a;IwFxDE,+BxFyDK,WwFzDkF,SAAvF,C;G;ECxBN,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,wD;IACA,gE;IACA,0D;IACA,0D;IACA,4D;G;;EAJA,yC;IAAA,yB;IAAA,iC;G;;EACA,6C;IAAA,yB;IAAA,qC;G;;EACA,0C;IAAA,yB;IAAA,kC;G;;EACA,0C;IAAA,yB;IAAA,kC;G;;EACA,2C;IAAA,yB;IAAA,mC;G;;;;;;EANJ,+B;IAAA,oL;G;;EAAA,oC;IAAA,a;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,c;QAAA,wC;MAAA,QAAA,qF;;G;;ECAA,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,sE;IAAW,8D;IAAO,gE;G;;EAAlB,gD;IAAA,2B;IAAA,wC;G;;EAAW,4C;IAAA,2B;IAAA,oC;G;;EAAO,6C;IAAA,2B;IAAA,qC;G;;;;;;EAFtB,iC;IAAA,wH;G;;EAAA,sC;IAAA,a;MAAA,iB;QAAA,6C;MAAA,a;QAAA,yC;MAAA,c;QAAA,0C;MAAA,QAAA,uF;;G;;ECcoD,8C;IAGhD,kCAAkC,IAAlC,EAAwC,QAAxC,EAAkD,gCAAlD,C;IAKA,gCAAiC,kB;IACjC,uCAAkC,kB;IAClC,mCAA8B,kB;IAC9B,oCAA+B,kB;IAC/B,iCAAuC,kB;IACvC,8BAA0B,kB;IAC1B,oCAA+B,kB;IAC/B,oCAA+B,kB;IAC/B,+BAA4B,kB;IAC5B,iCAAmC,kB;G;mDAbnC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;sDAEA,qB;WAAA,wF;G;sDAAA,6B;I9FDA,8BAAqB,iDAArB,IAA6B,yC;G;;6D8FE7B,qB;WAAA,sG;G;6DAAA,oC;IAAA,qH;G;;yDACA,qB;WAAA,8F;G;yDAAA,gC;IAAA,yG;G;;0DACA,qB;WAAA,gG;G;0DAAA,iC;IAAA,4G;G;;uDACA,qB;WAAA,0F;G;uDAAA,8B;IAAA,mG;G;;oDACA,qB;WAAA,oF;G;oDAAA,2B;IAAA,0F;G;;0DACA,qB;WAAA,gG;G;0DAAA,iC;IAAA,4G;G;;0DACA,qB;WAAA,gG;G;0DAAA,iC;IAAA,4G;G;;qDACA,qB;WAAA,sF;G;qDAAA,4B;IAAA,6F;G;;uDACA,qB;WAAA,0F;G;uDAAA,8B;I9FVA,+BAAqB,kDAArB,IAA6B,2C;G;8D8FY7B,2B;IAA2C,wCAAmC,I;EAAK,C;8DACnF,kC;IAA2B,qB;MAAA,QAAiB,I;IAAM,oB;MAAA,OAAgB,I;IAAQ,6B;IhGjC1E,UAAa,E;IACN,GgGgC2G,CAAK,OAAL,S;IhGhC3G,GgGgCkI,CAAK,MAAL,Q;IAA/D,0BhGhCnE,G;EgGgCwJ,C;EAjB7G,8C;IAAE,exG4CV,UwG5CU,EAAa,EAAb,C;EAAiB,C;;;;;;;ECWzE,4C;IACqE,kBAAzD,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,C;IAA+D,K5FmDvE,a;I4FnDE,+B5FoDK,W4FpDuE,SAA5E,C;G;EC7BN,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,wD;IAAM,sD;IAAK,0D;IAAO,4D;G;;EAAlB,yC;IAAA,yB;IAAA,iC;G;;EAAM,wC;IAAA,yB;IAAA,gC;G;;EAAK,0C;IAAA,yB;IAAA,kC;G;;EAAO,2C;IAAA,yB;IAAA,mC;G;;;;;;EAFtB,+B;IAAA,6I;G;;EAAA,oC;IAAA,a;MAAA,Y;QAAA,sC;MAAA,W;QAAA,qC;MAAA,a;QAAA,uC;MAAA,c;QAAA,wC;MAAA,QAAA,oF;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,sD;IACA,0D;IACA,wD;IACA,4E;IACA,8E;IACA,0E;IACA,gF;IACA,wF;IACA,sF;IACA,0F;IACA,6F;IACA,yD;G;;EAXA,wC;IAAA,wB;IAAA,gC;G;;EACA,0C;IAAA,wB;IAAA,kC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;EACA,mD;IAAA,wB;IAAA,2C;G;;EACA,oD;IAAA,wB;IAAA,4C;G;;EACA,kD;IAAA,wB;IAAA,0C;G;;EACA,qD;IAAA,wB;IAAA,6C;G;;EACA,yD;IAAA,wB;IAAA,iD;G;;EACA,wD;IAAA,wB;IAAA,gD;G;;EACA,0D;IAAA,wB;IAAA,kD;G;;EACA,2D;IAAA,wB;IAAA,mD;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;;;;;EAbJ,8B;IAAA,+f;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,c;QAAA,uC;MAAA,a;QAAA,sC;MAAA,uB;QAAA,gD;MAAA,wB;QAAA,iD;MAAA,sB;QAAA,+C;MAAA,yB;QAAA,kD;MAAA,6B;QAAA,sD;MAAA,4B;QAAA,qD;MAAA,8B;QAAA,uD;MAAA,+B;QAAA,wD;MAAA,a;QAAA,sC;MAAA,QAAA,mF;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,oE;IAAW,sE;IAAY,oE;G;;EAAvB,+C;IAAA,0B;IAAA,uC;G;;EAAW,gD;IAAA,0B;IAAA,wC;G;;EAAY,+C;IAAA,0B;IAAA,uC;G;;;;;;EAF3B,gC;IAAA,6H;G;;EAAA,qC;IAAA,a;MAAA,iB;QAAA,4C;MAAA,kB;QAAA,6C;MAAA,iB;QAAA,4C;MAAA,QAAA,qF;;G;;ECW2C,+D;IAIvC,+BAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;IAKA,yCAAmC,kB;IACnC,yCAAqC,kB;IACrC,kCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,kCAAiD,kB;G;2DARjD,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;uEAEA,qB;WAAA,kH;G;uEAAA,sC;IAAA,mI;G;;uEACA,qB;WAAA,kH;G;uEAAA,sC;IAAA,mI;G;;gEACA,qB;WAAA,oG;G;gEAAA,+B;IAAA,8G;G;;gEACA,qB;WAAA,oG;G;gEAAA,+B;IAAA,8G;G;;gEACA,qB;WAAA,oG;G;gEAAA,+B;IAAA,8G;G;mEAEA,4B;IrGzBA,UAAa,E;IqGyByE,KrGvBlF,CADG,GACH,C;IqGuBuD,4CrGxBpD,GqGwBoD,C;EAAkC,C;;;;;;EC1BjG,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,sE;IACA,4E;IACA,8E;IACA,8E;G;;EAHA,gD;IAAA,gC;IAAA,wC;G;;EACA,mD;IAAA,gC;IAAA,2C;G;;EACA,oD;IAAA,gC;IAAA,4C;G;;EACA,oD;IAAA,gC;IAAA,4C;G;;;;;;EALJ,sC;IAAA,kL;G;;EAAA,2C;IAAA,a;MAAA,Y;QAAA,6C;MAAA,e;QAAA,gD;MAAA,gB;QAAA,iD;MAAA,gB;QAAA,iD;MAAA,QAAA,mG;;G;;;EC0BqF,mC;IAAE,e/GmCzC,U+GnCyC,EAAa,EAAb,C;EAAiB,C;EADxG,oD;IAC0G,kBAA9F,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAoG,KlGsD5G,a;IkGtDE,+BlGuDK,WkGvD4G,SAAjH,C;G;EAEN,+D;IAC8F,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,KlGmDhG,a;IkGnDE,+BlGoDK,WkGpDgG,SAArG,C;G;ECvBoC,6D;IAGtC,kCAAwD,IAAxD,EAA8D,QAA9D,EAAwE,+CAAxE,C;G;kEACA,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;EAHwE,6D;IAAE,ehHoDhC,UgHpDgC,EAAa,EAAb,C;EAAiB,C;;;;;;ECT/F,mD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iD;IAAA,oD;K;IAEI,oF;IAAM,0F;G;;EAAN,uD;IAAA,uC;IAAA,+C;G;;EAAM,0D;IAAA,uC;IAAA,kD;G;;;;;;EAFV,6C;IAAA,wG;G;;EAAA,kD;IAAA,a;MAAA,Y;QAAA,oD;MAAA,e;QAAA,uD;MAAA,QAAA,iH;;G;;;ECYA,2D;IACmG,kBAAvF,wCAAoC,8BAApC,EAA6E,OAAT,QAAS,CAA7E,C;IAA6F,KrGmErG,a;IqGnEE,+BrGoEK,WqGpEqG,SAA1G,C;G;ECToC,6D;IAGtC,kCAAuD,IAAvD,EAA6D,QAA7D,EAAuE,+CAAvE,C;G;EAAuE,6D;IAAE,enHsD/B,UmHtD+B,EAAa,EAAb,C;EAAiB,C;;;;;;;ECM9F,4D;IAAmC,yB;MAAA,YAAqB,I;IACmF,kBAA/H,wCAAoC,8BAApC,EAAoE,cAAc,SAAd,WAA8B,qCAAhB,SAAgB,CAA9B,QAApE,C;IAAqI,KvGkE7I,a;IuGlEE,+BvGmEK,WuGnE6I,SAAlJ,C;G;ECH4C,sE;IAI9C,oCAAwD,IAAxD,EAA8D,QAA9D,EAAwE,OAAxE,C;IAEA,kCAA8B,kB;IAC9B,oCAAqC,kB;IACrC,yCAAoC,kB;G;;uEAFpC,qB;WAAA,2G;G;uEAAA,+B;IAAA,qH;G;;yEACA,qB;WAAA,+G;G;yEAAA,iC;IAAA,2H;G;;8EACA,qB;WAAA,yH;G;8EAAA,sC;IAAA,0I;G;qEAEA,4B;IpHoEW,kBAAX,mB;IoHpE2E,KxG2D3E,a;IwG3DiD,uCpHoEjD,MYRO,WZQmB,UAA1B,CoHpEiD,C;EAAiC,C;0EAClF,4B;IACI,4CAA6B,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAAvD,C;EACJ,C;0EACA,qC;IACI,4CAA6B,aAAX,mBAAW,MAAqB,OAArB,EAAsC,KAAtC,CAA6C,MAA1E,C;EACJ,C;0EACA,4B;I7G3BA,UAAa,E;I6G2ByE,K7GzBlF,CADG,GACH,C;I6GyBuD,4C7G1BpD,G6G0BoD,C;EAAkC,C;;;;;;EC5BjG,mD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iD;IAAA,oD;K;IAEI,oF;IACA,4F;IACA,0F;IACA,4F;IACA,0F;IACA,gG;G;;EALA,uD;IAAA,uC;IAAA,+C;G;;EACA,2D;IAAA,uC;IAAA,mD;G;;EACA,0D;IAAA,uC;IAAA,kD;G;;EACA,2D;IAAA,uC;IAAA,mD;G;;EACA,0D;IAAA,uC;IAAA,kD;G;;EACA,6D;IAAA,uC;IAAA,qD;G;;;;;;EAPJ,6C;IAAA,qT;G;;EAAA,kD;IAAA,a;MAAA,Y;QAAA,oD;MAAA,gB;QAAA,wD;MAAA,e;QAAA,uD;MAAA,gB;QAAA,wD;MAAA,e;QAAA,uD;MAAA,kB;QAAA,0D;MAAA,QAAA,iH;;G;;;ECuBmG,0C;IAAE,evHsCvD,UuHtCuD,EAAa,EAAb,C;EAAiB,C;EADtH,2D;IACwH,kBAA5G,wCAAoC,8BAApC,EAA6E,OAAT,QAAS,CAA7E,EAAuF,4BAAvF,C;IAAkH,K1GyD1H,a;I0GzDE,+B1G0DK,W0G1D0H,SAA/H,C;G;EAEN,sE;IAC4G,kBAAhG,wCAAoC,8BAApC,EAA6E,OAAT,QAAS,CAA7E,EAAuF,OAAvF,C;IAAsG,K1GsD9G,a;I0GtDE,+B1GuDK,W0GvD8G,SAAnH,C;G;EChB0B,oD;IAI5B,oCAAsC,IAAtC,EAA4C,QAA5C,EAAsD,OAAtD,C;IAEA,+BAA+B,kB;IAC/B,8BAAyB,kB;IACzB,8BAA6B,kB;IAC7B,iCAAgC,kB;G;;kDAHhC,qB;WAAA,mF;G;iDAAA,4B;I9GKA,6BAAqB,6CAArB,IAA6B,uC;G;;iD8GJ7B,qB;WAAA,iF;G;gDAAA,2B;IAAA,uF;G;;iDACA,qB;WAAA,iF;G;iDAAA,2B;I9GGA,4BAAqB,4CAArB,IAA6B,qC;G;;oD8GF7B,qB;WAAA,uF;G;oDAAA,8B;I9GEA,+BAAqB,+CAArB,IAA6B,2C;G;;;;;;E+GrBjC,iC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,+B;IAAA,kC;K;IAEI,gD;IACA,kD;IACA,sD;IACA,0D;IACA,wD;IACA,gE;IACA,wD;IACA,gE;IACA,0D;IACA,4D;G;;EATA,qC;IAAA,qB;IAAA,6B;G;;EACA,sC;IAAA,qB;IAAA,8B;G;;EACA,wC;IAAA,qB;IAAA,gC;G;;EACA,0C;IAAA,qB;IAAA,kC;G;;EACA,yC;IAAA,qB;IAAA,iC;G;;EACA,6C;IAAA,qB;IAAA,qC;G;;EACA,yC;IAAA,qB;IAAA,iC;G;;EACA,6C;IAAA,qB;IAAA,qC;G;;EACA,0C;IAAA,qB;IAAA,kC;G;;EACA,2C;IAAA,qB;IAAA,mC;G;;;;;;EAXJ,2B;IAAA,qV;G;;EAAA,gC;IAAA,a;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,e;QAAA,qC;MAAA,iB;QAAA,uC;MAAA,gB;QAAA,sC;MAAA,oB;QAAA,0C;MAAA,gB;QAAA,sC;MAAA,oB;QAAA,0C;MAAA,iB;QAAA,uC;MAAA,kB;QAAA,wC;MAAA,QAAA,6E;;G;;ECAA,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,sD;IAAO,4D;G;;EAAP,wC;IAAA,uB;IAAA,gC;G;;EAAO,2C;IAAA,uB;IAAA,mC;G;;;;;;EAFX,6B;IAAA,0E;G;;EAAA,kC;IAAA,a;MAAA,a;QAAA,qC;MAAA,gB;QAAA,wC;MAAA,QAAA,+E;;G;;;ECsB+D,wB;IAAE,kB3HuCnB,U2HvCmB,EAAgB,EAAhB,C;EAAoB,C;EADrF,yC;IACuF,kBAA3E,sBAAkB,YAAlB,EAAyC,OAAT,QAAS,CAAzC,EAAmD,UAAnD,C;IAAiF,K9G0DzF,a;I8G1DE,+B9G2DK,W8G3DyF,SAA9F,C;G;EAEN,oD;IACwE,kBAA5D,sBAAkB,YAAlB,EAAyC,OAAT,QAAS,CAAzC,EAAmD,OAAnD,C;IAAkE,K9GuD1E,a;I8GvDE,+B9GwDK,W8GxD0E,SAA/E,C;G;ECpBmB,yC;IAErB,qB;MpHNA,UAAa,E;MoHMb,QpHLO,G;KoHMP,8BAA8B,IAA9B,EAAoC,KAApC,C;G;iDAEA,2B;IAAoC,oBAAU,I;EAAK,C;iDACnD,kC;IAAsB,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IpHVzD,UAAa,E;IACN,GoHSyE,CAAK,OAAL,S;IpHTzE,GoHSgG,CAAK,MAAL,Q;IAAtC,oBpHT1D,G;EoHSsH,C;;;;;;;ECEjI,gC;IAC8C,kBAAlC,uBAAmB,aAAnB,C;IAAwC,KhHkEhD,a;IgHlEE,+BhHmEK,WgHnEgD,SAArD,C;G;ECP0B,mD;IAG5B,mCAA0C,IAA1C,EAAgD,QAAhD,C;IAKA,0CAAsC,kB;G;wDAJtC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;qEAEA,qB;WAAA,iH;G;qEAAA,uC;IAAA,mI;G;;;;;;ECfJ,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,gE;IACA,0E;IACA,sE;IACA,wE;IACA,gF;IACA,4E;IACA,kE;IACA,0E;IACA,kE;IACA,wF;IACA,qF;IACA,2F;IACA,uF;G;;EAZA,6C;IAAA,6B;IAAA,qC;G;;EACA,kD;IAAA,6B;IAAA,0C;G;;EACA,gD;IAAA,6B;IAAA,wC;G;;EACA,iD;IAAA,6B;IAAA,yC;G;;EACA,qD;IAAA,6B;IAAA,6C;G;;EACA,mD;IAAA,6B;IAAA,2C;G;;EACA,8C;IAAA,6B;IAAA,sC;G;;EACA,kD;IAAA,6B;IAAA,0C;G;;EACA,8C;IAAA,6B;IAAA,sC;G;;EACA,yD;IAAA,6B;IAAA,iD;G;;EACA,uD;IAAA,6B;IAAA,+C;G;;EACA,0D;IAAA,6B;IAAA,kD;G;;EACA,wD;IAAA,6B;IAAA,gD;G;;;;;;EAdJ,mC;IAAA,ujB;G;;EAAA,wC;IAAA,a;MAAA,Y;QAAA,0C;MAAA,iB;QAAA,+C;MAAA,e;QAAA,6C;MAAA,gB;QAAA,8C;MAAA,oB;QAAA,kD;MAAA,kB;QAAA,gD;MAAA,a;QAAA,2C;MAAA,iB;QAAA,+C;MAAA,a;QAAA,2C;MAAA,wB;QAAA,sD;MAAA,sB;QAAA,oD;MAAA,yB;QAAA,uD;MAAA,uB;QAAA,qD;MAAA,QAAA,6F;;G;;;ECeA,iD;IAC+E,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,KnHgEjF,a;ImHhEE,+BnHiEK,WmHjEiF,SAAtF,C;G;ECNgE,4D;IAIlE,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,mCAA+B,kB;IAC/B,gCAAsC,kB;IACtC,kCAA8B,kB;IAC9B,iCAAwC,kB;G;wDATxC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;6DAEA,qB;WAAA,iG;G;6DAAA,+B;IAAA,2G;G;;0DACA,qB;WAAA,2F;G;0DAAA,4B;IAAA,kG;G;;8DACA,qB;WAAA,mG;G;8DAAA,gC;IAAA,8G;G;;2DACA,qB;WAAA,6F;G;2DAAA,6B;IvHDA,8BAAqB,sDAArB,IAA6B,yC;G;;6DuHE7B,qB;WAAA,iG;G;6DAAA,+B;IAAA,2G;G;;4DACA,qB;WAAA,+F;G;4DAAA,8B;IvHHA,+BAAqB,uDAArB,IAA6B,2C;G;;;;;;EwHrBjC,0C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,kE;IAAM,oE;IAAO,sE;G;;EAAb,8C;IAAA,8B;IAAA,sC;G;;EAAM,+C;IAAA,8B;IAAA,uC;G;;EAAO,gD;IAAA,8B;IAAA,wC;G;;;;;;EAFjB,oC;IAAA,4H;G;;EAAA,yC;IAAA,a;MAAA,Y;QAAA,2C;MAAA,a;QAAA,4C;MAAA,c;QAAA,6C;MAAA,QAAA,8F;;G;;ECAA,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,gE;IACA,gF;IACA,8E;IACA,0E;G;;EAHA,6C;IAAA,6B;IAAA,qC;G;;EACA,qD;IAAA,6B;IAAA,6C;G;;EACA,oD;IAAA,6B;IAAA,4C;G;;EACA,kD;IAAA,6B;IAAA,0C;G;;;;;;EALJ,mC;IAAA,+K;G;;EAAA,wC;IAAA,a;MAAA,Y;QAAA,0C;MAAA,oB;QAAA,kD;MAAA,mB;QAAA,iD;MAAA,iB;QAAA,+C;MAAA,QAAA,6F;;G;;ECAA,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,4E;IAAU,4E;IAAU,wE;G;;EAApB,mD;IAAA,+B;IAAA,2C;G;;EAAU,mD;IAAA,+B;IAAA,2C;G;;EAAU,iD;IAAA,+B;IAAA,yC;G;;;;;;EAFxB,qC;IAAA,sI;G;;EAAA,0C;IAAA,a;MAAA,gB;QAAA,gD;MAAA,gB;QAAA,gD;MAAA,c;QAAA,8C;MAAA,QAAA,+F;;G;;;ECwB+E,gC;IAAE,erIqCnC,UqIrCmC,EAAa,EAAb,C;EAAiB,C;EADlG,iD;IACoG,kBAAxF,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,EAAmE,kBAAnE,C;IAA8F,KxHwDtG,a;IwHxDE,+BxHyDK,WwHzDsG,SAA3G,C;G;EAEN,4D;IACwF,kBAA5E,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,EAAmE,OAAnE,C;IAAkF,KxHqD1F,a;IwHrDE,+BxHsDK,WwHtD0F,SAA/F,C;G;ECjB+B,wD;IAGjC,kCAAqD,IAArD,EAA2D,QAA3D,EAAqE,0CAArE,C;IAKA,iCAAyB,kB;IACzB,iCAAkC,kB;IAClC,kCAA8B,kB;IAC9B,kCAA2B,kB;IAC3B,+BAAgC,kB;IAChC,wCAAsD,kB;IACtD,8BAAyB,kB;IACzB,kCAAiD,kB;IACjD,+BAA0B,kB;G;6DAZ1B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;iEAEA,qB;WAAA,oG;G;iEAAA,8B;IAAA,6G;G;;iEACA,qB;WAAA,oG;G;iEAAA,8B;IAAA,6G;G;;kEACA,qB;WAAA,sG;G;kEAAA,+B;IAAA,gH;G;;kEACA,qB;WAAA,sG;G;iEAAA,+B;IAAA,gH;G;;+DACA,qB;WAAA,gG;G;+DAAA,4B;IAAA,uG;G;;wEACA,qB;WAAA,kH;G;wEAAA,qC;I5HFA,sCAAqB,mEAArB,IAA6B,yD;G;;8D4HG7B,qB;WAAA,8F;G;6DAAA,2B;IAAA,oG;G;;kEACA,qB;WAAA,sG;G;kEAAA,+B;IAAA,gH;G;;+DACA,qB;WAAA,gG;G;8DAAA,4B;IAAA,uG;G;6DAEA,wB;IAA6B,oCAAU,CAAV,C;EAAY,C;6DACzC,wB;IAA8B,oCAAU,CAAV,C;EAAY,C;6DAC1C,4B;IrI2DW,kBAAX,mB;IqI3DqE,KzHkDrE,a;IyHlD8C,oCrI2D9C,MYRO,WZQmB,UAA1B,CqI3D8C,C;EAA8B,C;2DAC5E,4B;IrI0DW,kBAAX,mB;IqI1DiE,KzHiDjE,a;IyHjD4C,kCrI0D5C,MYRO,WZQmB,UAA1B,CqI1D4C,C;EAA4B,C;EAlBH,wD;IAAE,iBtIgD7B,UsIhD6B,EAAe,EAAf,C;EAAmB,C;;;;;;ECb9F,kD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gD;IAAA,mD;K;IAEI,gF;IAAK,oF;IAAO,gF;IAAK,sF;G;;EAAjB,qD;IAAA,sC;IAAA,6C;G;;EAAK,uD;IAAA,sC;IAAA,+C;G;;EAAO,qD;IAAA,sC;IAAA,6C;G;;EAAK,wD;IAAA,sC;IAAA,gD;G;;;;;;EAFrB,4C;IAAA,gM;G;;EAAA,iD;IAAA,a;MAAA,W;QAAA,kD;MAAA,a;QAAA,oD;MAAA,W;QAAA,kD;MAAA,c;QAAA,qD;MAAA,QAAA,2G;;G;;ECAA,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,0E;IACA,wG;IACA,oG;IACA,0G;IACA,kF;IACA,4E;G;;EALA,kD;IAAA,kC;IAAA,0C;G;;EACA,iE;IAAA,kC;IAAA,yD;G;;EACA,+D;IAAA,kC;IAAA,uD;G;;EACA,kE;IAAA,kC;IAAA,0D;G;;EACA,sD;IAAA,kC;IAAA,8C;G;;EACA,mD;IAAA,kC;IAAA,2C;G;;;;;;EAPJ,wC;IAAA,oT;G;;EAAA,6C;IAAA,a;MAAA,Y;QAAA,+C;MAAA,2B;QAAA,8D;MAAA,yB;QAAA,4D;MAAA,4B;QAAA,+D;MAAA,gB;QAAA,mD;MAAA,a;QAAA,gD;MAAA,QAAA,uG;;G;;;ECuBA,sD;IACyF,kBAA7E,mCAA+B,yBAA/B,EAAmE,OAAT,QAAS,CAAnE,C;IAAmF,K5HwD3F,a;I4HxDE,+B5HyDK,W4HzD2F,SAAhG,C;G;EChBoD,iD;IAGtD,kCAAmC,IAAnC,EAAyC,QAAzC,EAAmD,mCAAnD,C;IAKA,6BAAyB,kB;G;sDAJzB,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;sDAEA,qB;WAAA,qF;G;sDAAA,0B;IAAA,0F;G;EALmD,iD;IAAE,e1IkDX,U0IlDW,EAAa,EAAb,C;EAAiB,C;;;;;;ECX1E,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,4D;IAAM,0D;G;;EAAN,2C;IAAA,2B;IAAA,mC;G;;EAAM,0C;IAAA,2B;IAAA,kC;G;;;;;;EAFV,iC;IAAA,4E;G;;EAAA,sC;IAAA,a;MAAA,Y;QAAA,wC;MAAA,W;QAAA,uC;MAAA,QAAA,yF;;G;;;ECeA,+C;IAC2E,kBAA/D,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,C;IAAqE,K/HgE7E,a;I+HhEE,+B/HiEK,W+HjE6E,SAAlF,C;G;ECNqC,+D;IAIvC,kCAA+C,IAA/C,EAAqD,QAArD,EAA+D,OAA/D,C;IAKA,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,gCAA4B,kB;IAC5B,iCAA6B,kB;IAC7B,+BAAyC,kB;IACzC,kCAA8B,kB;IAC9B,gCAA2C,kB;G;2DAV3C,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;gEAEA,qB;WAAA,oG;G;gEAAA,+B;IAAA,8G;G;;6DACA,qB;WAAA,8F;G;6DAAA,4B;IAAA,qG;G;;8DACA,qB;WAAA,gG;G;8DAAA,6B;IAAA,wG;G;;+DACA,qB;WAAA,kG;G;+DAAA,8B;IAAA,2G;G;;8DACA,qB;WAAA,+F;G;8DAAA,6B;InIFA,6BAAqB,yDAArB,IAA6B,yC;G;;gEmIG7B,qB;WAAA,oG;G;gEAAA,+B;IAAA,8G;G;;+DACA,qB;WAAA,iG;G;+DAAA,8B;InIJA,8BAAqB,0DAArB,IAA6B,2C;G;;;;;;EoIrBjC,6C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAEI,0E;G;;EAAA,kD;IAAA,iC;IAAA,0C;G;;;;;;EAFJ,uC;IAAA,iD;G;;EAAA,4C;IAAA,a;MAAA,a;QAAA,+C;MAAA,QAAA,oG;;G;;ECAA,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,sE;IACA,wE;IACA,8E;IACA,oF;IACA,gF;IACA,4E;IACA,0E;IACA,8E;G;;EAPA,gD;IAAA,gC;IAAA,wC;G;;EACA,iD;IAAA,gC;IAAA,yC;G;;EACA,oD;IAAA,gC;IAAA,4C;G;;EACA,uD;IAAA,gC;IAAA,+C;G;;EACA,qD;IAAA,gC;IAAA,6C;G;;EACA,mD;IAAA,gC;IAAA,2C;G;;EACA,kD;IAAA,gC;IAAA,0C;G;;EACA,oD;IAAA,gC;IAAA,4C;G;;;;;;EATJ,sC;IAAA,iW;G;;EAAA,2C;IAAA,a;MAAA,Y;QAAA,6C;MAAA,a;QAAA,8C;MAAA,gB;QAAA,iD;MAAA,mB;QAAA,oD;MAAA,iB;QAAA,kD;MAAA,e;QAAA,gD;MAAA,c;QAAA,+C;MAAA,gB;QAAA,iD;MAAA,QAAA,mG;;G;;ECAA,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,kF;IAAU,kF;IAAU,8E;G;;EAApB,sD;IAAA,kC;IAAA,8C;G;;EAAU,sD;IAAA,kC;IAAA,8C;G;;EAAU,oD;IAAA,kC;IAAA,4C;G;;;;;;EAFxB,wC;IAAA,+I;G;;EAAA,6C;IAAA,a;MAAA,gB;QAAA,mD;MAAA,gB;QAAA,mD;MAAA,c;QAAA,iD;MAAA,QAAA,qG;;G;;;ECyBqF,mC;IAAE,ajJoCzC,UiJpCyC,EAAW,EAAX,C;EAAe,C;EADtG,oD;IACwG,kBAA5F,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAkG,KpIuD1G,a;IoIvDE,+BpIwDK,WoIxD0G,SAA/G,C;G;EAEN,+D;IAC8F,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,KpIoDhG,a;IoIpDE,+BpIqDK,WoIrDgG,SAArG,C;G;ECpB4D,0D;IAI9D,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,gCAA4B,kB;IAC5B,iCAA6B,kB;IAC7B,kCAA8B,kB;G;sDAR9B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;2DAEA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;wDACA,qB;WAAA,yF;G;wDAAA,4B;IAAA,gG;G;;yDACA,qB;WAAA,2F;G;yDAAA,6B;IAAA,mG;G;;0DACA,qB;WAAA,6F;G;0DAAA,8B;IAAA,sG;G;;2DACA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;;;;;ECrBJ,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,4D;IACA,kE;IACA,oE;IACA,8D;IACA,gE;IACA,oE;IACA,oE;G;;EANA,2C;IAAA,2B;IAAA,mC;G;;EACA,8C;IAAA,2B;IAAA,sC;G;;EACA,+C;IAAA,2B;IAAA,uC;G;;EACA,4C;IAAA,2B;IAAA,oC;G;;EACA,6C;IAAA,2B;IAAA,qC;G;;EACA,+C;IAAA,2B;IAAA,uC;G;;EACA,+C;IAAA,2B;IAAA,uC;G;;;;;;EARJ,iC;IAAA,8Q;G;;EAAA,sC;IAAA,a;MAAA,Y;QAAA,wC;MAAA,e;QAAA,2C;MAAA,gB;QAAA,4C;MAAA,a;QAAA,yC;MAAA,c;QAAA,0C;MAAA,gB;QAAA,4C;MAAA,gB;QAAA,4C;MAAA,QAAA,yF;;G;;;ECuB2E,8B;IAAE,iBpJsC/B,UoJtC+B,EAAe,EAAf,C;EAAmB,C;EADhG,+C;IACkG,kBAAtF,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,gBAA/D,C;IAA4F,KvIyDpG,a;IuIzDE,+BvI0DK,WuI1DoG,SAAzG,C;G;EAEN,0D;IACoF,kBAAxE,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,OAA/D,C;IAA8E,KvIsDtF,a;IuItDE,+BvIuDK,WuIvDsF,SAA3F,C;G;EClB2B,qD;IAI7B,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,sCAA2C,kB;IAC3C,oCAAuC,kB;IACvC,mCAA+B,kB;IAC/B,mCAAqC,kB;IACrC,8BAA0B,kB;IAC1B,iCAAiC,kB;IACjC,4BAAoB,kB;IACpB,4BAAoB,kB;IACpB,4BAAoB,kB;IACpB,iCAAyB,kB;IACzB,8BAA2B,kB;IAC3B,4BAAoB,kB;IACpB,4BAAoB,kB;IACpB,sCAAkC,kB;G;iDAjBlC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;0DAEA,qB;WAAA,kG;G;0DAAA,mC;I3IIA,oCAAqB,qDAArB,IAA6B,qD;G;;wD2IH7B,qB;WAAA,8F;G;wDAAA,iC;I3IGA,kCAAqB,mDAArB,IAA6B,iD;G;;uD2IF7B,qB;WAAA,4F;G;uDAAA,gC;IAAA,uG;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;I3ICA,iCAAqB,kDAArB,IAA6B,+C;G;;kD2IA7B,qB;WAAA,kF;G;kDAAA,2B;IAAA,wF;G;;qDACA,qB;WAAA,wF;G;qDAAA,8B;I3IDA,+BAAqB,gDAArB,IAA6B,2C;G;;gD2IE7B,qB;WAAA,8E;G;;gDACA,qB;WAAA,8E;G;;gDACA,qB;WAAA,8E;G;;qDACA,qB;WAAA,wF;G;;kDACA,qB;WAAA,kF;G;iDAAA,2B;I3INA,4BAAqB,6CAArB,IAA6B,qC;G;;gD2IO7B,qB;WAAA,8E;G;;gDACA,qB;WAAA,8E;G;;0DACA,qB;WAAA,kG;G;0DAAA,mC;IAAA,gH;G;4CAEA,wB;IAAW,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;4CACtD,wB;IAAyB,wBAAmB,C;EAAE,C;4CAC9C,wB;InJDA,IAAI,EmJC8B,CAAL,cAAQ,EnJDjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;KmJDgC,wBAAmB,C;EAAE,C;4CAC/D,wB;IAAW,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;4CACtD,wB;IAAyB,wBAAmB,C;EAAE,C;4CAC9C,wB;InJJA,IAAI,EmJI8B,CAAL,cAAQ,EnJJjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;KmJEgC,wBAAmB,C;EAAE,C;4CAC/D,wB;IAAW,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;4CACtD,wB;IAAyB,wBAAmB,C;EAAE,C;4CAC9C,wB;InJPA,IAAI,EmJO8B,CAAL,cAAQ,EnJPjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;KmJKgC,wBAAmB,C;EAAE,C;iDAC/D,wB;InJRA,IAAI,CmJQ8B,UAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,EAArC,EAAyC,gBAAS,CAAT,CnJR3E,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;KmJM+E,6BAAwB,C;EAAE,C;4CACnH,wB;IAAW,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;4CACtD,wB;IAAyB,wBAAmB,C;EAAE,C;4CAC9C,wB;InJXA,IAAI,EmJW8B,CAAL,cAAQ,EnJXjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;KmJSgC,wBAAmB,C;EAAE,C;4CAC/D,wB;IAAW,iB;MAAA,IAAY,M;IAAU,wBAAmB,C;EAAE,C;4CACtD,wB;IAAyB,wBAAmB,C;EAAE,C;4CAC9C,wB;InJdA,IAAI,EmJc8B,CAAL,cAAQ,EnJdjC,CAAJ,C;MACI,cAda,qB;MAeb,MAAM,8BAAyB,OAAQ,WAAjC,C;KmJYgC,wBAAmB,C;EAAE,C;;;;;;EC5CxC,oD;IAD3B,e;IAC4B,oC;IAD5B,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,uEAAQ,SAAR,C;IACA,qEAAO,QAAP,C;IACA,2EAAU,YAAV,C;IACA,uEAAQ,UAAR,C;IACA,iFAAa,eAAb,C;IACA,+EAAY,cAAZ,C;G;;SANwB,Y;MAAA,+B;K;;;EACxB,gD;IAAA,6B;IAAA,wC;G;;EACA,+C;IAAA,6B;IAAA,uC;G;;EACA,kD;IAAA,6B;IAAA,0C;G;;EACA,gD;IAAA,6B;IAAA,wC;G;;EACA,qD;IAAA,6B;IAAA,6C;G;;EACA,oD;IAAA,6B;IAAA,4C;G;wCAEA,Y;IAAkC,qB;G;;;;;;EATtC,mC;IAAA,iQ;G;;EAAA,wC;IAAA,a;MAAA,e;QAAA,6C;MAAA,c;QAAA,4C;MAAA,iB;QAAA,+C;MAAA,e;QAAA,6C;MAAA,oB;QAAA,kD;MAAA,mB;QAAA,iD;MAAA,QAAA,sF;;G;;ECCyB,kD;IADzB,e;IAC0B,oC;IAD1B,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,uEAAU,YAAV,C;IACA,iEAAO,QAAP,C;IACA,mEAAQ,UAAR,C;IACA,mEAAQ,SAAR,C;IACA,qEAAS,UAAT,C;G;;SALsB,Y;MAAA,+B;K;;;EACtB,gD;IAAA,2B;IAAA,wC;G;;EACA,6C;IAAA,2B;IAAA,qC;G;;EACA,8C;IAAA,2B;IAAA,sC;G;;EACA,8C;IAAA,2B;IAAA,sC;G;;EACA,+C;IAAA,2B;IAAA,uC;G;sCAEA,Y;IAAkC,qB;G;;;;;;EARtC,iC;IAAA,uM;G;;EAAA,sC;IAAA,a;MAAA,iB;QAAA,6C;MAAA,c;QAAA,0C;MAAA,e;QAAA,2C;MAAA,e;QAAA,2C;MAAA,gB;QAAA,4C;MAAA,QAAA,oF;;G;;ECCwB,iD;IADxB,e;IACyB,oC;IADzB,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,yDAAI,KAAJ,C;IACA,uEAAW,aAAX,C;IACA,+DAAO,QAAP,C;IACA,6EAAc,gBAAd,C;G;;SAJqB,Y;MAAA,+B;K;;;EACrB,yC;IAAA,0B;IAAA,iC;G;;EACA,gD;IAAA,0B;IAAA,wC;G;;EACA,4C;IAAA,0B;IAAA,oC;G;;EACA,mD;IAAA,0B;IAAA,2C;G;qCAEA,Y;IAAkC,qB;G;;;;;;EAPtC,gC;IAAA,+J;G;;EAAA,qC;IAAA,a;MAAA,W;QAAA,sC;MAAA,kB;QAAA,6C;MAAA,c;QAAA,yC;MAAA,qB;QAAA,gD;MAAA,QAAA,mF;;G;;ECCsB,+C;IADtB,e;IACuB,oC;IADvB,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,iEAAU,YAAV,C;IACA,2DAAO,QAAP,C;IACA,6DAAQ,UAAR,C;IACA,uEAAa,eAAb,C;IACA,qEAAY,cAAZ,C;IACA,qEAAY,cAAZ,C;G;;SANmB,Y;MAAA,+B;K;;;EACnB,6C;IAAA,wB;IAAA,qC;G;;EACA,0C;IAAA,wB;IAAA,kC;G;;EACA,2C;IAAA,wB;IAAA,mC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,+C;IAAA,wB;IAAA,uC;G;;EACA,+C;IAAA,wB;IAAA,uC;G;mCAEA,Y;IAAkC,qB;G;;;;;;EATtC,8B;IAAA,uO;G;;EAAA,mC;IAAA,a;MAAA,iB;QAAA,0C;MAAA,c;QAAA,uC;MAAA,e;QAAA,wC;MAAA,oB;QAAA,6C;MAAA,mB;QAAA,4C;MAAA,mB;QAAA,4C;MAAA,QAAA,iF;;G;;ECCoB,6C;IADpB,e;IACqB,oC;IADrB,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,6DAAU,WAAV,C;IACA,mDAAK,MAAL,C;IACA,mEAAa,cAAb,C;IACA,6EAAkB,qBAAlB,C;IACA,2FAAyB,6BAAzB,C;IACA,qFAAsB,0BAAtB,C;IACA,mEAAa,gBAAb,C;IACA,6EAAkB,sBAAlB,C;IACA,+EAAmB,uBAAnB,C;IACA,qFAAsB,2BAAtB,C;IACA,kFAAoB,yBAApB,C;IACA,oFAAqB,yBAArB,C;IACA,oFAAqB,yBAArB,C;IACA,0FAAwB,6BAAxB,C;IACA,sFAAsB,2BAAtB,C;IACA,gGAA2B,gCAA3B,C;IACA,8FAA0B,+BAA1B,C;IACA,0EAAgB,mBAAhB,C;IACA,4EAAiB,qBAAjB,C;IACA,sFAAsB,0BAAtB,C;IACA,oFAAqB,yBAArB,C;IACA,oFAAqB,yBAArB,C;IACA,gEAAW,cAAX,C;IACA,kEAAY,eAAZ,C;IACA,kEAAY,eAAZ,C;IACA,kEAAY,eAAZ,C;IACA,kEAAY,eAAZ,C;IACA,gEAAW,cAAX,C;IACA,gEAAW,cAAX,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,0DAAQ,WAAR,C;IACA,4DAAS,YAAT,C;IACA,4DAAS,YAAT,C;IACA,4DAAS,YAAT,C;G;;SAzCiB,Y;MAAA,+B;K;;;EACjB,2C;IAAA,sB;IAAA,mC;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,mD;IAAA,sB;IAAA,2C;G;;EACA,0D;IAAA,sB;IAAA,kD;G;;EACA,uD;IAAA,sB;IAAA,+C;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,mD;IAAA,sB;IAAA,2C;G;;EACA,oD;IAAA,sB;IAAA,4C;G;;EACA,uD;IAAA,sB;IAAA,+C;G;;EACA,qD;IAAA,sB;IAAA,6C;G;;EACA,sD;IAAA,sB;IAAA,8C;G;;EACA,sD;IAAA,sB;IAAA,8C;G;;EACA,yD;IAAA,sB;IAAA,iD;G;;EACA,uD;IAAA,sB;IAAA,+C;G;;EACA,4D;IAAA,sB;IAAA,oD;G;;EACA,2D;IAAA,sB;IAAA,mD;G;;EACA,iD;IAAA,sB;IAAA,yC;G;;EACA,kD;IAAA,sB;IAAA,0C;G;;EACA,uD;IAAA,sB;IAAA,+C;G;;EACA,sD;IAAA,sB;IAAA,8C;G;;EACA,sD;IAAA,sB;IAAA,8C;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;iCAEA,Y;IAAkC,qB;G;;;;;;EA5CtC,4B;IAAA,mmD;G;;EAAA,iC;IAAA,a;MAAA,iB;QAAA,wC;MAAA,Y;QAAA,mC;MAAA,oB;QAAA,2C;MAAA,yB;QAAA,gD;MAAA,gC;QAAA,uD;MAAA,6B;QAAA,oD;MAAA,oB;QAAA,2C;MAAA,yB;QAAA,gD;MAAA,0B;QAAA,iD;MAAA,6B;QAAA,oD;MAAA,2B;QAAA,kD;MAAA,4B;QAAA,mD;MAAA,4B;QAAA,mD;MAAA,+B;QAAA,sD;MAAA,6B;QAAA,oD;MAAA,kC;QAAA,yD;MAAA,iC;QAAA,wD;MAAA,uB;QAAA,8C;MAAA,wB;QAAA,+C;MAAA,6B;QAAA,oD;MAAA,4B;QAAA,mD;MAAA,4B;QAAA,mD;MAAA,kB;QAAA,yC;MAAA,mB;QAAA,0C;MAAA,mB;QAAA,0C;MAAA,mB;QAAA,0C;MAAA,mB;QAAA,0C;MAAA,kB;QAAA,yC;MAAA,kB;QAAA,yC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,QAAA,+E;;G;;ECCmB,4C;IADnB,e;IACoB,oC;IADpB,iB;IAAA,uB;G;EAAA,+B;IAAA,kC;K;IAEI,qDAAO,QAAP,C;IACA,iDAAK,MAAL,C;IACA,+DAAY,cAAZ,C;G;;SAHgB,Y;MAAA,+B;K;;;EAChB,uC;IAAA,qB;IAAA,+B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,4C;IAAA,qB;IAAA,oC;G;gCAEA,Y;IAAkC,qB;G;;;;;;EANtC,2B;IAAA,uG;G;;EAAA,gC;IAAA,a;MAAA,c;QAAA,oC;MAAA,Y;QAAA,kC;MAAA,mB;QAAA,yC;MAAA,QAAA,8E;;G;;;EC8BiE,yB;IAAE,e5J6BrB,U4J7BqB,EAAa,EAAb,C;EAAiB,C;EADpF,0C;IACsF,kBAA1E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAgF,K/IgDxF,a;I+IhDE,+B/IiDK,W+IjDwF,SAA7F,C;G;EAEN,qD;IAC0E,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,K/I6C5E,a;I+I7CE,+B/I8CK,W+I9C4E,SAAjF,C;G;EC5B+B,yD;IAIjC,kCAAyC,IAAzC,EAA+C,QAA/C,EAAyD,OAAzD,C;IACA,oCAA4B,kB;IAC5B,8BAAyB,kB;IACzB,iCAA4B,kB;IAC5B,+BAAuB,kB;G;;4DAHvB,qB;WAAA,kG;G;;sDACA,qB;WAAA,sF;G;sDAAA,2B;IAAA,4F;G;;yDACA,qB;WAAA,4F;G;yDAAA,8B;IAAA,qG;G;;uDACA,qB;WAAA,wF;G;uDAAA,4B;IAAA,+F;G;wDAEA,wB;IAAmB,iB;MAAA,IAAY,M;IAAU,gCAA2B,C;EAAE,C;wDACtE,wB;IAAgC,gCAA2B,C;EAAE,C;;;;;;;ECIiD,6B;IAAE,c9JuCtE,U8JvCsE,EAAY,EAAZ,C;EAAgB,C;EADpI,+C;IAAsB,yB;MAAA,YAAqB,I;IAC2F,kBAA1H,2BAAuB,iBAAvB,EAA0C,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA1C,EAAsG,eAAtG,C;IAAgI,KjJ0DxI,a;IiJ1DE,+BjJ2DK,WiJ3DwI,SAA7I,C;G;EAEN,0D;IAA+B,yB;MAAA,YAAqB,I;IACuE,kBAA/G,2BAAuB,iBAAvB,EAA0C,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA1C,EAAsG,OAAtG,C;IAAqH,KjJuD7H,a;IiJvDE,+BjJwDK,WiJxD6H,SAAlI,C;G;ECjBmC,6D;IAIrC,kCAA8C,IAA9C,EAAoD,QAApD,EAA8D,OAA9D,C;IAKA,8BAAyB,kB;IACzB,8BAAyB,kB;G;yDALzB,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;0DAEA,qB;WAAA,0F;G;0DAAA,2B;IAAA,gG;G;;0DACA,qB;WAAA,0F;G;0DAAA,2B;IAAA,gG;G;;;;;;EClBJ,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,oE;IACA,oE;IACA,sF;IACA,oF;G;;EAHA,+C;IAAA,+B;IAAA,uC;G;;EACA,+C;IAAA,+B;IAAA,uC;G;;EACA,wD;IAAA,+B;IAAA,gD;G;;EACA,uD;IAAA,+B;IAAA,+C;G;;;;;;EALJ,qC;IAAA,oL;G;;EAAA,0C;IAAA,a;MAAA,Y;QAAA,4C;MAAA,Y;QAAA,4C;MAAA,qB;QAAA,qD;MAAA,oB;QAAA,oD;MAAA,QAAA,gG;;G;;;ECoBiF,iC;IAAE,cjKyCrC,UiKzCqC,EAAY,EAAZ,C;EAAgB,C;EADnG,kD;IACqG,kBAAzF,+BAA2B,qBAA3B,EAA2D,OAAT,QAAS,CAA3D,EAAqE,mBAArE,C;IAA+F,KpJ4DvG,a;IoJ5DE,+BpJ6DK,WoJ7DuG,SAA5G,C;G;EAEN,6D;IAC0F,kBAA9E,+BAA2B,qBAA3B,EAA2D,OAAT,QAAS,CAA3D,EAAqE,OAArE,C;IAAoF,KpJyD5F,a;IoJzDE,+BpJ0DK,WoJ1D4F,SAAjG,C;G;ECV8B,uD;IAGhC,kCAAmD,IAAnD,EAAyD,QAAzD,EAAmE,yCAAnE,C;IAKA,oCAAqC,kB;IACrC,wCAA0D,kB;IAC1D,kCAAmC,kB;IACnC,+BAAgC,kB;IAChC,uCAAwD,kB;G;4DARxD,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;mEAEA,qB;WAAA,yG;G;mEAAA,iC;IAAA,qH;G;;uEACA,qB;WAAA,iH;G;uEAAA,qC;IxJDA,sCAAqB,kEAArB,IAA6B,yD;G;;iEwJE7B,qB;WAAA,qG;G;iEAAA,+B;IAAA,+G;G;;8DACA,qB;WAAA,+F;G;8DAAA,4B;IAAA,sG;G;;sEACA,qB;WAAA,+G;G;sEAAA,oC;IxJJA,qCAAqB,iEAArB,IAA6B,uD;G;+DwJM7B,4B;IjK8DW,kBAAX,mB;IiK9D2E,KrJqD3E,a;IqJrDiD,uCjK8DjD,MYRO,WZQmB,UAA1B,CiK9DiD,C;EAAiC,C;6DAClF,4B;IjK6DW,kBAAX,mB;IiK7DuE,KrJoDvE,a;IqJpD+C,qCjK6D/C,MYRO,WZQmB,UAA1B,CiK7D+C,C;EAA+B,C;0DAC9E,4B;IjK4DW,kBAAX,mB;IiK5DiE,KrJmDjE,a;IqJnD4C,kCjK4D5C,MYRO,WZQmB,UAA1B,CiK5D4C,C;EAA4B,C;EAbL,uD;IAAE,elK6C3B,UkK7C2B,EAAa,EAAb,C;EAAiB,C;;;;;;EChB1F,sD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oD;IAAA,uD;K;IAEI,0F;IAAM,4F;G;;EAAN,0D;IAAA,0C;IAAA,kD;G;;EAAM,2D;IAAA,0C;IAAA,mD;G;;;;;;EAFV,gD;IAAA,4G;G;;EAAA,qD;IAAA,a;MAAA,Y;QAAA,uD;MAAA,a;QAAA,wD;MAAA,QAAA,8G;;G;;ECAA,qD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mD;IAAA,sD;K;IAEI,sF;IAAK,4F;G;;EAAL,wD;IAAA,yC;IAAA,gD;G;;EAAK,2D;IAAA,yC;IAAA,mD;G;;;;;;EAFT,+C;IAAA,0G;G;;EAAA,oD;IAAA,a;MAAA,W;QAAA,qD;MAAA,c;QAAA,wD;MAAA,QAAA,6G;;G;;ECAA,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,0E;IACA,wG;IACA,kG;IACA,0F;IACA,oF;IACA,8G;IACA,gH;IACA,4E;IACA,kF;IACA,sF;IACA,iH;G;;EAVA,kD;IAAA,kC;IAAA,0C;G;;EACA,iE;IAAA,kC;IAAA,yD;G;;EACA,8D;IAAA,kC;IAAA,sD;G;;EACA,0D;IAAA,kC;IAAA,kD;G;;EACA,uD;IAAA,kC;IAAA,+C;G;;EACA,oE;IAAA,kC;IAAA,4D;G;;EACA,qE;IAAA,kC;IAAA,6D;G;;EACA,mD;IAAA,kC;IAAA,2C;G;;EACA,sD;IAAA,kC;IAAA,8C;G;;EACA,wD;IAAA,kC;IAAA,gD;G;;EACA,qE;IAAA,kC;IAAA,6D;G;;;;;;EAZJ,wC;IAAA,gkB;G;;EAAA,6C;IAAA,a;MAAA,Y;QAAA,+C;MAAA,2B;QAAA,8D;MAAA,wB;QAAA,2D;MAAA,oB;QAAA,uD;MAAA,iB;QAAA,oD;MAAA,8B;QAAA,iE;MAAA,+B;QAAA,kE;MAAA,a;QAAA,gD;MAAA,gB;QAAA,mD;MAAA,kB;QAAA,qD;MAAA,+B;QAAA,kE;MAAA,QAAA,sG;;G;;;ECkBA,qD;IACuF,kBAA3E,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,C;IAAiF,KzJ6DzF,a;IyJ7DE,+BzJ8DK,WyJ9DyF,SAA9F,C;G;ECdmB,kC;I/JJrB,UAAa,E;I+JMb,8BAA8B,IAA9B,E/JLO,G+JKP,C;G;iDAEA,2B;IAAoC,oBAAU,I;EAAK,C;iDACnD,kC;IAAsB,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;I/JTzD,UAAa,E;IACN,G+JQyE,CAAK,OAAL,S;I/JRzE,G+JQgG,CAAK,MAAL,Q;IAAtC,oB/JR1D,G;E+JQsH,C;iDAC7H,qB;IAA0B,oBAAU,M;EAAO,C;;;;;;;ECM/C,gC;IAC8C,kBAAlC,uBAAmB,aAAnB,C;IAAwC,K3J8DhD,a;I2J9DE,+B3J+DK,W2J/DgD,SAArD,C;G;ECZqB,2C;IAEvB,qB;MjKPA,UAAa,E;MiKOb,QjKNO,G;KiKOP,wB;IAFA,gB;IACA,oB;G;iDAEA,mB;IACU,QAAN,YAAM,C;EACV,C;0CAEA,Y;IAAe,kCAAc,SAAd,EAAoB,YAApB,S1KDmD,Y0KCvB,c1KDuB,C0KCnD,E;G;gDAEf,wB;IAAuC,iBAAO,CAAE,W;EAAW,C;gDAC3D,wB;I3K4zCO,kBAAM,eAAa,wB2K5zC0B,C3K4zC1B,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,O2Kj4CuC,C3Ki4CvC,W;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WAAc,I2Kl4CiC,W3Kk4C/C,C;;I2Kl4C6B,iB1KJqB,YDu4C3D,WCv4C2D,C;E0KIyB,C;;;;;;ECjB/F,6C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAEI,oE;IAAI,sE;G;;EAAJ,+C;IAAA,iC;IAAA,uC;G;;EAAI,gD;IAAA,iC;IAAA,wC;G;;;;;;EAFR,uC;IAAA,sF;G;;EAAA,4C;IAAA,a;MAAA,U;QAAA,4C;MAAA,W;QAAA,6C;MAAA,QAAA,4F;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,kD;IAAI,kD;IAAI,kD;IAAI,kD;IAAI,kD;G;;EAAhB,sC;IAAA,wB;IAAA,8B;G;;EAAI,sC;IAAA,wB;IAAA,8B;G;;EAAI,sC;IAAA,wB;IAAA,8B;G;;EAAI,sC;IAAA,wB;IAAA,8B;G;;EAAI,sC;IAAA,wB;IAAA,8B;G;;;;;;EAFpB,8B;IAAA,6J;G;;EAAA,mC;IAAA,a;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,U;QAAA,mC;MAAA,QAAA,mF;;G;;;EC0BA,kC;IACkD,kBAAtC,yBAAqB,eAArB,C;IAA4C,K/JqDpD,a;I+JrDE,+B/JsDK,W+JtDoD,SAAzD,C;G;ECjB2B,qD;IAI7B,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,+BAA6B,kB;IAC7B,kCAAmC,kB;G;iDALnC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;mDAEA,qB;WAAA,oF;G;mDAAA,4B;InKEA,6BAAqB,8CAArB,IAA6B,uC;G;;sDmKD7B,qB;WAAA,0F;G;sDAAA,+B;InKCA,gCAAqB,iDAArB,IAA6B,6C;G;;;;;;EoKrBjC,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,wD;IAAS,wD;IAAS,4D;IAAW,sD;IAAQ,oD;IAAO,0D;G;;EAA5C,yC;IAAA,sB;IAAA,iC;G;;EAAS,yC;IAAA,sB;IAAA,iC;G;;EAAS,2C;IAAA,sB;IAAA,mC;G;;EAAW,wC;IAAA,sB;IAAA,gC;G;;EAAQ,uC;IAAA,sB;IAAA,+B;G;;EAAO,0C;IAAA,sB;IAAA,kC;G;;;;;;EAFhD,4B;IAAA,6M;G;;EAAA,iC;IAAA,a;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,iB;QAAA,wC;MAAA,c;QAAA,qC;MAAA,a;QAAA,oC;MAAA,gB;QAAA,uC;MAAA,QAAA,+E;;G;;ECAA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,8D;IAAS,8D;IAAS,0D;IAAO,0D;G;;EAAzB,4C;IAAA,yB;IAAA,oC;G;;EAAS,4C;IAAA,yB;IAAA,oC;G;;EAAS,0C;IAAA,yB;IAAA,kC;G;;EAAO,0C;IAAA,yB;IAAA,kC;G;;;;;;EAF7B,+B;IAAA,mJ;G;;EAAA,oC;IAAA,a;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,QAAA,kF;;G;;ECAA,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,kD;IACA,kE;IACA,sE;IACA,gE;IACA,8D;IACA,oE;IACA,wE;IACA,oE;IACA,oE;G;;EARA,sC;IAAA,sB;IAAA,8B;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,iD;IAAA,sB;IAAA,yC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;;;;;EAVJ,4B;IAAA,0V;G;;EAAA,iC;IAAA,a;MAAA,Y;QAAA,mC;MAAA,oB;QAAA,2C;MAAA,sB;QAAA,6C;MAAA,mB;QAAA,0C;MAAA,kB;QAAA,yC;MAAA,qB;QAAA,4C;MAAA,uB;QAAA,8C;MAAA,qB;QAAA,4C;MAAA,qB;QAAA,4C;MAAA,QAAA,+E;;G;;;ECoBiE,yB;IAAE,gBjLyCrB,UiLzCqB,EAAc,EAAd,C;EAAkB,C;EADrF,0C;IACuF,kBAA3E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAiF,KpK4DzF,a;IoK5DE,+BpK6DK,WoK7DyF,SAA9F,C;G;EAEN,qD;IAC0E,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KpKyD5E,a;IoKzDE,+BpK0DK,WoK1D4E,SAAjF,C;G;ECdgC,2D;IAIlC,oCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAKA,+BAA+B,kB;G;uDAJ/B,+B;IrLymSO,kBAAM,eqLxmSD,QrLwmSc,OAAb,C;IA6UA,Q;IAAb,wBqLr7SY,QrLq7SZ,gB;MAAa,WqLr7SD,QrLq7SZ,M;MACI,WAAY,WqLt7SW,GrLs7SG,IqLt7SA,MAAH,ErLs7SG,IqLt7SY,OAAf,CrLs7SX,C;;IqLt7SZ,gCrLu7SG,WqLv7SH,C;EACJ,C;;yDAEA,qB;WAAA,0F;G;wDAAA,4B;IxKGA,6BAAqB,oDAArB,IAA6B,uC;G;;;;;;EyKrBjC,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,8D;IACA,8E;IACA,8E;IACA,kF;IACA,sE;IACA,gE;G;;EALA,4C;IAAA,4B;IAAA,oC;G;;EACA,oD;IAAA,4B;IAAA,4C;G;;EACA,oD;IAAA,4B;IAAA,4C;G;;EACA,sD;IAAA,4B;IAAA,8C;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,6C;IAAA,4B;IAAA,qC;G;;;;;;EAPJ,kC;IAAA,8P;G;;EAAA,uC;IAAA,a;MAAA,Y;QAAA,yC;MAAA,oB;QAAA,iD;MAAA,oB;QAAA,iD;MAAA,sB;QAAA,mD;MAAA,gB;QAAA,6C;MAAA,a;QAAA,0C;MAAA,QAAA,2F;;G;;;ECmB6E,+B;IAAE,kBpL0CjC,UoL1CiC,EAAgB,EAAhB,C;EAAoB,C;EADnG,gD;IACqG,kBAAzF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA+F,KvK6DvG,a;IuK7DE,+BvK8DK,WuK9DuG,SAA5G,C;G;EAEN,2D;IACsF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,KvK0DxF,a;IuK1DE,+BvK2DK,WuK3DwF,SAA7F,C;G;ECf4C,6C;IAG9C,mCAA+B,IAA/B,EAAqC,QAArC,C;IAKA,0CAAsC,kB;G;kDAJtC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;+DAEA,qB;WAAA,2G;G;+DAAA,uC;IAAA,6H;G;;;;;;ECfJ,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,oD;IACA,kE;IACA,0D;IACA,4D;IACA,8D;IACA,sD;IACA,8D;IACA,8D;IACA,sD;IACA,4E;IACA,yE;IACA,+D;IACA,2E;G;;EAZA,uC;IAAA,uB;IAAA,+B;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,0C;IAAA,uB;IAAA,kC;G;;EACA,2C;IAAA,uB;IAAA,mC;G;;EACA,4C;IAAA,uB;IAAA,oC;G;;EACA,wC;IAAA,uB;IAAA,gC;G;;EACA,4C;IAAA,uB;IAAA,oC;G;;EACA,4C;IAAA,uB;IAAA,oC;G;;EACA,wC;IAAA,uB;IAAA,gC;G;;EACA,mD;IAAA,uB;IAAA,2C;G;;EACA,iD;IAAA,uB;IAAA,yC;G;;EACA,4C;IAAA,uB;IAAA,oC;G;;EACA,kD;IAAA,uB;IAAA,0C;G;;;;;;EAdJ,6B;IAAA,+d;G;;EAAA,kC;IAAA,a;MAAA,Y;QAAA,oC;MAAA,mB;QAAA,2C;MAAA,e;QAAA,uC;MAAA,gB;QAAA,wC;MAAA,iB;QAAA,yC;MAAA,a;QAAA,qC;MAAA,iB;QAAA,yC;MAAA,iB;QAAA,yC;MAAA,a;QAAA,qC;MAAA,wB;QAAA,gD;MAAA,sB;QAAA,8C;MAAA,iB;QAAA,yC;MAAA,uB;QAAA,+C;MAAA,QAAA,iF;;G;;;ECeA,2C;IACmE,kBAAvD,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,C;IAA6D,K1KgErE,a;I0KhEE,+B1KiEK,W0KjEqE,SAA1E,C;G;ECNqC,+D;IAIvC,kCAA+C,IAA/C,EAAqD,QAArD,EAA+D,OAA/D,C;IAKA,8CAA0C,kB;IAC1C,2CAAuC,kB;IACvC,kCAA6C,kB;IAC7C,iCAA2C,kB;G;2DAP3C,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;4EAEA,qB;WAAA,4H;G;4EAAA,2C;IAAA,kJ;G;;yEACA,qB;WAAA,sH;G;yEAAA,wC;IAAA,yI;G;;gEACA,qB;WAAA,oG;G;gEAAA,+B;I9KAA,gCAAqB,2DAArB,IAA6B,6C;G;;+D8KC7B,qB;WAAA,kG;G;+DAAA,8B;I9KDA,+BAAqB,0DAArB,IAA6B,2C;G;;;;;;E+KrBjC,+C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,6C;IAAA,gD;K;IAEI,8E;IAAO,0E;G;;EAAP,oD;IAAA,mC;IAAA,4C;G;;EAAO,kD;IAAA,mC;IAAA,0C;G;;;;;;EAFX,yC;IAAA,6F;G;;EAAA,8C;IAAA,a;MAAA,a;QAAA,iD;MAAA,W;QAAA,+C;MAAA,QAAA,sG;;G;;ECAA,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,sE;IACA,0E;IACA,wF;IACA,oF;IACA,sG;G;;EAJA,gD;IAAA,gC;IAAA,wC;G;;EACA,kD;IAAA,gC;IAAA,0C;G;;EACA,yD;IAAA,gC;IAAA,iD;G;;EACA,uD;IAAA,gC;IAAA,+C;G;;EACA,gE;IAAA,gC;IAAA,wD;G;;;;;;EANJ,sC;IAAA,iP;G;;EAAA,2C;IAAA,a;MAAA,Y;QAAA,6C;MAAA,c;QAAA,+C;MAAA,qB;QAAA,sD;MAAA,mB;QAAA,oD;MAAA,4B;QAAA,6D;MAAA,QAAA,mG;;G;;ECAA,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,kF;IAAU,kF;IAAU,8E;G;;EAApB,sD;IAAA,kC;IAAA,8C;G;;EAAU,sD;IAAA,kC;IAAA,8C;G;;EAAU,oD;IAAA,kC;IAAA,4C;G;;;;;;EAFxB,wC;IAAA,+I;G;;EAAA,6C;IAAA,a;MAAA,gB;QAAA,mD;MAAA,gB;QAAA,mD;MAAA,c;QAAA,iD;MAAA,QAAA,qG;;G;;;ECsBqF,mC;IAAE,e5LuCzC,U4LvCyC,EAAa,EAAb,C;EAAiB,C;EADxG,oD;IAC0G,kBAA9F,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAoG,K/K0D5G,a;I+K1DE,+B/K2DK,W+K3D4G,SAAjH,C;G;EAEN,+D;IAC8F,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,K/KuDhG,a;I+KvDE,+B/KwDK,W+KxDgG,SAArG,C;G;ECNoD,iD;IAGtD,kCAAmC,IAAnC,EAAyC,QAAzC,EAAmD,mCAAnD,C;IAKA,sCAAiC,kB;IACjC,mCAA+B,kB;IAC/B,sCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,sCAAuC,kB;IACvC,+BAA2B,kB;IAC3B,mCAA+B,kB;IAC/B,4BAAuB,kB;IACvB,oCAA+B,kB;IAC/B,kCAA2B,kB;IAC3B,gCAAgC,kB;IAChC,mCAA+B,kB;IAC/B,8BAAyB,kB;IACzB,iCAAuC,kB;IACvC,kCAAwC,kB;IACxC,qCAAgC,kB;IAChC,kCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,8BAAyB,kB;IACzB,iCAA4B,kB;IAC5B,uCAAyC,kB;IACzC,8BAA4B,kB;IAC5B,+BAAuB,kB;G;sDA1BvB,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;+DAEA,qB;WAAA,uG;G;8DAAA,mC;IAAA,qH;G;;4DACA,qB;WAAA,iG;G;4DAAA,gC;IAAA,4G;G;;+DACA,qB;WAAA,uG;G;+DAAA,mC;IAAA,qH;G;;2DACA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;+DACA,qB;WAAA,uG;G;+DAAA,mC;IAAA,qH;G;;wDACA,qB;WAAA,yF;G;wDAAA,4B;IAAA,gG;G;;4DACA,qB;WAAA,iG;G;4DAAA,gC;IAAA,4G;G;;qDACA,qB;WAAA,mF;G;oDAAA,yB;IAAA,uF;G;;6DACA,qB;WAAA,mG;G;6DAAA,iC;IAAA,+G;G;;2DACA,qB;WAAA,+F;G;0DAAA,+B;IAAA,yG;G;;yDACA,qB;WAAA,2F;G;yDAAA,6B;InLhBA,8BAAqB,oDAArB,IAA6B,yC;G;;4DmLiB7B,qB;WAAA,iG;G;4DAAA,gC;IAAA,4G;G;;uDACA,qB;WAAA,uF;G;sDAAA,2B;IAAA,6F;G;;0DACA,qB;WAAA,6F;G;0DAAA,8B;IAAA,sG;G;;2DACA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;8DACA,qB;WAAA,qG;G;6DAAA,kC;IAAA,kH;G;;2DACA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;2DACA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;uDACA,qB;WAAA,uF;G;sDAAA,2B;IAAA,6F;G;;0DACA,qB;WAAA,6F;G;yDAAA,8B;IAAA,sG;G;;iEACA,qB;WAAA,0G;G;iEAAA,qC;IAAA,0H;G;;uDACA,qB;WAAA,uF;G;uDAAA,2B;InL3BA,4BAAqB,kDAArB,IAA6B,qC;G;;wDmL4B7B,qB;WAAA,yF;G;wDAAA,4B;IAAA,gG;G;2DAEA,wB;IAAkC,yCAAe,CAAf,C;EAAiB,C;2DACnD,wB;IAAkC,yCAAe,CAAf,C;EAAiB,C;2DACnD,wB;IAAmC,yCAAe,CAAf,C;EAAiB,C;2DACpD,wB;IAAgC,yCAAe,CAAf,C;EAAiB,C;2DACjD,wB;IAAiC,yCAAe,CAAE,WAAjB,C;EAA4B,C;2DAC7D,4B;IACI,yCAA0B,eAAX,mBAAW,MAAuB,KAAvB,CAA1B,C;EACJ,C;4DACA,6B;IAGmC,IAAO,I;IAAtC,oCAA+B,cAAO,cAAP,MAAO,CAAP,6B;EACnC,C;yDACA,4B;IAQiB,Q;IrLvEjB,UAAa,E;IqLgET,YrL/DG,G;IqLiE0B,kBAA7B,U7LNsC,U6LMtC,EAAe,YAAf,C;IAAmC,KhLavC,a;IfuhDgB,U;IAAA,SethDT,WgLduC,kB/LoiD9B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;M+LpiD2D,U/LoiD9C,OE50CmC,I;M6LxNgB,Y/LoiDnD,OE/zCmC,M;M6LpOxD,MAAM,GAAN,IAAa,K;;IAIjB,uCAAa,uDAAb,C;EACJ,C;6DACA,4B;IACI,2CAA4B,eAAX,mBAAW,MAAuB,KAAvB,CAA5B,C;EACJ,C;mDACA,wB;IAA0B,0BAAqB,C;EAAE,C;mDACjD,wB;IAA0B,0BAAqB,C;EAAE,C;sDACjD,wB;IAA6B,6BAAwB,C;EAAE,C;sDACvD,wB;IAA6B,6BAAwB,C;EAAE,C;oDACvD,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;oDACrC,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;oDACrC,wB;IAA4B,kCAAQ,CAAR,C;EAAU,C;oDACtC,wB;IAAyB,kCAAQ,CAAR,C;EAAU,C;oDACnC,wB;IAA0B,kCAAQ,CAAE,WAAV,C;EAAqB,C;EA/DI,iD;IAAE,e7LuCX,U6LvCW,EAAa,EAAb,C;EAAiB,C;;;;;;ECtB1E,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,4D;IACA,0E;IACA,kE;IACA,oE;IACA,4E;IACA,wE;IACA,8D;IACA,0E;IACA,sE;IACA,sE;IACA,+D;IACA,qF;IACA,iF;IACA,mF;IACA,uF;IACA,mF;G;;EAfA,2C;IAAA,2B;IAAA,mC;G;;EACA,kD;IAAA,2B;IAAA,0C;G;;EACA,8C;IAAA,2B;IAAA,sC;G;;EACA,+C;IAAA,2B;IAAA,uC;G;;EACA,mD;IAAA,2B;IAAA,2C;G;;EACA,iD;IAAA,2B;IAAA,yC;G;;EACA,4C;IAAA,2B;IAAA,oC;G;;EACA,kD;IAAA,2B;IAAA,0C;G;;EACA,gD;IAAA,2B;IAAA,wC;G;;EACA,gD;IAAA,2B;IAAA,wC;G;;EACA,4C;IAAA,2B;IAAA,oC;G;;EACA,uD;IAAA,2B;IAAA,+C;G;;EACA,qD;IAAA,2B;IAAA,6C;G;;EACA,sD;IAAA,2B;IAAA,8C;G;;EACA,wD;IAAA,2B;IAAA,gD;G;;EACA,sD;IAAA,2B;IAAA,8C;G;;;;;;EAjBJ,iC;IAAA,+pB;G;;EAAA,sC;IAAA,a;MAAA,Y;QAAA,wC;MAAA,mB;QAAA,+C;MAAA,e;QAAA,2C;MAAA,gB;QAAA,4C;MAAA,oB;QAAA,gD;MAAA,kB;QAAA,8C;MAAA,a;QAAA,yC;MAAA,mB;QAAA,+C;MAAA,iB;QAAA,6C;MAAA,iB;QAAA,6C;MAAA,a;QAAA,yC;MAAA,wB;QAAA,oD;MAAA,sB;QAAA,kD;MAAA,uB;QAAA,mD;MAAA,yB;QAAA,qD;MAAA,uB;QAAA,mD;MAAA,QAAA,yF;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,wD;IAAO,sD;G;;EAAP,yC;IAAA,wB;IAAA,iC;G;;EAAO,wC;IAAA,wB;IAAA,gC;G;;;;;;EAFX,8B;IAAA,wE;G;;EAAA,mC;IAAA,a;MAAA,a;QAAA,sC;MAAA,Y;QAAA,qC;MAAA,QAAA,sF;;G;;;ECuCA,+C;IAC2E,kBAA/D,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,C;IAAqE,KnLwC7E,a;ImLxCE,+BnLyCK,WmLzC6E,SAAlF,C;G;EC5BiC,2D;IAInC,mCAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;IAKA,0CAAsC,kB;IACtC,gCAAqC,kB;IACrC,gCAA4B,kB;IAC5B,iCAAuC,kB;G;uDAPvC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;oEAEA,qB;WAAA,gH;G;oEAAA,uC;IAAA,kI;G;;0DACA,qB;WAAA,4F;G;0DAAA,6B;IvLDA,8BAAqB,qDAArB,IAA6B,yC;G;;0DuLE7B,qB;WAAA,4F;G;0DAAA,6B;IAAA,oG;G;;2DACA,qB;WAAA,8F;G;2DAAA,8B;IvLHA,+BAAqB,sDAArB,IAA6B,2C;G;;;;;;EwLrBjC,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,kE;G;;EAAA,8C;IAAA,6B;IAAA,sC;G;;;;;;EAFJ,mC;IAAA,6C;G;;EAAA,wC;IAAA,a;MAAA,a;QAAA,2C;MAAA,QAAA,4F;;G;;ECAA,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,8D;IACA,oE;IACA,sE;IACA,gE;IACA,sE;IACA,4E;IACA,4E;IACA,kE;IACA,sE;IACA,kE;IACA,uE;G;;EAVA,4C;IAAA,4B;IAAA,oC;G;;EACA,+C;IAAA,4B;IAAA,uC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,6C;IAAA,4B;IAAA,qC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,mD;IAAA,4B;IAAA,2C;G;;EACA,mD;IAAA,4B;IAAA,2C;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;;;;;EAZJ,kC;IAAA,yb;G;;EAAA,uC;IAAA,a;MAAA,Y;QAAA,yC;MAAA,e;QAAA,4C;MAAA,gB;QAAA,6C;MAAA,a;QAAA,0C;MAAA,gB;QAAA,6C;MAAA,mB;QAAA,gD;MAAA,mB;QAAA,gD;MAAA,c;QAAA,2C;MAAA,gB;QAAA,6C;MAAA,c;QAAA,2C;MAAA,gB;QAAA,6C;MAAA,QAAA,2F;;G;;ECAA,0C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,0E;IAAU,0E;IAAU,sE;G;;EAApB,kD;IAAA,8B;IAAA,0C;G;;EAAU,kD;IAAA,8B;IAAA,0C;G;;EAAU,gD;IAAA,8B;IAAA,wC;G;;;;;;EAFxB,oC;IAAA,mI;G;;EAAA,yC;IAAA,a;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,c;QAAA,6C;MAAA,QAAA,6F;;G;;;ECsB6E,+B;IAAE,iBrMuCjC,UqMvCiC,EAAe,EAAf,C;EAAmB,C;EADlG,gD;IACoG,kBAAxF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA8F,KxL0DtG,a;IwL1DE,+BxL2DK,WwL3DsG,SAA3G,C;G;EAEN,2D;IACsF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,KxLuDxF,a;IwLvDE,+BxLwDK,WwLxDwF,SAA7F,C;G;ECd0D,kD;IAG5D,kCAAoC,IAApC,EAA0C,QAA1C,EAAoD,oCAApD,C;IAEA,mCAA+B,kB;IAC/B,iCAA6B,kB;IAC7B,qCAAsC,kB;IACtC,wCAAoC,kB;IACpC,kCAA8B,kB;IAC9B,uCAAmC,kB;IACnC,8BAA+B,kB;IAC/B,4BAAuB,kB;IACvB,oCAA+B,kB;IAC/B,kCAA2B,kB;IAC3B,8BAAyB,kB;IACzB,kCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,kCAA6B,kB;IAC7B,8BAA4B,kB;G;;6DAd5B,qB;WAAA,kG;G;6DAAA,gC;IAAA,6G;G;;2DACA,qB;WAAA,8F;G;2DAAA,8B;IAAA,uG;G;;+DACA,qB;WAAA,sG;G;+DAAA,kC;IAAA,mH;G;;kEACA,qB;WAAA,4G;G;kEAAA,qC;IAAA,4H;G;;4DACA,qB;WAAA,gG;G;4DAAA,+B;IAAA,0G;G;;iEACA,qB;WAAA,0G;G;iEAAA,oC;IAAA,yH;G;;wDACA,qB;WAAA,wF;G;wDAAA,2B;IAAA,8F;G;;sDACA,qB;WAAA,oF;G;qDAAA,yB;IAAA,wF;G;;8DACA,qB;WAAA,oG;G;8DAAA,iC;IAAA,gH;G;;4DACA,qB;WAAA,gG;G;2DAAA,+B;IAAA,0G;G;;wDACA,qB;WAAA,wF;G;uDAAA,2B;IAAA,8F;G;;4DACA,qB;WAAA,gG;G;4DAAA,+B;IAAA,0G;G;;4DACA,qB;WAAA,gG;G;4DAAA,+B;IAAA,0G;G;;4DACA,qB;WAAA,gG;G;2DAAA,+B;IAAA,0G;G;;wDACA,qB;WAAA,wF;G;wDAAA,2B;I5LTA,4BAAqB,mDAArB,IAA6B,qC;G;2D4LW7B,4B;IrMyDW,kBAAX,mB;IqMzD6E,KzLgD7E,a;IyLhDkD,wCrMyDlD,MYRO,WZQmB,UAA1B,CqMzDkD,C;EAAkC,C;oDACpF,4B;IrMwDW,kBAAX,mB;IqMxD+D,KzL+C/D,a;IyL/C2C,iCrMwD3C,MYRO,WZQmB,UAA1B,CqMxD2C,C;EAA2B,C;0DACtE,4B;IAQiB,Q;I9LzCjB,UAAa,E;I8LkCT,Y9LjCG,G;I8LmC0B,kBAA7B,UtMwBsC,UsMxBtC,EAAe,YAAf,C;IAAmC,KzL2CvC,a;IfuhDgB,U;IAAA,SethDT,WyL5CuC,kBxMkkD9B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MwMlkD2D,UxMkkD9C,OE50CmC,I;MsMtPgB,YxMkkDnD,OE/zCmC,M;MsMlQxD,MAAM,GAAN,IAAa,K;;IAIjB,uCAAa,uDAAb,C;EACJ,C;EA7BoD,kD;IAAE,gBtM+CZ,UsM/CY,EAAc,EAAd,C;EAAkB,C;;;;;;ECJzC,sD;IAG/B,kCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,wCAAjE,C;IAKA,+BAAuC,kB;IACvC,+BAA0B,kB;IAC1B,qCAAgC,kB;IAChC,iCAA2C,kB;G;2DAP3C,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;6DAEA,qB;WAAA,8F;G;6DAAA,4B;I7LGA,6BAAqB,wDAArB,IAA6B,uC;G;;6D6LF7B,qB;WAAA,8F;G;6DAAA,4B;IAAA,qG;G;;mEACA,qB;WAAA,0G;G;mEAAA,kC;IAAA,uH;G;;+DACA,qB;WAAA,kG;G;+DAAA,8B;I7LAA,+BAAqB,0DAArB,IAA6B,2C;G;E6LRoC,sD;IAAE,evMgDzB,UuMhDyB,EAAa,EAAb,C;EAAiB,C;;;;;;ECbxF,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,4E;IAAS,gF;G;;EAAT,mD;IAAA,gC;IAAA,2C;G;;EAAS,qD;IAAA,gC;IAAA,6C;G;;;;;;EAFb,sC;IAAA,+F;G;;EAAA,2C;IAAA,a;MAAA,e;QAAA,gD;MAAA,iB;QAAA,kD;MAAA,QAAA,mG;;G;;ECAA,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,sE;IACA,sF;IACA,0F;IACA,oF;IACA,wF;IACA,0E;IACA,wE;IACA,0E;IACA,kG;IACA,sG;IACA,qE;IACA,6F;IACA,iG;IACA,iG;IACA,6F;IACA,mF;IACA,iG;IACA,mF;G;;EAjBA,gD;IAAA,gC;IAAA,wC;G;;EACA,wD;IAAA,gC;IAAA,gD;G;;EACA,0D;IAAA,gC;IAAA,kD;G;;EACA,uD;IAAA,gC;IAAA,+C;G;;EACA,yD;IAAA,gC;IAAA,iD;G;;EACA,kD;IAAA,gC;IAAA,0C;G;;EACA,iD;IAAA,gC;IAAA,yC;G;;EACA,kD;IAAA,gC;IAAA,0C;G;;EACA,8D;IAAA,gC;IAAA,sD;G;;EACA,gE;IAAA,gC;IAAA,wD;G;;EACA,+C;IAAA,gC;IAAA,uC;G;;EACA,2D;IAAA,gC;IAAA,mD;G;;EACA,6D;IAAA,gC;IAAA,qD;G;;EACA,6D;IAAA,gC;IAAA,qD;G;;EACA,2D;IAAA,gC;IAAA,mD;G;;EACA,sD;IAAA,gC;IAAA,8C;G;;EACA,6D;IAAA,gC;IAAA,qD;G;;EACA,sD;IAAA,gC;IAAA,8C;G;;;;;;EAnBJ,sC;IAAA,o2B;G;;EAAA,2C;IAAA,a;MAAA,Y;QAAA,6C;MAAA,oB;QAAA,qD;MAAA,sB;QAAA,uD;MAAA,mB;QAAA,oD;MAAA,qB;QAAA,sD;MAAA,c;QAAA,+C;MAAA,a;QAAA,8C;MAAA,c;QAAA,+C;MAAA,0B;QAAA,2D;MAAA,4B;QAAA,6D;MAAA,W;QAAA,4C;MAAA,uB;QAAA,wD;MAAA,yB;QAAA,0D;MAAA,yB;QAAA,0D;MAAA,uB;QAAA,wD;MAAA,kB;QAAA,mD;MAAA,yB;QAAA,0D;MAAA,kB;QAAA,mD;MAAA,QAAA,mG;;G;;ECAA,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,wF;IAAa,4F;IAAe,8E;IAAQ,4E;G;;EAApC,yD;IAAA,kC;IAAA,iD;G;;EAAa,2D;IAAA,kC;IAAA,mD;G;;EAAe,oD;IAAA,kC;IAAA,4C;G;;EAAQ,mD;IAAA,kC;IAAA,2C;G;;;;;;EAFxC,wC;IAAA,kM;G;;EAAA,6C;IAAA,a;MAAA,mB;QAAA,sD;MAAA,qB;QAAA,wD;MAAA,c;QAAA,iD;MAAA,a;QAAA,gD;MAAA,QAAA,qG;;G;;;ECkBA,oD;IACqF,kBAAzE,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,C;IAA+E,K9L6DvF,a;I8L7DE,+B9L8DK,W8L9DuF,SAA5F,C;G;ECR2B,qD;IAI7B,oCAAuC,IAAvC,EAA6C,QAA7C,EAAuD,OAAvD,C;IAKA,+BAA2B,kB;IAC3B,mCAAqC,kB;G;iDALrC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;mDAEA,qB;WAAA,oF;G;mDAAA,4B;IAAA,2F;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;IlMAA,iCAAqB,kDAArB,IAA6B,+C;G;2DkME7B,+B;IASsC,Q;IARlC,IAAI,Q/MqpND,YAAQ,C+MrpNX,C;MACI,M;KpMxBR,UAAa,E;IoM2BT,iBpM1BG,G;IXmpWS,U;IAAhB,4B+MvnWI,Q/MunWJ,kB;MAAgB,c+MvnWZ,Q/MunWJ,Q;M+MvnWuB,IAAC,M/MunWK,O+MvnWL,aAAD;QAAM,Q/MunWA,O+MvnWA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,uCAAkC,yD;EACtC,C;;;;;;ECjCJ,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,kD;IACA,oE;IACA,sE;IACA,wE;IACA,sD;G;;EAJA,sC;IAAA,sB;IAAA,8B;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,iD;IAAA,sB;IAAA,yC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;;;;;EANJ,4B;IAAA,6L;G;;EAAA,iC;IAAA,a;MAAA,Y;QAAA,mC;MAAA,qB;QAAA,4C;MAAA,sB;QAAA,6C;MAAA,uB;QAAA,8C;MAAA,c;QAAA,qC;MAAA,QAAA,+E;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IAAM,4D;IAAO,8D;G;;EAAb,0C;IAAA,0B;IAAA,kC;G;;EAAM,2C;IAAA,0B;IAAA,mC;G;;EAAO,4C;IAAA,0B;IAAA,oC;G;;;;;;EAFjB,gC;IAAA,gH;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,a;QAAA,wC;MAAA,c;QAAA,yC;MAAA,QAAA,mF;;G;;;ECqBiE,yB;IAAE,a/MwCrB,U+MxCqB,EAAW,EAAX,C;EAAe,C;EADlF,0C;IACoF,kBAAxE,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAA8E,KlM2DtF,a;IkM3DE,+BlM4DK,WkM5DsF,SAA3F,C;G;EAEN,qD;IAC0E,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KlMwD5E,a;IkMxDE,+BlMyDK,WkMzD4E,SAAjF,C;G;ECbkD,qD;IAIpD,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,+BAA2B,kB;IAC3B,wCAAoC,kB;IACpC,mCAAoC,kB;G;iDANpC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;mDAEA,qB;WAAA,oF;G;mDAAA,4B;IAAA,2F;G;;4DACA,qB;WAAA,sG;G;4DAAA,qC;IAAA,sH;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;IAAA,uG;G;mDAEA,4B;I/MiEW,kBAAX,mB;I+MjEyE,KnMwDzE,a;ImMxDgD,sC/MiEhD,MYRO,WZQmB,UAA1B,C+MjEgD,C;EAAgC,C;;;;;;ECxBpF,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,kD;IACA,wD;IACA,oD;IACA,4D;G;;EAHA,sC;IAAA,sB;IAAA,8B;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;;;;;EALJ,4B;IAAA,wI;G;;EAAA,iC;IAAA,a;MAAA,Y;QAAA,mC;MAAA,e;QAAA,sC;MAAA,a;QAAA,oC;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;G;;;ECsBiE,yB;IAAE,clNuCrB,UkNvCqB,EAAY,EAAZ,C;EAAgB,C;EADnF,0C;IACqF,kBAAzE,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAA+E,KrM0DvF,a;IqM1DE,+BrM2DK,WqM3DuF,SAA5F,C;G;EAEN,qD;IAC0E,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,KrMuD5E,a;IqMvDE,+BrMwDK,WqMxD4E,SAAjF,C;G;ECT6B,sD;IAG/B,oCAAsD,IAAtD,EAA4D,QAA5D,EAAsE,wCAAtE,C;IAKA,oCAA0C,kB;IAC1C,gCAA4B,kB;IAC5B,wCAAmC,kB;IACnC,+BAA2B,kB;IAC3B,wCAAoC,kB;IACpC,iCAA6B,kB;IAC7B,kCAA8B,kB;G;2DAV9B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;kEAEA,qB;WAAA,wG;G;kEAAA,iC;IzMHA,kCAAqB,6DAArB,IAA6B,iD;G;;8DyMI7B,qB;WAAA,gG;G;8DAAA,6B;IAAA,wG;G;;sEACA,qB;WAAA,gH;G;sEAAA,qC;IAAA,gI;G;;6DACA,qB;WAAA,8F;G;6DAAA,4B;IAAA,qG;G;;sEACA,qB;WAAA,gH;G;sEAAA,qC;IAAA,gI;G;;+DACA,qB;WAAA,kG;G;+DAAA,8B;IAAA,2G;G;;gEACA,qB;WAAA,oG;G;gEAAA,+B;IAAA,8G;G;qEAEA,6B;IAGuC,IAAO,I;IAA1C,wCAAmC,cAAO,cAAP,MAAO,CAAP,6B;EACvC,C;sEACA,8B;IAA8C,wCAAmC,O;EAAQ,C;kEACzF,4B;IAQqB,Q;I3M7CrB,UAAa,E;I2MsCT,Y3MrCG,G;I2MuCwB,kBAA3B,QnNoBsC,UmNpBtC,EAAa,YAAb,C;IAAiC,KtMuCrC,a;IfuhDgB,U;IAAA,SethDT,WsMxCqC,kBrN8jD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MqN9jDyD,UrN8jD5C,OE50CmC,I;MmNlPc,YrN8jDjD,OE/zCmC,M;MmN9PxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;kEACA,qC;IAQqB,Q;I3MvDrB,UAAa,E;I2MgDT,Y3M/CG,G;I2MiDkB,kBAArB,gBAAY,OAAZ,C;IAA2B,KtM6B/B,a;IfuhDgB,U;IAAA,SethDT,WsM9B+B,MAAM,kBrNojD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MqNpjDyD,UrNojD5C,OE50CmC,I;MmNxOc,YrNojDjD,OE/zCmC,M;MmNpPxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;EAtCsE,sD;IAAE,kBnN0C9B,UmN1C8B,EAAgB,EAAhB,C;EAAoB,C;;;;;;ECHhC,yD;IAI5D,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,oCAA0C,kB;IAC1C,gCAA4B,kB;IAC5B,wCAAmC,kB;IACnC,+BAA2B,kB;IAC3B,kCAA8B,kB;IAC9B,wCAAoC,kB;IACpC,iCAA6B,kB;IAC7B,kCAA8B,kB;G;qDAX9B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;4DAEA,qB;WAAA,kG;G;4DAAA,iC;I1MJA,kCAAqB,uDAArB,IAA6B,iD;G;;wD0MK7B,qB;WAAA,0F;G;wDAAA,6B;IAAA,kG;G;;gEACA,qB;WAAA,0G;G;gEAAA,qC;IAAA,0H;G;;uDACA,qB;WAAA,wF;G;uDAAA,4B;IAAA,+F;G;;0DACA,qB;WAAA,8F;G;0DAAA,+B;IAAA,wG;G;;gEACA,qB;WAAA,0G;G;gEAAA,qC;IAAA,0H;G;;yDACA,qB;WAAA,4F;G;yDAAA,8B;IAAA,qG;G;;0DACA,qB;WAAA,8F;G;0DAAA,+B;IAAA,wG;G;+DAEA,6B;IAGuC,IAAO,I;IAA1C,wCAAmC,cAAO,cAAP,MAAO,CAAP,6B;EACvC,C;gEACA,8B;IAA8C,wCAAmC,O;EAAQ,C;4DACzF,4B;IAQqB,Q;I5M/CrB,UAAa,E;I4MwCT,Y5MvCG,G;I4MyCuB,kBAA1B,OpNkBsC,UoNlBtC,EAAY,YAAZ,C;IAAgC,KvMqCpC,a;IfuhDgB,U;IAAA,SethDT,WuMtCoC,kBtN4jD3B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MsN5jDwD,UtN4jD3C,OE50CmC,I;MoNhPa,YtN4jDhD,OE/zCmC,M;MoN5PxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;4DACA,qC;IAQqB,Q;I5MzDrB,UAAa,E;I4MkDT,Y5MjDG,G;I4MmDkB,kBAArB,gBAAY,OAAZ,C;IAA2B,KvM2B/B,a;IfuhDgB,U;IAAA,SethDT,WuM5B+B,MAAM,kBtNkjD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MsNljDyD,UtNkjD5C,OE50CmC,I;MoNtOc,YtNkjDjD,OE/zCmC,M;MoNlPxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;;;;;;EC1DwB,iD;IAD5B,e;IAC6B,0B;IAD7B,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,6EAAU,YAAV,C;IAAyB,uEAAO,QAAP,C;IAEzB,yC;G;;EAFA,mD;IAAA,8B;IAAA,2C;G;;EAAyB,gD;IAAA,8B;IAAA,wC;G;EAEzB,uC;IAAA,2C;G;wDACI,a;IACmB,Q;IAAA,gBAAT,0B;IxNizBP,sB;;MAyXS,U;MAAhB,uD;QAAgB,cAAhB,iB;QAAsB,IwN1qCQ,OxN0qCM,OwN1qCH,cAAH,IxN0qCR,C;UAAwB,qBAAO,O;UAAP,uB;;MAC9C,qBAAO,I;;;IwN3qCgB,OxNizBvB,kB;IwNjzBc,iB;MAAmC,MAAM,8BAAyB,oBAAiB,CAA1C,C;KAAzC,W;G;;;;;;;EAFd,mD;IAAA,8B;IAAA,kD;MAAA,iC;KAAA,2C;G;;;;;;EAJJ,oC;IAAA,0F;G;;EAAA,yC;IAAA,a;MAAA,iB;QAAA,gD;MAAA,c;QAAA,6C;MAAA,QAAA,2F;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IACA,oE;IACA,0E;IACA,gE;IACA,4D;IACA,wF;IACA,kE;IACA,gE;IACA,gE;IACA,8D;IACA,iF;IACA,mE;G;;EAXA,0C;IAAA,0B;IAAA,kC;G;;EACA,+C;IAAA,0B;IAAA,uC;G;;EACA,kD;IAAA,0B;IAAA,0C;G;;EACA,6C;IAAA,0B;IAAA,qC;G;;EACA,2C;IAAA,0B;IAAA,mC;G;;EACA,yD;IAAA,0B;IAAA,iD;G;;EACA,8C;IAAA,0B;IAAA,sC;G;;EACA,6C;IAAA,0B;IAAA,qC;G;;EACA,6C;IAAA,0B;IAAA,qC;G;;EACA,4C;IAAA,0B;IAAA,oC;G;;EACA,qD;IAAA,0B;IAAA,6C;G;;EACA,8C;IAAA,0B;IAAA,sC;G;;;;;;EAbJ,gC;IAAA,0d;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,iB;QAAA,4C;MAAA,oB;QAAA,+C;MAAA,e;QAAA,0C;MAAA,a;QAAA,wC;MAAA,2B;QAAA,sD;MAAA,gB;QAAA,2C;MAAA,e;QAAA,0C;MAAA,e;QAAA,0C;MAAA,c;QAAA,yC;MAAA,uB;QAAA,kD;MAAA,gB;QAAA,2C;MAAA,QAAA,uF;;G;;;EC+ByE,6B;IAAE,cvN8B7B,UuN9B6B,EAAY,EAAZ,C;EAAgB,C;EAD3F,8C;IAC6F,kBAAjF,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,eAA7D,C;IAAuF,K1MiD/F,a;I0MjDE,+B1MkDK,W0MlD+F,SAApG,C;G;EAEN,oD;IAC+E,kBAAnE,iCAA6B,iBAA7B,EAAyD,OAAT,QAAS,CAAzD,C;IACJ,M1M6CJ,W0M7CI,C;I1M6CJ,W0M5CI,oB1M4CJ,W0M5CI,QAAe,IAAf,C;IAFF,+B1M+CK,W0M5CL,SAHA,C;G;EAKN,yD;IACkF,kBAAtE,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,K1MwCpF,a;I0MxCE,+B1MyCK,W0MzCoF,SAAzF,C;G;EClC6B,sD;IAG/B,kCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,wCAAjE,C;G;2DACA,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;EAHiE,sD;IAAE,exNoDzB,UwNpDyB,EAAa,EAAb,C;EAAiB,C;;;;;;ECTxF,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,sE;IACA,oG;IACA,sE;G;;EAFA,gD;IAAA,gC;IAAA,wC;G;;EACA,+D;IAAA,gC;IAAA,uD;G;;EACA,gD;IAAA,gC;IAAA,wC;G;;;;;;EAJJ,sC;IAAA,8I;G;;EAAA,2C;IAAA,a;MAAA,Y;QAAA,6C;MAAA,2B;QAAA,4D;MAAA,Y;QAAA,6C;MAAA,QAAA,mG;;G;;;ECaA,gD;IACqF,kBAAzE,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,C;IAA+E,K7MkEvF,a;I6MlEE,+B7MmEK,W6MnEuF,SAA5F,C;G;ECV2B,oD;IAG7B,kCAA+C,IAA/C,EAAqD,QAArD,EAA+D,sCAA/D,C;G;EAA+D,oD;IAAE,e3NsDvB,U2NtDuB,EAAa,EAAb,C;EAAiB,C;;;;;;;ECMtF,mD;IAA0B,yB;MAAA,YAAqB,I;IAC2E,kBAA9G,+BAA2B,qBAA3B,EAAkD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAlD,C;IAAoH,K/MkE5H,a;I+MlEE,+B/MmEK,W+MnE4H,SAAjI,C;G;ECVsC,+D;IAGxC,kCAA0D,IAA1D,EAAgE,QAAhE,EAA0E,iDAA1E,C;G;EAA0E,+D;IAAE,e7NsDlC,U6NtDkC,EAAa,EAAb,C;EAAiB,C;;;;;;;ECMjG,8D;IAAqC,yB;MAAA,YAAqB,I;IACsF,kBAApI,0CAAsC,gCAAtC,EAAwE,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAxE,C;IAA0I,KjNkElJ,a;IiNlEE,+BjNmEK,WiNnEkJ,SAAvJ,C;G;ECA2B,oD;IAG7B,kCAA+C,IAA/C,EAAqD,QAArD,EAA+D,sCAA/D,C;IAKA,2CAAuC,kB;IACvC,+BAA2B,kB;IAC3B,iCAAkC,kB;IAClC,gDAA2C,kB;IAC3C,mCAAoC,kB;IACpC,kDAA6C,kB;IAC7C,+BAA4B,kB;G;yDAV5B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;uEAEA,qB;WAAA,oH;G;uEAAA,wC;IAAA,uI;G;;2DACA,qB;WAAA,4F;G;2DAAA,4B;IAAA,mG;G;;6DACA,qB;WAAA,gG;G;6DAAA,8B;IAAA,yG;G;;4EACA,qB;WAAA,8H;G;4EAAA,6C;IAAA,sJ;G;;+DACA,qB;WAAA,oG;G;+DAAA,gC;IAAA,+G;G;;8EACA,qB;WAAA,kI;G;8EAAA,+C;IAAA,4J;G;;2DACA,qB;WAAA,4F;G;2DAAA,4B;IAAA,mG;G;yDAEA,4B;IAAqF,oCAAqB,WAAX,mBAAW,MAAmB,KAAnB,CAArB,C;EAA+C,C;yDACpI,+B;IAA8F,oCAAqB,aAAX,mBAAW,MAAe,CAAf,EAA0B,KAA1B,CAArB,C;EAAsD,C;yDACpJ,qC;IAA8H,oCAAqB,aAAX,mBAAW,MAAqB,OAArB,EAAsC,KAAtC,CAArB,C;EAAkE,C;wEAChM,4B;IACI,mDAAoC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAA9D,C;EACJ,C;2DACA,4B;IAAuF,sCAAuB,WAAX,mBAAW,MAAmB,KAAnB,CAAvB,C;EAAiD,C;2DACxI,+B;IAAgG,sCAAuB,aAAX,mBAAW,MAAe,CAAf,EAA0B,KAA1B,CAAvB,C;EAAwD,C;2DACxJ,qC;IAAgI,sCAAuB,aAAX,mBAAW,MAAqB,OAArB,EAAsC,KAAtC,CAAvB,C;EAAoE,C;0EACpM,4B;IACI,qDAAsC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAAhE,C;EACJ,C;EAxB+D,oD;IAAE,e/N4CvB,U+N5CuB,EAAa,EAAb,C;EAAiB,C;;;;;;ECjBtF,0C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,kE;IACA,oE;IACA,oE;IACA,wE;IACA,4E;IACA,4E;G;;EALA,8C;IAAA,8B;IAAA,sC;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,iD;IAAA,8B;IAAA,yC;G;;EACA,mD;IAAA,8B;IAAA,2C;G;;EACA,mD;IAAA,8B;IAAA,2C;G;;;;;;EAPJ,oC;IAAA,0P;G;;EAAA,yC;IAAA,a;MAAA,Y;QAAA,2C;MAAA,a;QAAA,4C;MAAA,a;QAAA,4C;MAAA,e;QAAA,8C;MAAA,iB;QAAA,gD;MAAA,iB;QAAA,gD;MAAA,QAAA,+F;;G;;;ECqBA,kD;IACiF,kBAArE,+BAA2B,qBAA3B,EAA2D,OAAT,QAAS,CAA3D,C;IAA2E,KpN0DnF,a;IoN1DE,+BpN2DK,WoN3DmF,SAAxF,C;G;ECboC,8D;IAItC,kCAA8C,IAA9C,EAAoD,QAApD,EAA8D,OAA9D,C;IAKA,+BAAsC,kB;IACtC,wCAAoC,kB;IACpC,uCAAmC,kB;IACnC,+BAA2B,kB;G;0DAP3B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;4DAEA,qB;WAAA,6F;G;4DAAA,4B;IxNGA,6BAAqB,uDAArB,IAA6B,uC;G;;qEwNF7B,qB;WAAA,+G;G;qEAAA,qC;IAAA,+H;G;;oEACA,qB;WAAA,6G;G;oEAAA,oC;IAAA,4H;G;;4DACA,qB;WAAA,6F;G;4DAAA,4B;IAAA,oG;G;;;;;;ECrBJ,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,0E;IAAS,0E;IAAS,0E;G;;EAAlB,kD;IAAA,+B;IAAA,0C;G;;EAAS,kD;IAAA,+B;IAAA,0C;G;;EAAS,kD;IAAA,+B;IAAA,0C;G;;;;;;EAFtB,qC;IAAA,qI;G;;EAAA,0C;IAAA,a;MAAA,e;QAAA,+C;MAAA,e;QAAA,+C;MAAA,e;QAAA,+C;MAAA,QAAA,iG;;G;;ECAA,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,oE;IACA,oF;IACA,oF;IACA,0E;IACA,sE;IACA,wE;G;;EALA,+C;IAAA,+B;IAAA,uC;G;;EACA,uD;IAAA,+B;IAAA,+C;G;;EACA,uD;IAAA,+B;IAAA,+C;G;;EACA,kD;IAAA,+B;IAAA,0C;G;;EACA,gD;IAAA,+B;IAAA,wC;G;;EACA,iD;IAAA,+B;IAAA,yC;G;;;;;;EAPJ,qC;IAAA,uQ;G;;EAAA,0C;IAAA,a;MAAA,Y;QAAA,4C;MAAA,oB;QAAA,oD;MAAA,oB;QAAA,oD;MAAA,e;QAAA,+C;MAAA,a;QAAA,6C;MAAA,c;QAAA,8C;MAAA,QAAA,iG;;G;;;ECsBmF,kC;IAAE,crOuCvC,UqOvCuC,EAAY,EAAZ,C;EAAgB,C;EADrG,mD;IACuG,kBAA3F,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,EAAuE,oBAAvE,C;IAAiG,KxN0DzG,a;IwN1DE,+BxN2DK,WwN3DyG,SAA9G,C;G;EAEN,8D;IACgG,kBAAhF,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,EAAuE,OAAvE,C;IAAsF,KxNuDlG,a;IwNvDM,+BxNwDC,WwNxDkG,SAAnG,C;G;ECVe,4C;IAGrB,iCAAiC,IAAjC,EAAuC,QAAvC,C;IAKA,8CAA0C,kB;IAC1C,uCAAkC,kB;IAClC,+BAA4B,kB;IAC5B,wCAAgC,kB;G;iDAPhC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;kEAEA,qB;WAAA,kH;G;kEAAA,2C;IAAA,wI;G;;2DACA,qB;WAAA,oG;G;2DAAA,oC;IAAA,mH;G;;mDACA,qB;WAAA,oF;G;mDAAA,4B;IAAA,2F;G;;4DACA,qB;WAAA,sG;G;4DAAA,qC;IAAA,sH;G;uDAEA,4B;IACI,0CAA2B,SAAX,mBAAW,EAAS,KAAT,CAAgB,MAA3C,C;EACJ,C;wDACA,+B;IASqB,Q;IARjB,IAAI,QzO6oND,YAAQ,CyO7oNX,C;MACI,M;K9NhCR,UAAa,E;I8NmCT,iB9NlCG,G;IXmpWS,U;IAAhB,4ByO/mWI,QzO+mWJ,kB;MAAgB,cyO/mWZ,QzO+mWJ,Q;MyO/mWuB,IAAC,MzO+mWK,OyO/mWL,aAAD;QAAM,QzO+mWA,OyO/mWA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,2CAAiB,yDAAjB,C;EACJ,C;;;;;;ECzCJ,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,oD;G;;EAAA,uC;IAAA,sB;IAAA,+B;G;;;;;;EAFJ,4B;IAAA,sC;G;;EAAA,iC;IAAA,a;MAAA,a;QAAA,oC;MAAA,QAAA,+E;;G;;;ECoBA,0C;IACiE,kBAArD,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,C;IAA2D,K3N2DnE,a;I2N3DE,+B3N4DK,W2N5DmE,SAAxE,C;G;ECf+B,yD;IAIjC,kCAAyC,IAAzC,EAA+C,QAA/C,EAAyD,OAAzD,C;G;qDACA,+B;IACK,gCAAiB,OAAT,QAAS,CAAjB,C;EACL,C;;;;;;ECbJ,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IACA,gE;IACA,kE;G;;EAFA,0C;IAAA,0B;IAAA,kC;G;;EACA,6C;IAAA,0B;IAAA,qC;G;;EACA,8C;IAAA,0B;IAAA,sC;G;;;;;;EAJJ,gC;IAAA,oH;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,e;QAAA,0C;MAAA,gB;QAAA,2C;MAAA,QAAA,uF;;G;;;ECmByE,6B;IAAE,c3O0C7B,U2O1C6B,EAAY,EAAZ,C;EAAgB,C;EAD3F,8C;IAC6F,kBAAjF,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,eAA7D,C;IAAuF,K9N6D/F,a;I8N7DE,+B9N8DK,W8N9D+F,SAApG,C;G;EAGmE,+B;IAAE,e3OuC7B,U2OvC6B,EAAa,EAAb,C;EAAiB,C;EAD5F,wD;IAC8F,kBAAlF,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,iBAA7D,C;IACJ,M9NyDJ,W8NzDI,C;I9NyDJ,W8NxDI,oB9NwDJ,W8NxDI,e;IAFF,+B9N2DK,W8NxDL,SAHA,C;G;EAKN,yD;IACkF,kBAAtE,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,K9NoDpF,a;I8NpDE,+B9NqDK,W8NrDoF,SAAzF,C;G;ECrB+B,yD;IAIjC,8BAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IACA,yCAAqC,kB;G;;iEAArC,qB;WAAA,4G;G;iEAAA,sC;IAAA,6H;G;;;;;;;ECM4D,6B;IAAE,c7O2CpB,U6O3CoB,EAAY,EAAZ,C;EAAgB,C;EADlF,oC;IACoF,kBAAxE,2BAAuB,iBAAvB,E1O8D8B,W0O9D9B,EAAoD,eAApD,C;IAA8E,KhO8DtF,a;IgO9DE,+BhO+DK,WgO/DsF,SAA3F,C;G;EAEN,+C;IACyE,kBAA7D,2BAAuB,iBAAvB,E1O2D8B,W0O3D9B,EAAoD,OAApD,C;IAAmE,KhO2D3E,a;IgO3DE,+BhO4DK,WgO5D2E,SAAhF,C;G;ECXoC,8D;IAItC,+BAA2C,IAA3C,EAAiD,QAAjD,EAA2D,OAA3D,C;IAEA,oCAA+B,kB;IAC/B,oCAAqC,kB;IACrC,6CAAwC,kB;IACxC,oCAAqC,kB;IACrC,kCAA4C,kB;IAC5C,+BAA0B,kB;IAC1B,iCAA0C,kB;G;;iEAN1C,qB;WAAA,uG;G;iEAAA,iC;IAAA,mH;G;;iEACA,qB;WAAA,uG;G;iEAAA,iC;IAAA,mH;G;;0EACA,qB;WAAA,yH;G;0EAAA,0C;IAAA,8I;G;;iEACA,qB;WAAA,uG;G;iEAAA,iC;IAAA,mH;G;;+DACA,qB;WAAA,mG;G;+DAAA,+B;IpOCA,gCAAqB,0DAArB,IAA6B,6C;G;;4DoOA7B,qB;WAAA,6F;G;4DAAA,4B;IAAA,oG;G;;8DACA,qB;WAAA,iG;G;8DAAA,8B;IpODA,+BAAqB,yDAArB,IAA6B,2C;G;6DoOG7B,4B;I7OiEW,kBAAX,mB;I6OjE2E,KjOwD3E,a;IiOxDiD,uC7OiEjD,MYRO,WZQmB,UAA1B,C6OjEiD,C;EAAiC,C;sEAClF,4B;ItOxBA,UAAa,E;IsOwBiF,KtOtB1F,CADG,GACH,C;IsOsB2D,gDtOvBxD,GsOuBwD,C;EAAsC,C;6DACrG,4B;I7O+DW,kBAAX,mB;I6O/D2E,KjOsD3E,a;IiOtDiD,uC7O+DjD,MYRO,WZQmB,UAA1B,C6O/DiD,C;EAAiC,C;;;;;;EC1BtF,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,8E;IAAQ,wE;IAAK,8E;G;;EAAb,oD;IAAA,kC;IAAA,4C;G;;EAAQ,iD;IAAA,kC;IAAA,yC;G;;EAAK,oD;IAAA,kC;IAAA,4C;G;;;;;;EAFjB,wC;IAAA,wI;G;;EAAA,6C;IAAA,a;MAAA,c;QAAA,iD;MAAA,W;QAAA,8C;MAAA,c;QAAA,iD;MAAA,QAAA,oG;;G;;ECAA,6C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAEI,wE;IAAM,wE;IAAM,gF;G;;EAAZ,iD;IAAA,iC;IAAA,yC;G;;EAAM,iD;IAAA,iC;IAAA,yC;G;;EAAM,qD;IAAA,iC;IAAA,6C;G;;;;;;EAFhB,uC;IAAA,sI;G;;EAAA,4C;IAAA,a;MAAA,Y;QAAA,8C;MAAA,Y;QAAA,8C;MAAA,gB;QAAA,kD;MAAA,QAAA,mG;;G;;;EC2BmF,kC;IAAE,ejPkCvC,UiPlCuC,EAAa,EAAb,C;EAAiB,C;EADtG,mD;IACwG,kBAA5F,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,EAAuE,oBAAvE,C;IAAkG,KpOqD1G,a;IoOrDE,+BpOsDK,WoOtD0G,SAA/G,C;G;EAEN,8D;IAC4F,kBAAhF,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,EAAuE,OAAvE,C;IAAsF,KpOkD9F,a;IoOlDE,+BpOmDK,WoOnD8F,SAAnG,C;G;ECf2C,6C;IAG7C,kCAAmC,IAAnC,EAAyC,QAAzC,EAAmD,+BAAnD,C;IAKA,sCAAkC,kB;IAClC,0CAAsC,kB;IACtC,8CAA0C,kB;IAC1C,6CAAyC,kB;IACzC,8CAA0C,kB;IAC1C,uCAAmC,kB;IACnC,6CAAyC,kB;IACzC,sCAAkC,kB;IAClC,qCAAiC,kB;IACjC,yCAA+C,kB;IAC/C,iCAA+C,kB;IAC/C,yCAA+C,kB;IAC/C,oCAAqC,kB;IACrC,8BAA0B,kB;G;kDAjB1B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;4DAEA,qB;WAAA,oG;G;4DAAA,oC;IAAA,mH;G;;+DACA,qB;WAAA,2G;G;+DAAA,uC;IAAA,6H;G;;mEACA,qB;WAAA,mH;G;mEAAA,2C;IAAA,yI;G;;kEACA,qB;WAAA,iH;G;kEAAA,0C;IAAA,sI;G;;mEACA,qB;WAAA,mH;G;mEAAA,2C;IAAA,yI;G;;4DACA,qB;WAAA,qG;G;4DAAA,oC;IAAA,oH;G;;kEACA,qB;WAAA,iH;G;kEAAA,0C;IAAA,sI;G;;2DACA,qB;WAAA,mG;G;2DAAA,mC;IAAA,iH;G;;0DACA,qB;WAAA,iG;G;0DAAA,kC;IAAA,8G;G;;8DACA,qB;WAAA,yG;G;8DAAA,sC;IAAA,0H;G;;sDACA,qB;WAAA,yF;G;sDAAA,8B;IAAA,kG;G;;8DACA,qB;WAAA,yG;G;8DAAA,sC;IAAA,0H;G;;yDACA,qB;WAAA,+F;G;yDAAA,iC;IAAA,2G;G;;mDACA,qB;WAAA,mF;G;mDAAA,2B;IAAA,yF;G;2DAEA,6B;IAGsC,IAAO,I;IAAzC,uCAAkC,cAAO,cAAP,MAAO,CAAP,6B;EACtC,C;4DACA,8B;IAA6C,uCAAkC,O;EAAQ,C;wDACvF,4B;IACI,0CAA2B,SAAX,mBAAW,MAAiB,KAAjB,CAAwB,MAAnD,C;EACJ,C;wDACA,4B;I1O9CA,UAAa,E;I0O8CqE,K1O5C9E,CADG,GACH,C;I0O4CqD,0C1O7ClD,G0O6CkD,C;EAAgC,C;oDACzF,2B;IAAgC,+BAA0B,I;EAAK,C;oDAC/D,kC;IAA8C,+BAA0B,W;EAAY,C;oDACpF,4B;IAAgD,6B;IjPuCrC,kBAAX,mB;IiPvCuF,KrO8BvF,a;IqO9BgD,iBjPuChD,MYRO,WZQmB,UAA1B,C;EiPvC8F,C;EAhC3C,6C;IAAE,elP2CX,UkP3CW,EAAa,EAAb,C;EAAiB,C;;;;;;EClB1E,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,oD;IAAM,wD;G;;EAAN,uC;IAAA,uB;IAAA,+B;G;;EAAM,yC;IAAA,uB;IAAA,iC;G;;;;;;EAFV,6B;IAAA,uE;G;;EAAA,kC;IAAA,a;MAAA,Y;QAAA,oC;MAAA,c;QAAA,sC;MAAA,QAAA,iF;;G;;;EC+BA,2C;IACmE,kBAAvD,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,C;IAA6D,KvOgDrE,a;IuOhDE,+BvOiDK,WuOjDqE,SAA1E,C;G;ECvB2B,oD;IAG7B,+BAAuC,IAAvC,EAA6C,QAA7C,C;IAQA,+BAAgC,kB;IAChC,iCAAyC,kB;G;yDARzC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;mEAGI,qB;IAAQ,OAAyC,UAAN,CAAkB,eAAlB,C;G;mEAC3C,4B;IAAa,qBAAQ,eAAR,EAAyB,KAAzB,C;EAAgC,C;;2DACjD,qB;WAAA,4F;G;2DAAA,4B;IAAA,mG;G;;6DACA,qB;WAAA,gG;G;6DAAA,8B;I3OAA,+BAAqB,wDAArB,IAA6B,2C;G;8D2OE7B,6B;IAGkC,IAAO,I;IAArC,mCAA8B,cAAO,cAAP,MAAO,CAAP,6B;EAClC,C;+DACA,8B;IAAyC,mCAA8B,O;EAAQ,C;;;;;;EC5BnF,0C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,kE;IACA,sE;IACA,sE;IACA,0E;IACA,8E;IACA,0E;IACA,kE;G;;EANA,8C;IAAA,8B;IAAA,sC;G;;EACA,gD;IAAA,8B;IAAA,wC;G;;EACA,gD;IAAA,8B;IAAA,wC;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,oD;IAAA,8B;IAAA,4C;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,8C;IAAA,8B;IAAA,sC;G;;;;;;EARJ,oC;IAAA,mS;G;;EAAA,yC;IAAA,a;MAAA,Y;QAAA,2C;MAAA,c;QAAA,6C;MAAA,c;QAAA,6C;MAAA,gB;QAAA,+C;MAAA,kB;QAAA,iD;MAAA,gB;QAAA,+C;MAAA,Y;QAAA,2C;MAAA,QAAA,+F;;G;;ECAA,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IAEI,8E;IAAU,8E;IAAU,0E;G;;EAApB,oD;IAAA,gC;IAAA,4C;G;;EAAU,oD;IAAA,gC;IAAA,4C;G;;EAAU,kD;IAAA,gC;IAAA,0C;G;;;;;;EAFxB,sC;IAAA,yI;G;;EAAA,2C;IAAA,a;MAAA,gB;QAAA,iD;MAAA,gB;QAAA,iD;MAAA,c;QAAA,+C;MAAA,QAAA,iG;;G;;;ECgBA,kD;IACiF,kBAArE,+BAA2B,qBAA3B,EAA2D,OAAT,QAAS,CAA3D,C;IAA2E,K3O+DnF,a;I2O/DE,+B3OgEK,W2OhEmF,SAAxF,C;G;ECXoB,0C;IAEtB,qB;MjPPA,UAAa,E;MiPOb,QjPNO,G;KiPOP,wB;IAFA,gB;IACA,oB;G;gDAEA,mB;IACU,QAAN,YAAM,C;EACV,C;yCAEA,Y;IAAe,kCAAc,SAAd,EAAoB,YAApB,S1PDmD,Y0PCvB,c1PDuB,C0PCnD,E;G;mDAEf,4B;IxPyEW,kBAAX,mB;IwPzE8E,K5OgE9E,a;I4OhEsD,qBxPyEtD,MYRO,WZQmB,UAA1B,C;EwPzEqF,C;;;;;;;ECAzF,iC;IACgD,kBAApC,wBAAoB,cAApB,C;IAA0C,K7O+DlD,a;I6O/DE,+B7OgEK,W6OhEkD,SAAvD,C;G;ECV4B,qD;IAG9B,mCAA4C,IAA5C,EAAkD,QAAlD,C;IAKA,oCAA+B,kB;IAC/B,iCAA6B,kB;G;0DAL7B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;iEAEA,qB;WAAA,uG;G;iEAAA,iC;IAAA,mH;G;;8DACA,qB;WAAA,iG;G;8DAAA,8B;IAAA,0G;G;;;;;;EChBJ,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,oE;IACA,0E;IACA,4E;IACA,oF;IACA,gF;IACA,sE;IACA,8E;IACA,wF;IACA,sE;IACA,4F;IACA,yF;IACA,+F;IACA,2F;G;;EAZA,+C;IAAA,+B;IAAA,uC;G;;EACA,kD;IAAA,+B;IAAA,0C;G;;EACA,mD;IAAA,+B;IAAA,2C;G;;EACA,uD;IAAA,+B;IAAA,+C;G;;EACA,qD;IAAA,+B;IAAA,6C;G;;EACA,gD;IAAA,+B;IAAA,wC;G;;EACA,oD;IAAA,+B;IAAA,4C;G;;EACA,yD;IAAA,+B;IAAA,iD;G;;EACA,gD;IAAA,+B;IAAA,wC;G;;EACA,2D;IAAA,+B;IAAA,mD;G;;EACA,yD;IAAA,+B;IAAA,iD;G;;EACA,4D;IAAA,+B;IAAA,oD;G;;EACA,0D;IAAA,+B;IAAA,kD;G;;;;;;EAdJ,qC;IAAA,slB;G;;EAAA,0C;IAAA,a;MAAA,Y;QAAA,4C;MAAA,e;QAAA,+C;MAAA,gB;QAAA,gD;MAAA,oB;QAAA,oD;MAAA,kB;QAAA,kD;MAAA,a;QAAA,6C;MAAA,iB;QAAA,iD;MAAA,sB;QAAA,sD;MAAA,a;QAAA,6C;MAAA,wB;QAAA,wD;MAAA,sB;QAAA,sD;MAAA,yB;QAAA,yD;MAAA,uB;QAAA,uD;MAAA,QAAA,iG;;G;;;ECeA,mD;IACmF,kBAAvE,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,C;IAA6E,KhPgErF,a;IgPhEE,+BhPiEK,WgPjEqF,SAA1F,C;G;ECRmD,sD;IAIrD,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,mCAA8B,kB;IAC9B,gCAA4B,kB;G;kDAL5B,+B;IjQ0mSO,kBAAM,eiQzmSD,QjQymSc,OAAb,C;IA6UA,Q;IAAb,wBiQt7SY,QjQs7SZ,gB;MAAa,WiQt7SD,QjQs7SZ,M;MACI,WAAY,WiQv7SW,GjQu7SG,IiQv7SA,MAAH,EjQu7SG,IiQv7SY,OAAf,CjQu7SX,C;;IiQv7SZ,gCjQw7SG,WiQx7SH,C;EACJ,C;;wDAEA,qB;WAAA,6F;G;wDAAA,gC;IAAA,wG;G;;qDACA,qB;WAAA,uF;G;qDAAA,6B;IAAA,+F;G;;;;;;EClBJ,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,oD;IACA,0D;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,gE;IACA,iE;IACA,iE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;IACA,mE;G;;EA1BA,uC;IAAA,uB;IAAA,+B;G;;EACA,0C;IAAA,uB;IAAA,kC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;EACA,8C;IAAA,uB;IAAA,sC;G;;;;;;EA5BJ,6B;IAAA,o/B;G;;EAAA,kC;IAAA,a;MAAA,Y;QAAA,oC;MAAA,e;QAAA,uC;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,kB;QAAA,0C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,mB;QAAA,2C;MAAA,QAAA,iF;;G;;;ECoBmE,0B;IAAE,ehQyCvB,UgQzCuB,EAAa,EAAb,C;EAAiB,C;EADtF,2C;IACwF,kBAA5E,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,EAAuD,YAAvD,C;IAAkF,KnP4D1F,a;ImP5DE,+BnP6DK,WmP7D0F,SAA/F,C;G;EAEN,sD;IACkF,kBAAtE,wBAA0B,cAA1B,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,KnPyDpF,a;ImPzDE,+BnP0DK,WmP1DoF,SAAzF,C;G;ECH+C,+C;IAGjD,+BAA2B,IAA3B,EAAiC,QAAjC,C;IAKA,gCAA+C,kB;IAC/C,sCAAwC,kB;IACxC,wCAA4C,kB;IAC5C,yCAA8C,kB;IAC9C,mCAA8B,kB;IAC9B,4CAA+D,kB;IAC/D,yCAAoC,kB;IACpC,sCAA8B,kB;IAC9B,iCAAsC,kB;IACtC,mCAAwC,kB;IACxC,oCAAyC,kB;IACzC,gCAAqC,kB;IACrC,iCAAuC,kB;IACvC,mCAAwC,kB;IACxC,oCAA+B,kB;IAC/B,yCAA2C,kB;IAC3C,4CAAoC,kB;IACpC,yCAAoC,kB;G;oDArBpC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;uDAEA,qB;WAAA,yF;G;uDAAA,6B;IAAA,iG;G;;6DACA,qB;WAAA,qG;G;6DAAA,mC;IAAA,mH;G;;+DACA,qB;WAAA,yG;G;+DAAA,qC;IAAA,yH;G;;gEACA,qB;WAAA,2G;G;gEAAA,sC;IvPVA,uCAAqB,2DAArB,IAA6B,2D;G;;0DuPW7B,qB;WAAA,+F;G;0DAAA,gC;IAAA,0G;G;;mEACA,qB;WAAA,iH;G;mEAAA,yC;IAAA,qI;G;;gEACA,qB;WAAA,2G;G;gEAAA,sC;IAAA,4H;G;;6DACA,qB;WAAA,qG;G;6DAAA,mC;IAAA,mH;G;;wDACA,qB;WAAA,2F;G;wDAAA,8B;IAAA,oG;G;;0DACA,qB;WAAA,+F;G;0DAAA,gC;IAAA,0G;G;;2DACA,qB;WAAA,iG;G;2DAAA,iC;IAAA,6G;G;;uDACA,qB;WAAA,yF;G;uDAAA,6B;IAAA,iG;G;;yDACA,qB;WAAA,4F;G;yDAAA,+B;IAAA,sG;G;;0DACA,qB;WAAA,+F;G;0DAAA,gC;IAAA,0G;G;;2DACA,qB;WAAA,iG;G;2DAAA,iC;IAAA,6G;G;;gEACA,qB;WAAA,2G;G;gEAAA,sC;IAAA,4H;G;;mEACA,qB;WAAA,iH;G;;gEACA,qB;WAAA,2G;G;gEAAA,sC;IAAA,4H;G;mDAEA,8B;IAAoD,mCAAS,OAAT,C;EAAiB,C;qDACrE,2B;IAA+B,8BAAyB,I;EAAK,C;qDAC7D,kC;IAA6C,8BAAyB,W;EAAY,C;qDAClF,4B;IAA+C,6B;IhQuCpC,kBAAX,mB;IgQvCqF,KpP8BrF,a;IoP9B+C,gBhQuC/C,MYRO,WZQmB,UAA1B,C;EgQvC4F,C;qDAC5F,2B;IAAuD,8BAAyB,I;EAAK,C;yDACrF,4B;IzPnDA,UAAa,E;IyPmDmE,KzPjD5E,CADG,GACH,C;IyPiDoD,yCzPlDjD,GyPkDiD,C;EAA+B,C;2DACvF,4B;IzPpDA,UAAa,E;IyPoDyE,KzPlDlF,CADG,GACH,C;IyPkDwD,2CzPnDrD,GyPmDqD,C;EAAiC,C;yDAC7F,+B;IASmB,Q;IARf,IAAI,QpQsnND,YAAQ,CoQtnNX,C;MACI,M;KzPvDR,UAAa,E;IyP0DT,iBzPzDG,G;IXmpWS,U;IAAhB,4BoQxlWI,QpQwlWJ,kB;MAAgB,coQxlWZ,QpQwlWJ,Q;MoQxlWuB,IAAC,MpQwlWK,OoQxlWL,aAAD;QAAM,QpQwlWA,OoQxlWA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,yCAAe,yDAAf,C;EACJ,C;uDACA,4B;IACI,uCAAwB,MAAX,mBAAW,MAAc,KAAd,CAAqB,MAA7C,C;EACJ,C;uDACA,qC;IACI,uCAAwB,QAAX,mBAAW,MAAgB,OAAhB,EAAiC,KAAjC,CAAwC,MAAhE,C;EACJ,C;4DACA,4B;IzPtEA,UAAa,E;IyPsEyE,KzPpElF,CADG,GACH,C;IyPoEuD,4CzPrEpD,GyPqEoD,C;EAAkC,C;+DAC7F,6B;IAGwC,IAAO,I;IAA3C,yCAAoC,cAAO,cAAP,MAAO,CAAP,6B;EACxC,C;gEACA,8B;IACI,yCAAoC,O;EACxC,C;+DACA,2B;IAA2C,wCAAmC,I;EAAK,C;+DACnF,kC;IAA2B,qB;MAAA,QAAiB,I;IAAM,oB;MAAA,OAAgB,I;IAAQ,6B;IzPhF1E,UAAa,E;IACN,GyP+E2G,CAAK,OAAL,S;IzP/E3G,GyP+EkI,CAAK,MAAL,Q;IAA/D,0BzP/EnE,G;EyP+EwJ,C;+DAC/J,2B;IAA2B,oB;MAAA,OAAe,M;IAAU,wCAAmC,I;EAAK,C;2DAC5F,4B;IzPlFA,UAAa,E;IyPkF2E,KzPhFpF,CADG,GACH,C;IyPgFyD,4CzPjFtD,GyPiFsD,C;EAAkC,C;;;;;;ECnFnG,gD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,8C;IAAA,iD;K;IAEI,8E;IAAM,kF;IAAQ,gF;G;;EAAd,oD;IAAA,oC;IAAA,4C;G;;EAAM,sD;IAAA,oC;IAAA,8C;G;;EAAQ,qD;IAAA,oC;IAAA,6C;G;;;;;;EAFlB,0C;IAAA,8I;G;;EAAA,+C;IAAA,a;MAAA,Y;QAAA,iD;MAAA,c;QAAA,mD;MAAA,a;QAAA,kD;MAAA,QAAA,gG;;G;;ECAA,8C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,4C;IAAA,+C;K;IAEI,wE;IAAK,8E;IAAQ,8E;G;;EAAb,iD;IAAA,kC;IAAA,yC;G;;EAAK,oD;IAAA,kC;IAAA,4C;G;;EAAQ,oD;IAAA,kC;IAAA,4C;G;;;;;;EAFjB,wC;IAAA,wI;G;;EAAA,6C;IAAA,a;MAAA,W;QAAA,8C;MAAA,c;QAAA,iD;MAAA,c;QAAA,iD;MAAA,QAAA,8F;;G;;ECAA,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,wE;IAAU,oF;IAAgB,gE;G;;EAA1B,iD;IAAA,6B;IAAA,yC;G;;EAAU,uD;IAAA,6B;IAAA,+C;G;;EAAgB,6C;IAAA,6B;IAAA,qC;G;;;;;;EAF9B,mC;IAAA,oI;G;;EAAA,wC;IAAA,a;MAAA,gB;QAAA,8C;MAAA,sB;QAAA,oD;MAAA,Y;QAAA,0C;MAAA,QAAA,yF;;G;;ECAA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,0D;G;;EAAA,0C;IAAA,yB;IAAA,kC;G;;;;;;EAFJ,+B;IAAA,yC;G;;EAAA,oC;IAAA,a;MAAA,a;QAAA,uC;MAAA,QAAA,qF;;G;;EC+CA,2C;IAAoE,uBAAkB,UAAW,W;EAAW,C;EAC5G,6C;IAAmD,uBAAkB,U;EAAW,C;EAChF,uC;IAA8D,qBAAgB,QAAS,W;EAAW,C;EAClG,yC;IAA+C,qBAAgB,Q;EAAS,C;;EAUxE,6C;IACuE,kBAA3D,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,C;IAAiE,KzPmBzE,a;IyPnBE,+BzPoBK,WyPpByE,SAA9E,C;G;ECjDqB,oC;IAEvB,kCAAyC,IAAzC,EpQkEsC,WoQlEtC,EAAyD,gCAAzD,C;IAEA,uCAAmC,kB;IACnC,qCAAiC,kB;IACjC,mCAA2B,kB;IAC3B,8BAA0B,kB;IAC1B,mCAAuC,kB;IACvC,uCAA+B,kB;IAC/B,oCAAgC,kB;G;;6DANhC,qB;WAAA,sG;G;6DAAA,oC;IAAA,qH;G;;2DACA,qB;WAAA,kG;G;2DAAA,kC;IAAA,+G;G;;yDACA,qB;WAAA,8F;G;yDAAA,gC;IAAA,yG;G;;oDACA,qB;WAAA,oF;G;oDAAA,2B;IAAA,0F;G;;yDACA,qB;WAAA,8F;G;yDAAA,gC;I7PCA,iCAAqB,oDAArB,IAA6B,+C;G;;6D6PA7B,qB;WAAA,sG;G;6DAAA,oC;IAAA,qH;G;;0DACA,qB;WAAA,gG;G;0DAAA,iC;IAAA,4G;G;oDAEA,2B;IAA+B,8BAAyB,I;EAAK,C;oDAC7D,kC;IAA6C,8BAAyB,W;EAAY,C;oDAClF,4B;IAA+C,6B;ItQ+DpC,kBAAX,mB;IsQ/DqF,K1PsDrF,a;I0PtD+C,gBtQ+D/C,MYRO,WZQmB,UAA1B,C;EsQ/D4F,C;oDAC5F,2B;IAAuD,8BAAyB,I;EAAK,C;qDACrF,2B;IAAgC,+BAA0B,I;EAAK,C;qDAC/D,kC;IAA8C,+BAA0B,W;EAAY,C;qDACpF,4B;IAAgD,6B;ItQ2DrC,kBAAX,mB;IsQ3DuF,K1PkDvF,a;I0PlDgD,iBtQ2DhD,MYRO,WZQmB,UAA1B,C;EsQ3D8F,C;EAhBrC,8C;IAAE,evQ+CjB,UuQ/CiB,EAAa,EAAb,C;EAAiB,C;;;;;;ECXtD,mD;IAD1B,e;IAC2B,oC;IAD3B,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,yEAAU,YAAV,C;IACA,6EAAY,cAAZ,C;IACA,mEAAO,QAAP,C;IACA,qEAAQ,UAAR,C;IACA,yEAAU,YAAV,C;IACA,+DAAK,MAAL,C;IACA,uEAAS,WAAT,C;IACA,2EAAW,aAAX,C;IACA,iEAAM,OAAN,C;IACA,mEAAO,SAAP,C;IACA,wEAAS,WAAT,C;IACA,8DAAI,KAAJ,C;G;;SAZuB,Y;MAAA,+B;K;;;EACvB,iD;IAAA,4B;IAAA,yC;G;;EACA,mD;IAAA,4B;IAAA,2C;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;EACA,+C;IAAA,4B;IAAA,uC;G;;EACA,iD;IAAA,4B;IAAA,yC;G;;EACA,4C;IAAA,4B;IAAA,oC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,kD;IAAA,4B;IAAA,0C;G;;EACA,6C;IAAA,4B;IAAA,qC;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,2C;IAAA,4B;IAAA,mC;G;uCAEA,Y;IAAkC,qB;G;;;;;;EAftC,kC;IAAA,6d;G;;EAAA,uC;IAAA,a;MAAA,iB;QAAA,8C;MAAA,mB;QAAA,gD;MAAA,c;QAAA,2C;MAAA,e;QAAA,4C;MAAA,iB;QAAA,8C;MAAA,Y;QAAA,yC;MAAA,gB;QAAA,6C;MAAA,kB;QAAA,+C;MAAA,a;QAAA,0C;MAAA,c;QAAA,2C;MAAA,gB;QAAA,6C;MAAA,W;QAAA,wC;MAAA,QAAA,uF;;G;;;ECqBA,kC;IACkD,kBAAtC,yBAAqB,eAArB,C;IAA4C,K5PwDpD,a;I4PxDE,+B5PyDK,W4PzDoD,SAAzD,C;G;EChBqB,2C;IAEvB,qB;MlQTA,UAAa,E;MkQSb,QlQRO,G;KkQSP,wB;IAFA,gB;IACA,oB;G;iDAEA,mB;IACU,QAAN,YAAM,C;EACV,C;0CAEA,Y;IAAe,kCAAc,SAAd,EAAoB,YAApB,S3QHmD,Y2QGvB,c3QHuB,C2QGnD,E;G;qDAEf,2B;IAAwC,yBAAkB,I;EAAK,C;qDAC/D,kC;IAAsD,yBAAkB,W;EAAY,C;qDACpF,4B;IAAwD,uB;IzQqE7C,kBAAX,mB;IyQrEuF,K7P4DvF,a;I6P5DwD,iBzQqExD,MYRO,WZQmB,UAA1B,C;EyQrE8F,C;sDAC9F,4B;IAAgD,0BAAmB,K;EAAM,C;;;;;;;ECL7E,kC;IACkD,kBAAtC,yBAAqB,eAArB,C;IAA4C,K9P+DpD,a;I8P/DE,+B9PgEK,W8PhEoD,SAAzD,C;G;ECToB,6C;IAGtB,oCAAqC,IAArC,EAA2C,QAA3C,C;IAKA,+BAA6B,kB;IAC7B,+BAAuB,kB;G;kDALvB,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;oDAEA,qB;WAAA,qF;G;oDAAA,4B;IlQKA,6BAAqB,+CAArB,IAA6B,uC;G;;oDkQJ7B,qB;WAAA,qF;G;oDAAA,4B;IAAA,4F;G;gDAEA,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;gDACrC,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;gDACrC,wB;IAA4B,kCAAQ,CAAR,C;EAAU,C;;;;;;ECrB1C,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,0D;IAAS,8D;IAAW,0D;G;;EAApB,0C;IAAA,uB;IAAA,kC;G;;EAAS,4C;IAAA,uB;IAAA,oC;G;;EAAW,0C;IAAA,uB;IAAA,kC;G;;;;;;EAFxB,6B;IAAA,+G;G;;EAAA,kC;IAAA,a;MAAA,e;QAAA,uC;MAAA,iB;QAAA,yC;MAAA,e;QAAA,uC;MAAA,QAAA,iF;;G;;ECAA,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,oD;IACA,0D;IACA,4D;IACA,oE;IACA,wE;G;;EAJA,uC;IAAA,uB;IAAA,+B;G;;EACA,0C;IAAA,uB;IAAA,kC;G;;EACA,2C;IAAA,uB;IAAA,mC;G;;EACA,+C;IAAA,uB;IAAA,uC;G;;EACA,iD;IAAA,uB;IAAA,yC;G;;;;;;EANJ,6B;IAAA,2L;G;;EAAA,kC;IAAA,a;MAAA,Y;QAAA,oC;MAAA,e;QAAA,uC;MAAA,gB;QAAA,wC;MAAA,oB;QAAA,4C;MAAA,sB;QAAA,8C;MAAA,QAAA,iF;;G;;;ECeA,2C;IACmE,kBAAvD,wBAAoB,cAApB,EAA6C,OAAT,QAAS,CAA7C,C;IAA6D,KlQgErE,a;IkQhEE,+BlQiEK,WkQjEqE,SAA1E,C;G;ECVyB,kD;IAG3B,mCAAyC,IAAzC,EAAwD,SAAT,QAAS,CAAxD,C;IAEA,sCAA8B,kB;IAC9B,8BAAyB,kB;IACzB,+BAAuB,kB;G;;gEAFvB,qB;WAAA,wG;G;gEAAA,mC;IAAA,sH;G;;wDACA,qB;WAAA,wF;G;uDAAA,2B;IAAA,8F;G;;yDACA,qB;WAAA,0F;G;yDAAA,4B;IAAA,iG;G;4DAEA,wB;IAAkC,yCAAe,CAAf,C;EAAiB,C;4DACnD,wB;IAAkC,yCAAe,CAAf,C;EAAiB,C;4DACnD,wB;IAAmC,yCAAe,CAAf,C;EAAiB,C;qDACpD,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;qDACrC,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;qDACrC,wB;IAA4B,kCAAQ,CAAR,C;EAAU,C;;;;;;;ECJ1C,sC;IACoE,kBAAxD,6BAAyB,mBAAzB,E9Q+D8B,W8Q/D9B,C;IAA8D,KpQ+DtE,a;IoQ/DE,+BpQgEK,WoQhEsE,SAA3E,C;G;ECZsB,4C;IAExB,qB;M1QNA,UAAa,E;M0QMb,Q1QLO,G;K0QMP,wB;IAFA,gB;IACA,oB;G;kDAEA,mB;IACU,QAAN,YAAM,C;EACV,C;2CAEA,Y;IAAe,kCAAc,SAAd,EAAoB,YAApB,SnRAmD,YmRAvB,cnRAuB,CmRAnD,E;G;;;;;;;ECDnB,mC;IACoD,kBAAxC,0BAAsB,gBAAtB,C;IAA8C,KtQmEtD,a;IsQnEE,+BtQoEK,WsQpEsD,SAA3D,C;G;ECIqB,8C;IAGvB,+BAAiC,IAAjC,EAAuC,QAAvC,C;IAKA,mCAA+B,kB;IAC/B,sCAAkC,kB;IAClC,+BAAgC,kB;IAChC,mCAA8B,kB;IAC9B,kCAA8B,kB;IAC9B,gCAA4B,kB;IAC5B,iCAAuC,kB;IACvC,gCAAsC,kB;IACtC,8BAA0B,kB;IAC1B,4CAAuC,kB;IACvC,iCAAmC,kB;G;mDAdnC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;yDAEA,qB;WAAA,8F;G;yDAAA,gC;IAAA,yG;G;;4DACA,qB;WAAA,oG;G;4DAAA,mC;IAAA,kH;G;;qDACA,qB;WAAA,sF;G;qDAAA,4B;IAAA,6F;G;;yDACA,qB;WAAA,8F;G;yDAAA,gC;IAAA,yG;G;;wDACA,qB;WAAA,4F;G;wDAAA,+B;IAAA,sG;G;;sDACA,qB;WAAA,wF;G;sDAAA,6B;IAAA,gG;G;;uDACA,qB;WAAA,0F;G;uDAAA,8B;IAAA,mG;G;;sDACA,qB;WAAA,wF;G;sDAAA,6B;IAAA,gG;G;;oDACA,qB;WAAA,oF;G;oDAAA,2B;IAAA,0F;G;;kEACA,qB;WAAA,gH;G;kEAAA,yC;IAAA,oI;G;;uDACA,qB;WAAA,0F;G;uDAAA,8B;I1QdA,+BAAqB,kDAArB,IAA6B,2C;G;wD0QgB7B,6B;IAGkC,IAAO,I;IAArC,mCAA8B,cAAO,cAAP,MAAO,CAAP,6B;EAClC,C;iDACA,4B;IAAmE,kCAAmB,MAAX,mBAAW,MAAc,KAAd,CAAnB,C;EAAwC,C;iDAC3G,4B;InR8CW,kBAAX,mB;ImR9CiE,KvQqCjE,a;IuQrC4C,kCnR8C5C,MYRO,WZQmB,UAA1B,CmR9C4C,C;EAA4B,C;qDACxE,4B;IACI,sCAAuB,KAAX,mBAAW,MAAa,KAAb,CAAoB,MAA3C,C;EACJ,C;uDACA,4B;IAA2D,iCAA4B,K;EAAM,C;8DAC7F,4B;IAQyB,Q;I5QvDzB,UAAa,E;I4QgDT,Y5Q/CG,G;I4QiDwB,kBAA3B,QpRUsC,UoRVtC,EAAa,YAAb,C;IAAiC,KvQ6BrC,a;IfuhDgB,U;IAAA,SethDT,WuQ9BqC,kBtRojD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MsRpjDyD,UtRojD5C,OE50CmC,I;MoRxOc,YtRojDjD,OE/zCmC,M;MoRpPxD,MAAM,GAAN,IAAa,K;;IAIjB,+CAAqB,uDAArB,C;EACJ,C;;;;;;ECzDJ,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,sD;IACA,0D;IACA,0D;IACA,8D;IACA,kE;IACA,8D;IACA,sD;G;;EANA,wC;IAAA,wB;IAAA,gC;G;;EACA,0C;IAAA,wB;IAAA,kC;G;;EACA,0C;IAAA,wB;IAAA,kC;G;;EACA,4C;IAAA,wB;IAAA,oC;G;;EACA,8C;IAAA,wB;IAAA,sC;G;;EACA,4C;IAAA,wB;IAAA,oC;G;;EACA,wC;IAAA,wB;IAAA,gC;G;;;;;;EARJ,8B;IAAA,yP;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,c;QAAA,uC;MAAA,c;QAAA,uC;MAAA,gB;QAAA,yC;MAAA,kB;QAAA,2C;MAAA,gB;QAAA,yC;MAAA,Y;QAAA,qC;MAAA,QAAA,mF;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,kE;IAAU,kE;IAAU,8D;G;;EAApB,8C;IAAA,0B;IAAA,sC;G;;EAAU,8C;IAAA,0B;IAAA,sC;G;;EAAU,4C;IAAA,0B;IAAA,oC;G;;;;;;EAFxB,gC;IAAA,uH;G;;EAAA,qC;IAAA,a;MAAA,gB;QAAA,2C;MAAA,gB;QAAA,2C;MAAA,c;QAAA,yC;MAAA,QAAA,qF;;G;;;EC8BA,4C;IACqE,kBAAzD,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,C;IAA+D,K1QiDvE,a;I0QjDE,+B1QkDK,W0QlDuE,SAA5E,C;G;ECvBoB,mC;IhRPtB,UAAa,E;IgRSb,8BAA+B,IAA/B,EhRRO,GgRQP,C;IACA,mCAA4C,U;G;;wDAA5C,qB;WAAA,+F;G;wDAAA,gC;ICyBA,iCAAqB,mDAArB,IAA6B,+C;G;kDDvB7B,2B;IAAqC,oBAAU,I;EAAK,C;kDACpD,kC;IAAuB,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IhRb1D,UAAa,E;IACN,GgRY0E,CAAK,OAAL,S;IhRZ1E,GgRYiG,CAAK,MAAL,Q;IAAtC,oBhRZ3D,G;EgRYuH,C;;;;;;EEdlI,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,4D;IAAM,8D;IAAO,wD;IAAI,4D;G;;EAAjB,2C;IAAA,2B;IAAA,mC;G;;EAAM,4C;IAAA,2B;IAAA,oC;G;;EAAO,yC;IAAA,2B;IAAA,iC;G;;EAAI,2C;IAAA,2B;IAAA,mC;G;;;;;;EAFrB,iC;IAAA,kJ;G;;EAAA,sC;IAAA,a;MAAA,Y;QAAA,wC;MAAA,a;QAAA,yC;MAAA,U;QAAA,sC;MAAA,Y;QAAA,wC;MAAA,QAAA,qF;;G;;;ECiBA,iC;IACgD,kBAApC,wBAAoB,cAApB,C;IAA0C,K9Q8DlD,a;I8Q9DE,+B9Q+DK,W8Q/DkD,SAAvD,C;G;ECAuB,gD;IAGzB,kCAA2C,IAA3C,EAAiD,QAAjD,EAA2D,kCAA3D,C;IAKA,gCAAiC,kB;IACjC,sCAAyC,kB;IACzC,0CAAqC,kB;IACrC,gDAA2C,kB;IAC3C,qCAAiC,kB;IACjC,mDAA+C,kB;IAC/C,6BAAqB,kB;IACrB,iCAAkC,kB;IAClC,iCAA+C,kB;IAC/C,iCAAuD,kB;IACvD,mCAAyD,kB;IACzD,oCAA0D,kB;IAC1D,gCAA6C,kB;IAC7C,kCAA+C,kB;IAC/C,mCAAgD,kB;IAChD,sCAA4C,kB;IAC5C,sCAA4C,kB;IAC5C,8BAA0B,kB;IAC1B,4CAAuC,kB;IACvC,4CAAoC,kB;IACpC,yCAA8C,kB;G;qDAxB9C,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;wDAEA,qB;WAAA,0F;G;wDAAA,6B;IAAA,kG;G;;8DACA,qB;WAAA,sG;G;8DAAA,mC;IAAA,oH;G;;kEACA,qB;WAAA,8G;G;kEAAA,uC;IAAA,gI;G;;wEACA,qB;WAAA,0H;G;wEAAA,6C;IAAA,kJ;G;;8DACA,qB;WAAA,qG;G;8DAAA,mC;IAAA,mH;G;;2EACA,qB;WAAA,gI;G;2EAAA,gD;IAAA,2J;G;;qDACA,qB;WAAA,oF;G;qDAAA,0B;IAAA,yF;G;;yDACA,qB;WAAA,4F;G;yDAAA,8B;IAAA,qG;G;;yDACA,qB;WAAA,4F;G;yDAAA,8B;IAAA,qG;G;;yDACA,qB;WAAA,4F;G;yDAAA,8B;IAAA,qG;G;;2DACA,qB;WAAA,gG;G;2DAAA,gC;IAAA,2G;G;;4DACA,qB;WAAA,kG;G;4DAAA,iC;IAAA,8G;G;;wDACA,qB;WAAA,0F;G;wDAAA,6B;IAAA,kG;G;;0DACA,qB;WAAA,8F;G;0DAAA,+B;IAAA,wG;G;;2DACA,qB;WAAA,gG;G;2DAAA,gC;IAAA,2G;G;;8DACA,qB;WAAA,sG;G;8DAAA,mC;IAAA,oH;G;;8DACA,qB;WAAA,sG;G;8DAAA,mC;IAAA,oH;G;;sDACA,qB;WAAA,sF;G;sDAAA,2B;IAAA,4F;G;;oEACA,qB;WAAA,kH;G;oEAAA,yC;IAAA,sI;G;;oEACA,qB;WAAA,kH;G;;iEACA,qB;WAAA,4G;G;iEAAA,sC;IAAA,6H;G;oDAEA,4B;I3RyCW,kBAAX,mB;I2RzCmE,K/QgCnE,a;I+QhC6C,mC3RyC7C,MYRO,WZQmB,UAA1B,C2RzC6C,C;EAA6B,C;0DAC1E,4B;IpRhDA,UAAa,E;IoRgDoE,KpR9C7E,CADG,GACH,C;IoR8CqD,yCpR/ClD,GoR+CkD,C;EAA+B,C;oEACxF,4B;IACI,mDAAoC,kBAAX,mBAAW,EAAkB,KAAlB,CAAyB,MAA7D,C;EACJ,C;0DACA,4B;IACI,yCAA0B,gBAAX,mBAAW,MAAwB,KAAxB,CAA+B,MAAzD,C;EACJ,C;0DACA,qC;IACI,yCAA0B,kBAAX,mBAAW,MAA0B,OAA1B,EAA2C,KAA3C,CAAkD,MAA5E,C;EACJ,C;qDACA,4B;I3R8BW,kBAAX,mB;I2R9BqE,K/QqBrE,a;I+QrB8C,oC3R8B9C,MYRO,WZQmB,UAA1B,C2R9B8C,C;EAA8B,C;gEAC5E,6B;IAGwC,IAAO,I;IAA3C,yCAAoC,cAAO,cAAP,MAAO,CAAP,6B;EACxC,C;iEACA,8B;IAA+C,yCAAoC,O;EAAQ,C;gEAC3F,2B;IAAyC,wCAAmC,I;EAAK,C;gEACjF,kC;IAA2B,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IAAQ,6B;IpRlEtE,UAAa,E;IACN,GoRiEuG,CAAK,OAAL,S;IpRjEvG,GoRiE8H,CAAK,MAAL,Q;IAA/D,0BpRjE/D,G;EoRiEoJ,C;6DAC3J,4B;IpRnEA,UAAa,E;IoRmE4E,KpRjErF,CADG,GACH,C;IoRiE0D,4CpRlEvD,GoRkEuD,C;EAAkC,C;EA/CrC,gD;IAAE,e5RwCnB,U4RxCmB,EAAa,EAAb,C;EAAiB,C;;;;;;ECrBlF,iD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,+C;IAAA,kD;K;IAEI,gF;IAAM,oF;IAAQ,kF;G;;EAAd,qD;IAAA,qC;IAAA,6C;G;;EAAM,uD;IAAA,qC;IAAA,+C;G;;EAAQ,sD;IAAA,qC;IAAA,8C;G;;;;;;EAFlB,2C;IAAA,iJ;G;;EAAA,gD;IAAA,a;MAAA,Y;QAAA,kD;MAAA,c;QAAA,oD;MAAA,a;QAAA,mD;MAAA,QAAA,kG;;G;;ECAA,+C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,6C;IAAA,gD;K;IAEI,0E;IAAK,gF;G;;EAAL,kD;IAAA,mC;IAAA,0C;G;;EAAK,qD;IAAA,mC;IAAA,6C;G;;;;;;EAFT,yC;IAAA,8F;G;;EAAA,8C;IAAA,a;MAAA,W;QAAA,+C;MAAA,c;QAAA,kD;MAAA,QAAA,gG;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IACA,4F;IACA,kG;IACA,0F;IACA,gG;IACA,wF;IACA,8F;G;;EANA,0C;IAAA,0B;IAAA,kC;G;;EACA,2D;IAAA,0B;IAAA,mD;G;;EACA,8D;IAAA,0B;IAAA,sD;G;;EACA,0D;IAAA,0B;IAAA,kD;G;;EACA,6D;IAAA,0B;IAAA,qD;G;;EACA,yD;IAAA,0B;IAAA,iD;G;;EACA,4D;IAAA,0B;IAAA,oD;G;;;;;;EARJ,gC;IAAA,8V;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,6B;QAAA,wD;MAAA,gC;QAAA,2D;MAAA,4B;QAAA,uD;MAAA,+B;QAAA,0D;MAAA,2B;QAAA,sD;MAAA,8B;QAAA,yD;MAAA,QAAA,uF;;G;;ECiCI,mC;IAAS,gB;IAAD,QAAC,2BAAY,YAAZ,0DAAD,YAAuE,wCAAvE,O;G;EACR,0C;IAAa,UAAY,YAAZ,IAA4B,uC;EAAkB,C;EAE3D,iC;IAAS,gB;IAAD,QAAC,2BAAY,UAAZ,0DAAD,YAAmE,sCAAnE,O;G;EACR,wC;IAAa,UAAY,UAAZ,IAA0B,uC;EAAkB,C;;EAK7D,8C;IACyE,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,KnRqC3E,a;ImRrCE,+BnRsCK,WmRtC2E,SAAhF,C;G;ECjCsC,gE;IAIxC,+BAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAEA,gCAAiC,kB;IACjC,iCAAkC,kB;G;;+DADlC,qB;WAAA,iG;G;+DAAA,6B;IAAA,yG;G;;gEACA,qB;WAAA,mG;G;gEAAA,8B;IAAA,4G;G;2DAEA,4B;IhSsEW,kBAAX,mB;IgStEmE,KpR6DnE,a;IoR7D6C,mChSsE7C,MYRO,WZQmB,UAA1B,CgStE6C,C;EAA6B,C;4DAC1E,4B;IhSqEW,kBAAX,mB;IgSrEqE,KpR4DrE,a;IoR5D8C,oChSqE9C,MYRO,WZQmB,UAA1B,CgSrE8C,C;EAA8B,C;;;;;;ECpBhF,6C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAEI,wE;IACA,8E;IACA,4E;G;;EAFA,iD;IAAA,iC;IAAA,yC;G;;EACA,oD;IAAA,iC;IAAA,4C;G;;EACA,mD;IAAA,iC;IAAA,2C;G;;;;;;EAJJ,uC;IAAA,uI;G;;EAAA,4C;IAAA,a;MAAA,Y;QAAA,8C;MAAA,e;QAAA,iD;MAAA,c;QAAA,gD;MAAA,QAAA,qG;;G;;;ECqBuF,oC;IAAE,enSwC3C,UmSxC2C,EAAa,EAAb,C;EAAiB,C;EAD1G,qD;IAC4G,kBAAhG,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,EAA2E,sBAA3E,C;IAAsG,KtR2D9G,a;IsR3DE,+BtR4DK,WsR5D8G,SAAnH,C;G;EAEN,gE;IACgG,kBAApF,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,EAA2E,OAA3E,C;IAA0F,KtRwDlG,a;IsRxDE,+BtRyDK,WsRzDkG,SAAvG,C;G;ECZmB,4C;IAGrB,kCAAuC,IAAvC,EAA6C,QAA7C,EAAuD,8BAAvD,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,mCAAoC,kB;IACpC,kCAA8B,kB;IAC9B,+BAA0B,kB;IAC1B,8BAA0B,kB;IAC1B,oCAAyC,kB;G;iDAXzC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;oDAEA,qB;WAAA,sF;G;oDAAA,6B;IAAA,8F;G;;8DACA,qB;WAAA,0G;G;8DAAA,uC;IAAA,4H;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;IAAA,uG;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;IAAA,uG;G;;sDACA,qB;WAAA,0F;G;sDAAA,+B;IAAA,oG;G;;mDACA,qB;WAAA,oF;G;mDAAA,4B;IAAA,2F;G;;kDACA,qB;WAAA,kF;G;kDAAA,2B;IAAA,wF;G;;yDACA,qB;WAAA,+F;G;yDAAA,kC;I1RNA,kCAAqB,oDAArB,IAA6B,mD;G;mD0RQ7B,4B;InS4DW,kBAAX,mB;ImS5DyE,KvRmDzE,a;IuRnDgD,sCnS4DhD,MYRO,WZQmB,UAA1B,CmS5DgD,C;EAAgC,C;EAdzB,4C;IAAE,epS8Cf,UoS9Ce,EAAa,EAAb,C;EAAiB,C;;;;;;ECf9E,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,0E;IAAY,sE;G;;EAAZ,kD;IAAA,4B;IAAA,0C;G;;EAAY,gD;IAAA,4B;IAAA,wC;G;;;;;;EAFhB,kC;IAAA,yF;G;;EAAA,uC;IAAA,a;MAAA,kB;QAAA,+C;MAAA,gB;QAAA,6C;MAAA,QAAA,qF;;G;;ECAA,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,kD;IACA,8D;IACA,0D;IACA,0E;IACA,4D;G;;EAJA,sC;IAAA,sB;IAAA,8B;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,kD;IAAA,sB;IAAA,0C;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;;;;;EANJ,4B;IAAA,wL;G;;EAAA,iC;IAAA,a;MAAA,Y;QAAA,mC;MAAA,kB;QAAA,yC;MAAA,gB;QAAA,uC;MAAA,wB;QAAA,+C;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;G;;;ECuBA,0C;IACiE,kBAArD,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,C;IAA2D,K1RwDnE,a;I0RxDE,+B1RyDK,W0RzDmE,SAAxE,C;G;ECbiC,2D;IAInC,oCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAEA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,8BAA+B,kB;IAC/B,8BAA0B,kB;IAC1B,kCAAmC,kB;IACnC,qCAAyC,kB;G;;0DANzC,qB;WAAA,4F;G;0DAAA,6B;IAAA,oG;G;;oEACA,qB;WAAA,gH;G;oEAAA,uC;IAAA,kI;G;;6DACA,qB;WAAA,kG;G;6DAAA,gC;IAAA,6G;G;;wDACA,qB;WAAA,wF;G;wDAAA,2B;IAAA,8F;G;;wDACA,qB;WAAA,wF;G;wDAAA,2B;IAAA,8F;G;;4DACA,qB;WAAA,gG;G;4DAAA,+B;IAAA,0G;G;;+DACA,qB;WAAA,sG;G;+DAAA,kC;I9RFA,mCAAqB,0DAArB,IAA6B,mD;G;oD8RI7B,4B;IvSgEW,kBAAX,mB;IuShE+D,K3RuD/D,a;I2RvD2C,iCvSgE3C,MYRO,WZQmB,UAA1B,CuShE2C,C;EAA2B,C;wDACtE,4B;IvS+DW,kBAAX,mB;IuS/DuE,K3RsDvE,a;I2RtD+C,qCvS+D/C,MYRO,WZQmB,UAA1B,CuS/D+C,C;EAA+B,C;;;;;;EC1BlF,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,8D;IACA,0E;IACA,sE;IACA,4E;G;;EAHA,4C;IAAA,4B;IAAA,oC;G;;EACA,kD;IAAA,4B;IAAA,0C;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,mD;IAAA,4B;IAAA,2C;G;;;;;;EALJ,kC;IAAA,wK;G;;EAAA,uC;IAAA,a;MAAA,Y;QAAA,yC;MAAA,kB;QAAA,+C;MAAA,gB;QAAA,6C;MAAA,mB;QAAA,gD;MAAA,QAAA,2F;;G;;;EC0B6E,+B;IAAE,kB1SmCjC,U0SnCiC,EAAgB,EAAhB,C;EAAoB,C;EADnG,gD;IACqG,kBAAzF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA+F,K7RsDvG,a;I6RtDE,+B7RuDK,W6RvDuG,SAA5G,C;G;EAEN,2D;IACsF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,K7RmDxF,a;I6RnDE,+B7RoDK,W6RpDwF,SAA7F,C;G;ECpB4B,qD;IAG9B,kCAAgD,IAAhD,EAAsD,QAAtD,EAAgE,uCAAhE,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,kCAA8B,kB;IAC9B,+BAA0B,kB;IAC1B,qCAAyC,kB;G;0DATzC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;6DAEA,qB;WAAA,+F;G;6DAAA,6B;IAAA,uG;G;;uEACA,qB;WAAA,mH;G;uEAAA,uC;IAAA,qI;G;;gEACA,qB;WAAA,qG;G;gEAAA,gC;IAAA,gH;G;;+DACA,qB;WAAA,mG;G;+DAAA,+B;IAAA,6G;G;;4DACA,qB;WAAA,6F;G;4DAAA,4B;IAAA,oG;G;;kEACA,qB;WAAA,yG;G;kEAAA,kC;IjSDA,mCAAqB,6DAArB,IAA6B,mD;G;EiSTmC,qD;IAAE,e3SiDxB,U2SjDwB,EAAa,EAAb,C;EAAiB,C;;;;;;ECZvF,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,oE;IACA,gF;IACA,4E;IACA,4F;IACA,wE;IACA,8E;IACA,4E;IACA,oE;IACA,wF;IACA,oF;G;;EATA,+C;IAAA,+B;IAAA,uC;G;;EACA,qD;IAAA,+B;IAAA,6C;G;;EACA,mD;IAAA,+B;IAAA,2C;G;;EACA,2D;IAAA,+B;IAAA,mD;G;;EACA,iD;IAAA,+B;IAAA,yC;G;;EACA,oD;IAAA,+B;IAAA,4C;G;;EACA,mD;IAAA,+B;IAAA,2C;G;;EACA,+C;IAAA,+B;IAAA,uC;G;;EACA,yD;IAAA,+B;IAAA,iD;G;;EACA,uD;IAAA,+B;IAAA,+C;G;;;;;;EAXJ,qC;IAAA,gc;G;;EAAA,0C;IAAA,a;MAAA,Y;QAAA,4C;MAAA,kB;QAAA,kD;MAAA,gB;QAAA,gD;MAAA,wB;QAAA,wD;MAAA,c;QAAA,8C;MAAA,iB;QAAA,iD;MAAA,gB;QAAA,gD;MAAA,Y;QAAA,4C;MAAA,sB;QAAA,sD;MAAA,oB;QAAA,oD;MAAA,QAAA,iG;;G;;;ECoBA,mD;IACmF,kBAAvE,gCAA4B,sBAA5B,EAA6D,OAAT,QAAS,CAA7D,C;IAA6E,KhS2DrF,a;IgS3DE,+BhS4DK,WgS5DqF,SAA1F,C;G;ECN0B,mD;IAG5B,kCAA8C,IAA9C,EAAoD,QAApD,EAA8D,qCAA9D,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,8BAA0B,kB;IAC1B,kCAA8B,kB;IAC9B,qCAAyC,kB;IACzC,4CAAoC,kB;IACpC,yCAA8C,kB;G;wDAX9C,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;2DAEA,qB;WAAA,6F;G;2DAAA,6B;IAAA,qG;G;;qEACA,qB;WAAA,iH;G;qEAAA,uC;IAAA,mI;G;;8DACA,qB;WAAA,mG;G;8DAAA,gC;IAAA,8G;G;;yDACA,qB;WAAA,yF;G;yDAAA,2B;IAAA,+F;G;;6DACA,qB;WAAA,iG;G;6DAAA,+B;IAAA,2G;G;;gEACA,qB;WAAA,uG;G;gEAAA,kC;IpSPA,mCAAqB,2DAArB,IAA6B,mD;G;;uEoSQ7B,qB;WAAA,qH;G;uEAAA,yC;IAAA,yI;G;;oEACA,qB;WAAA,+G;G;oEAAA,sC;IAAA,gI;G;mEAEA,6B;IAGwC,IAAO,I;IAA3C,yCAAoC,cAAO,cAAP,MAAO,CAAP,6B;EACxC,C;oEACA,8B;IAA+C,yCAAoC,O;EAAQ,C;mEAC3F,2B;IAAyC,wCAAmC,I;EAAK,C;mEACjF,kC;IAA2B,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IAAQ,6B;ItStCtE,UAAa,E;IACN,GsSqCuG,CAAK,OAAL,S;ItSrCvG,GsSqC8H,CAAK,MAAL,Q;IAA/D,0BtSrC/D,G;EsSqCoJ,C;mEAC3J,2B;IAA2B,oB;MAAA,OAAe,M;IAAU,wCAAmC,I;EAAK,C;gEAC5F,4B;ItSxCA,UAAa,E;IsSwC4E,KtStCrF,CADG,GACH,C;IsSsC0D,4CtSvCvD,GsSuCuD,C;EAAkC,C;EAvBlC,mD;IAAE,e9S2CtB,U8S3CsB,EAAa,EAAb,C;EAAiB,C;;;;;;EClBrF,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,gE;IACA,gE;IACA,4E;G;;EAFA,6C;IAAA,6B;IAAA,qC;G;;EACA,6C;IAAA,6B;IAAA,qC;G;;EACA,mD;IAAA,6B;IAAA,2C;G;;;;;;EAJJ,mC;IAAA,4H;G;;EAAA,wC;IAAA,a;MAAA,Y;QAAA,0C;MAAA,Y;QAAA,0C;MAAA,kB;QAAA,gD;MAAA,QAAA,6F;;G;;;ECwBA,iD;IAC+E,kBAAnE,8BAA0B,oBAA1B,EAAyD,OAAT,QAAS,CAAzD,C;IAAyE,KnSuDjF,a;ImSvDE,+BnSwDK,WmSxDiF,SAAtF,C;G;ECtBuB,uD;IAGzB,qB;MzSLA,UAAa,E;MySKb,QzSJO,G;KySKP,wB;IAHA,kB;IAEA,oB;IAGU,qBAAN,YAAM,EAAQ,QAAR,C;G;mDAGV,mB;IACU,QAAN,YAAM,C;EACV,C;4CAEA,Y;IAAe,kCAAc,WAAd,EAAoB,YAApB,SlTHmD,YkTGvB,clTHuB,CkTGnD,E;G;qDAEf,+B;IpTqmSO,kBAAM,eoTpmSD,QpTomSc,OAAb,C;IA6UA,Q;IAAb,wBoTj7SY,QpTi7SZ,gB;MAAa,WoTj7SD,QpTi7SZ,M;mBACI,W;MoTl7SuB,IAAC,MpTk7SE,IoTl7SF,aAAD;QAAM,QpTk7SH,IoTl7SG,a;MpTk7SjB,YAAZ,WAAY,EoTl7S2B,QAAO,KAAP,CpTk7S3B,C;;IoTl7SZ,gCpTm7SG,WoTn7SH,C;EACJ,C;qDAEA,+B;InTuzCO,kBAAM,eAAa,wBmTtzCd,QnTszCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OmT33CD,QnT23CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MmT53CuB,IAAC,MnT43CE,ImT53CF,aAAD;QAAM,QnT43CH,ImT53CG,a;MnT43CjB,YAAZ,WAAY,EmT53C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CnT43C3B,C;;ImT53CZ,gCnT63CG,WmT73CH,C;EACJ,C;qDAEA,+B;IpT6lSO,kBAAM,eoT5lSD,QpT4lSc,OAAb,C;IA6UA,Q;IAAb,wBoTz6SY,QpTy6SZ,gB;MAAa,WoTz6SD,QpTy6SZ,M;mBACI,W;MoT16SuB,IAAC,MpT06SE,IoT16SF,aAAD;QAAM,QpT06SH,IoT16SG,a;MpT06SjB,YAAZ,WAAY,EoT16S2B,QAAO,KAAP,CpT06S3B,C;;IoT16SZ,gCpT26SG,WoT36SH,C;EACJ,C;qDAEA,+B;IAS6B,Q;IARzB,IAAI,QAAS,UAAb,C;MACI,M;KzS/BR,UAAa,E;IySkCT,iBzSjCG,G;IVqmDS,U;IAAA,SmTlkDZ,QnTkkDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MmTlkDO,IAAC,MnTkkDK,OmTlkDL,aAAD;QAAM,QnTkkDA,OmTlkDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,UAAY,SAAZ,IAAyB,yD;EAC7B,C;kDAEA,4B;IhT+CW,kBAAX,mB;IgT/CyE,KpSsCzE,a;IoStCqD,iBhT+CrD,MYRO,WZQmB,UAA1B,C;EgT/CgF,C;;;;;;EC1CpF,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IACA,0D;IACA,8D;IACA,oE;IACA,4D;G;;EAJA,0C;IAAA,0B;IAAA,kC;G;;EACA,0C;IAAA,0B;IAAA,kC;G;;EACA,4C;IAAA,0B;IAAA,oC;G;;EACA,+C;IAAA,0B;IAAA,uC;G;;EACA,2C;IAAA,0B;IAAA,mC;G;;;;;;EANJ,gC;IAAA,yL;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,Y;QAAA,uC;MAAA,c;QAAA,yC;MAAA,iB;QAAA,4C;MAAA,a;QAAA,wC;MAAA,QAAA,uF;;G;;;ECmBA,8C;IACyE,kBAA7D,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,C;IAAmE,KtS4D3E,a;IsS5DE,+BtS6DK,WsS7D2E,SAAhF,C;G;ECRwB,iD;IAG1B,kCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,mCAA7D,C;IAKA,gCAA4B,kB;IAC5B,0CAAsC,kB;IACtC,mCAA+B,kB;IAC/B,kCAA8B,kB;IAC9B,+BAA2B,kB;IAC3B,8BAA+B,kB;IAC/B,8BAA0B,kB;IAC1B,kCAAmC,kB;IACnC,qCAAyC,kB;IACzC,uCAAkC,kB;G;sDAblC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;yDAEA,qB;WAAA,2F;G;yDAAA,6B;IAAA,mG;G;;mEACA,qB;WAAA,+G;G;mEAAA,uC;IAAA,iI;G;;4DACA,qB;WAAA,iG;G;4DAAA,gC;IAAA,4G;G;;2DACA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;wDACA,qB;WAAA,yF;G;wDAAA,4B;IAAA,gG;G;;uDACA,qB;WAAA,uF;G;uDAAA,2B;IAAA,6F;G;;uDACA,qB;WAAA,uF;G;uDAAA,2B;IAAA,6F;G;;2DACA,qB;WAAA,+F;G;2DAAA,+B;IAAA,yG;G;;8DACA,qB;WAAA,qG;G;8DAAA,kC;I1SPA,mCAAqB,yDAArB,IAA6B,mD;G;;gE0SQ7B,qB;WAAA,yG;G;gEAAA,oC;IAAA,wH;G;mDAEA,4B;InT0DW,kBAAX,mB;ImT1D+D,KvSiD/D,a;IuSjD2C,iCnT0D3C,MYRO,WZQmB,UAA1B,CmT1D2C,C;EAA2B,C;+DACtE,6B;IAGsC,IAAO,I;IAAzC,uCAAkC,cAAO,cAAP,MAAO,CAAP,6B;EACtC,C;uDACA,4B;InToDW,kBAAX,mB;ImTpDuE,KvS2CvE,a;IuS3C+C,qCnToD/C,MYRO,WZQmB,UAA1B,CmTpD+C,C;EAA+B,C;gEAC9E,8B;IAA6C,uCAAkC,O;EAAQ,C;4DACvF,4B;I5StCA,UAAa,E;I4SsCqE,K5SpC9E,CADG,GACH,C;I4SoCqD,0C5SrClD,G4SqCkD,C;EAAgC,C;EAxB5B,iD;IAAE,gBpT8CrB,UoT9CqB,EAAc,EAAd,C;EAAkB,C;;;;;;ECfrF,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,4D;IACA,wE;IACA,oE;IACA,8D;IACA,gE;IACA,sE;IACA,8D;IACA,oE;IACA,8E;IACA,oF;IACA,iF;G;;EAVA,2C;IAAA,2B;IAAA,mC;G;;EACA,iD;IAAA,2B;IAAA,yC;G;;EACA,+C;IAAA,2B;IAAA,uC;G;;EACA,4C;IAAA,2B;IAAA,oC;G;;EACA,6C;IAAA,2B;IAAA,qC;G;;EACA,gD;IAAA,2B;IAAA,wC;G;;EACA,4C;IAAA,2B;IAAA,oC;G;;EACA,+C;IAAA,2B;IAAA,uC;G;;EACA,oD;IAAA,2B;IAAA,4C;G;;EACA,uD;IAAA,2B;IAAA,+C;G;;EACA,qD;IAAA,2B;IAAA,6C;G;;;;;;EAZJ,iC;IAAA,8b;G;;EAAA,sC;IAAA,a;MAAA,Y;QAAA,wC;MAAA,kB;QAAA,8C;MAAA,gB;QAAA,4C;MAAA,a;QAAA,yC;MAAA,c;QAAA,0C;MAAA,iB;QAAA,6C;MAAA,a;QAAA,yC;MAAA,gB;QAAA,4C;MAAA,qB;QAAA,iD;MAAA,wB;QAAA,oD;MAAA,sB;QAAA,kD;MAAA,QAAA,yF;;G;;;EC2BA,+C;IAC2E,kBAA/D,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,C;IAAqE,KzSoD7E,a;IySpDE,+BzSqDK,WySrD6E,SAAlF,C;G;ECjB8B,wD;IAIhC,+BAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAEA,oCAA+B,kB;IAC/B,0CAAsC,kB;IACtC,mCAAoC,kB;IACpC,mCAA+B,kB;IAC/B,qCAAyC,kB;G;;2DAJzC,qB;WAAA,iG;G;2DAAA,iC;IAAA,6G;G;;iEACA,qB;WAAA,6G;G;iEAAA,uC;IAAA,+H;G;;0DACA,qB;WAAA,+F;G;0DAAA,gC;IAAA,0G;G;;0DACA,qB;WAAA,+F;G;0DAAA,gC;IAAA,0G;G;;4DACA,qB;WAAA,mG;G;4DAAA,kC;I7SAA,mCAAqB,uDAArB,IAA6B,mD;G;sD6SE7B,4B;ItTkEW,kBAAX,mB;IsTlEyE,K1SyDzE,a;I0SzDgD,sCtTkEhD,MYRO,WZQmB,UAA1B,CsTlEgD,C;EAAgC,C;;;;;;ECvBpF,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,wD;IACA,oE;IACA,gE;IACA,gF;G;;EAHA,yC;IAAA,yB;IAAA,iC;G;;EACA,+C;IAAA,yB;IAAA,uC;G;;EACA,6C;IAAA,yB;IAAA,qC;G;;EACA,qD;IAAA,yB;IAAA,6C;G;;;;;;EALJ,+B;IAAA,iK;G;;EAAA,oC;IAAA,a;MAAA,Y;QAAA,sC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,wB;QAAA,kD;MAAA,QAAA,qF;;G;;;ECwBuE,4B;IAAE,ezTqC3B,UyTrC2B,EAAa,EAAb,C;EAAiB,C;EAD1F,6C;IAC4F,kBAAhF,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,cAA3D,C;IAAsF,K5SwD9F,a;I4SxDE,+B5SyDK,W4SzD8F,SAAnG,C;G;EAEN,wD;IACgF,kBAApE,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,OAA3D,C;IAA0E,K5SqDlF,a;I4SrDE,+B5SsDK,W4StDkF,SAAvF,C;G;EChB8B,wD;IAIhC,kCAAwC,IAAxC,EAA8C,QAA9C,EAAwD,OAAxD,C;IAKA,+BAAgC,kB;IAChC,kCAAsC,kB;IAItC,wCAAmC,kB;IACnC,qCAAgC,kB;IAChC,iCAA4B,kB;G;oDAX5B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;sDAEA,qB;WAAA,uF;G;sDAAA,4B;IhTCA,6BAAqB,iDAArB,IAA6B,uC;G;;yDgTA7B,qB;WAAA,6F;G;yDAAA,+B;IhTAA,gCAAqB,oDAArB,IAA6B,6C;G;0DgTEzB,qB;IAAQ,OAAc,cAAd,kBAAc,C;G;0DACtB,4B;IAAa,kCAA0B,KAA1B,C;EAAgC,C;;+DACjD,qB;WAAA,yG;G;8DAAA,qC;IAAA,yH;G;;4DACA,qB;WAAA,mG;G;2DAAA,kC;IAAA,gH;G;;wDACA,qB;WAAA,2F;G;uDAAA,8B;IAAA,oG;G;;;;;;EC3BJ,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,8D;IAAS,8D;IAAS,kE;IAAW,4D;IAAQ,0D;IAAO,gE;G;;EAA5C,4C;IAAA,yB;IAAA,oC;G;;EAAS,4C;IAAA,yB;IAAA,oC;G;;EAAS,8C;IAAA,yB;IAAA,sC;G;;EAAW,2C;IAAA,yB;IAAA,mC;G;;EAAQ,0C;IAAA,yB;IAAA,kC;G;;EAAO,6C;IAAA,yB;IAAA,qC;G;;;;;;EAFhD,+B;IAAA,+N;G;;EAAA,oC;IAAA,a;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,QAAA,qF;;G;;ECAA,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,oE;IAAS,oE;IAAS,gE;IAAO,gE;G;;EAAzB,+C;IAAA,4B;IAAA,uC;G;;EAAS,+C;IAAA,4B;IAAA,uC;G;;EAAS,6C;IAAA,4B;IAAA,qC;G;;EAAO,6C;IAAA,4B;IAAA,qC;G;;;;;;EAF7B,kC;IAAA,+J;G;;EAAA,uC;IAAA,a;MAAA,e;QAAA,4C;MAAA,e;QAAA,4C;MAAA,a;QAAA,0C;MAAA,a;QAAA,0C;MAAA,QAAA,wF;;G;;ECAA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,wD;IACA,wE;IACA,4E;IACA,sE;IACA,oE;IACA,0E;IACA,8E;IACA,0E;IACA,0E;G;;EARA,yC;IAAA,yB;IAAA,iC;G;;EACA,iD;IAAA,yB;IAAA,yC;G;;EACA,mD;IAAA,yB;IAAA,2C;G;;EACA,gD;IAAA,yB;IAAA,wC;G;;EACA,+C;IAAA,yB;IAAA,uC;G;;EACA,kD;IAAA,yB;IAAA,0C;G;;EACA,oD;IAAA,yB;IAAA,4C;G;;EACA,kD;IAAA,yB;IAAA,0C;G;;EACA,kD;IAAA,yB;IAAA,0C;G;;;;;;EAVJ,+B;IAAA,qX;G;;EAAA,oC;IAAA,a;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,QAAA,qF;;G;;;;ECqBA,kC;WAAA,yD;G;EAAA,+C;IAAA,sE;G;;EAMuE,4B;IAAE,e9TkC3B,U8TlC2B,EAAa,EAAb,C;EAAiB,C;EAD1F,6C;IAC4F,kBAAhF,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,cAA3D,C;IAAsF,KjTqD9F,a;IiTrDE,+BjTsDK,WiTtD8F,SAAnG,C;G;EAEN,wD;IACgF,kBAApE,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,OAA3D,C;IAA0E,KjTkDlF,a;IiTlDE,+BjTmDK,WiTnDkF,SAAvF,C;G;ECnB8B,uD;IAGhC,gCAA2C,IAA3C,EAAiD,QAAjD,C;IAEA,mDAA+C,kB;IAC/C,0CAAsC,kB;IACtC,4CAAwC,kB;IACxC,sCAAkC,kB;IAClC,oCAA+B,kB;IAC/B,0CAAqC,kB;IACrC,gCAAsC,kB;IACtC,wCAAmC,kB;IACnC,wCAAmC,kB;G;;kFARnC,qB;WAAA,uI;G;kFAAA,gD;IAAA,kK;G;;yEACA,qB;WAAA,qH;G;yEAAA,uC;IAAA,uI;G;;2EACA,qB;WAAA,yH;G;2EAAA,yC;IAAA,6I;G;;qEACA,qB;WAAA,6G;G;qEAAA,mC;IAAA,2H;G;;mEACA,qB;WAAA,yG;G;mEAAA,iC;IAAA,qH;G;;yEACA,qB;WAAA,qH;G;yEAAA,uC;IAAA,uI;G;;+DACA,qB;WAAA,iG;G;+DAAA,6B;IAAA,yG;G;;uEACA,qB;WAAA,iH;G;uEAAA,qC;IAAA,iI;G;;uEACA,qB;WAAA,iH;G;uEAAA,qC;IAAA,iI;G;mEAEA,4B;IAQqB,Q;IvTjCrB,UAAa,E;IuT0BT,YvTzBG,G;IuT2BwB,kBAA3B,Q/TgCsC,U+ThCtC,EAAa,YAAb,C;IAAiC,KlTmDrC,a;IfuhDgB,U;IAAA,SethDT,WkTpDqC,kBjU0kD5B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MiU1kDyD,UjU0kD5C,OE50CmC,I;M+T9Pc,YjU0kDjD,OE/zCmC,M;M+T1QxD,MAAM,GAAN,IAAa,K;;IAIjB,2CAAiB,uDAAjB,C;EACJ,C;;;;;;;ECXJ,2C;IAC8E,kBAAlE,kCAA8B,wBAA9B,E7TuD8B,W6TvD9B,C;IAAwE,KnTuDhF,a;ImTvDE,+BnTwDK,WmTxDgF,SAArF,C;G;ECjBqB,8C;IAGvB,oCAAsC,IAAtC,EAA4C,QAA5C,C;IAKA,+BAA+B,kB;IAC/B,+BAAuB,kB;G;mDALvB,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;qDAEA,qB;WAAA,sF;G;qDAAA,4B;IvTKA,6BAAqB,gDAArB,IAA6B,uC;G;;qDuTJ7B,qB;WAAA,sF;G;qDAAA,4B;IAAA,6F;G;iDAEA,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;iDACrC,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;iDACrC,wB;IAA4B,kCAAQ,CAAR,C;EAAU,C;;;;;;ECrB1C,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,4D;IAAS,gE;IAAW,4D;G;;EAApB,2C;IAAA,wB;IAAA,mC;G;;EAAS,6C;IAAA,wB;IAAA,qC;G;;EAAW,2C;IAAA,wB;IAAA,mC;G;;;;;;EAFxB,8B;IAAA,kH;G;;EAAA,mC;IAAA,a;MAAA,e;QAAA,wC;MAAA,iB;QAAA,0C;MAAA,e;QAAA,wC;MAAA,QAAA,qF;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,sD;IACA,4D;IACA,8D;IACA,wD;IACA,kE;IACA,sE;IACA,0E;IACA,gE;IACA,wD;IACA,wD;G;;EATA,wC;IAAA,wB;IAAA,gC;G;;EACA,2C;IAAA,wB;IAAA,mC;G;;EACA,4C;IAAA,wB;IAAA,oC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;EACA,8C;IAAA,wB;IAAA,sC;G;;EACA,gD;IAAA,wB;IAAA,wC;G;;EACA,kD;IAAA,wB;IAAA,0C;G;;EACA,6C;IAAA,wB;IAAA,qC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;;;;;EAXJ,8B;IAAA,8W;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,e;QAAA,wC;MAAA,gB;QAAA,yC;MAAA,a;QAAA,sC;MAAA,kB;QAAA,2C;MAAA,oB;QAAA,6C;MAAA,sB;QAAA,+C;MAAA,iB;QAAA,0C;MAAA,a;QAAA,sC;MAAA,a;QAAA,sC;MAAA,QAAA,qF;;G;;;ECeA,8C;IACqE,kBAAzD,yBAAqB,eAArB,EAA+C,OAAT,QAAS,CAA/C,C;IAA+D,KvTgEvE,a;IuThEE,+BvTiEK,WuTjEuE,SAA5E,C;G;ECJ0B,oD;IAI5B,oCAAsC,IAAtC,EAA4C,QAA5C,EAAsD,OAAtD,C;IAKA,8BAA+B,kB;IAC/B,mCAAoC,kB;IACpC,+BAAgC,kB;IAChC,kCAA8B,kB;IAC9B,mCAAoC,kB;IACpC,+BAAuB,kB;G;gDATvB,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;iDAEA,qB;WAAA,iF;G;iDAAA,2B;IAAA,uF;G;;sDACA,qB;WAAA,2F;G;sDAAA,gC;IAAA,sG;G;;kDACA,qB;WAAA,mF;G;kDAAA,4B;IAAA,0F;G;;qDACA,qB;WAAA,yF;G;qDAAA,+B;IAAA,mG;G;;sDACA,qB;WAAA,2F;G;sDAAA,gC;I3TJA,iCAAqB,iDAArB,IAA6B,+C;G;;kD2TK7B,qB;WAAA,mF;G;kDAAA,4B;IAAA,0F;G;6CAEA,4B;IpU6DW,kBAAX,mB;IoU7D+D,KxToD/D,a;IwTpD2C,iCpU6D3C,MYRO,WZQmB,UAA1B,CoU7D2C,C;EAA2B,C;kDACtE,4B;IpU4DW,kBAAX,mB;IoU5DyE,KxTmDzE,a;IwTnDgD,sCpU4DhD,MYRO,WZQmB,UAA1B,CoU5DgD,C;EAAgC,C;8CAChF,4B;IpU2DW,kBAAX,mB;IoU3DiE,KxTkDjE,a;IwTlD4C,kCpU2D5C,MYRO,WZQmB,UAA1B,CoU3D4C,C;EAA4B,C;;;;;;EC9B5E,iC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,+B;IAAA,kC;K;IAEI,gD;IACA,0D;IACA,wE;IACA,wE;IACA,4E;IACA,wD;IACA,wD;IACA,0D;IACA,sD;IACA,oE;IACA,mD;IACA,iE;G;;EAXA,qC;IAAA,qB;IAAA,6B;G;;EACA,0C;IAAA,qB;IAAA,kC;G;;EACA,iD;IAAA,qB;IAAA,yC;G;;EACA,iD;IAAA,qB;IAAA,yC;G;;EACA,mD;IAAA,qB;IAAA,2C;G;;EACA,yC;IAAA,qB;IAAA,iC;G;;EACA,yC;IAAA,qB;IAAA,iC;G;;EACA,0C;IAAA,qB;IAAA,kC;G;;EACA,wC;IAAA,qB;IAAA,gC;G;;EACA,+C;IAAA,qB;IAAA,uC;G;;EACA,sC;IAAA,qB;IAAA,8B;G;;EACA,6C;IAAA,qB;IAAA,qC;G;;;;;;EAbJ,2B;IAAA,ib;G;;EAAA,gC;IAAA,a;MAAA,Y;QAAA,kC;MAAA,iB;QAAA,uC;MAAA,wB;QAAA,8C;MAAA,wB;QAAA,8C;MAAA,0B;QAAA,gD;MAAA,gB;QAAA,sC;MAAA,gB;QAAA,sC;MAAA,iB;QAAA,uC;MAAA,e;QAAA,qC;MAAA,sB;QAAA,4C;MAAA,a;QAAA,mC;MAAA,oB;QAAA,0C;MAAA,QAAA,6E;;G;;ECAA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,kE;IAAW,8D;IAAS,8D;G;;EAApB,8C;IAAA,yB;IAAA,sC;G;;EAAW,4C;IAAA,yB;IAAA,oC;G;;EAAS,4C;IAAA,yB;IAAA,oC;G;;;;;;EAFxB,+B;IAAA,qH;G;;EAAA,oC;IAAA,a;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,QAAA,iF;;G;;;ECyB+D,wB;IAAE,kBxUoCnB,UwUpCmB,EAAgB,EAAhB,C;EAAoB,C;EADrF,yC;IACuF,kBAA3E,sBAAkB,YAAlB,EAAyC,OAAT,QAAS,CAAzC,EAAmD,UAAnD,C;IAAiF,K3TuDzF,a;I2TvDE,+B3TwDK,W2TxDyF,SAA9F,C;G;EAEN,oD;IACwE,kBAA5D,sBAAkB,YAAlB,EAAyC,OAAT,QAAS,CAAzC,EAAmD,OAAnD,C;IAAkE,K3ToD1E,a;I2TpDE,+B3TqDK,W2TrD0E,SAA/E,C;G;ECpB4B,sD;IAI9B,kCAAsC,IAAtC,EAA4C,QAA5C,EAAsD,OAAtD,C;IAEA,iCAAkC,kB;G;;sDAAlC,qB;WAAA,yF;G;sDAAA,8B;I/TOA,+BAAqB,iDAArB,IAA6B,2C;G;;;;;;EgUrBjC,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,8D;IAAS,gE;IAAU,0D;IAAO,wD;G;;EAA1B,4C;IAAA,yB;IAAA,oC;G;;EAAS,6C;IAAA,yB;IAAA,qC;G;;EAAU,0C;IAAA,yB;IAAA,kC;G;;EAAO,yC;IAAA,yB;IAAA,iC;G;;;;;;EAF9B,+B;IAAA,mJ;G;;EAAA,oC;IAAA,a;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,Y;QAAA,sC;MAAA,QAAA,mF;;G;;;ECmB4G,0B;IAAE,iB3U0ChE,U2U1CgE,EAAe,EAAf,C;EAAmB,C;EADjI,4C;IAAmB,yB;MAAA,YAAqB,I;IAC2F,kBAAvH,wBAAoB,cAApB,EAAoC,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAApC,EAAgG,YAAhG,C;IAA6H,K9T6DrI,a;I8T7DE,+B9T8DK,W8T9DqI,SAA1I,C;G;EAEN,uD;IAA4B,yB;MAAA,YAAqB,I;IACoE,kBAAzG,wBAAoB,cAApB,EAAoC,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAApC,EAAgG,OAAhG,C;IAA+G,K9T0DvH,a;I8T1DE,+B9T2DK,W8T3DuH,SAA5H,C;G;ECjBgC,0D;IAIlC,kCAA0C,IAA1C,EAAgD,QAAhD,EAA0D,OAA1D,C;G;;;;;;;ECQgH,8B;IAAE,iB7U4CxE,U6U5CwE,EAAe,EAAf,C;EAAmB,C;EADzI,gD;IAAuB,yB;MAAA,YAAqB,I;IAC+F,kBAA/H,4BAAwB,kBAAxB,EAA4C,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA5C,EAAwG,gBAAxG,C;IAAqI,KhU+D7I,a;IgU/DE,+BhUgEK,WgUhE6I,SAAlJ,C;G;EAEN,2D;IAAgC,yB;MAAA,YAAqB,I;IACwE,kBAAjH,4BAAwB,kBAAxB,EAA4C,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA5C,EAAwG,OAAxG,C;IAAuH,KhU4D/H,a;IgU5DE,+BhU6DK,WgU7D+H,SAApI,C;G;ECZ4D,0D;IAI9D,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,+BAAkC,kB;IAClC,iCAAsC,kB;IACtC,+BAA0B,kB;IAC1B,8BAAgC,kB;IAChC,uCAAkD,kB;IAClD,iCAAsC,kB;G;sDATtC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;wDAEA,qB;WAAA,yF;G;wDAAA,4B;IpUIA,6BAAqB,mDAArB,IAA6B,uC;G;;0DoUH7B,qB;WAAA,6F;G;0DAAA,8B;IpUGA,+BAAqB,qDAArB,IAA6B,2C;G;;wDoUF7B,qB;WAAA,yF;G;uDAAA,4B;IAAA,gG;G;;uDACA,qB;WAAA,uF;G;uDAAA,2B;IpUCA,4BAAqB,kDAArB,IAA6B,qC;G;;gEoUA7B,qB;WAAA,yG;G;gEAAA,oC;IpUAA,qCAAqB,2DAArB,IAA6B,uD;G;;0DoUC7B,qB;WAAA,6F;G;0DAAA,8B;IpUDA,+BAAqB,qDAArB,IAA6B,2C;G;;;;;;EqUrBjC,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,kE;IAAS,4D;IAAM,gE;IAAQ,8D;IAAO,kE;G;;EAA9B,8C;IAAA,2B;IAAA,sC;G;;EAAS,2C;IAAA,2B;IAAA,mC;G;;EAAM,6C;IAAA,2B;IAAA,qC;G;;EAAQ,4C;IAAA,2B;IAAA,oC;G;;EAAO,8C;IAAA,2B;IAAA,sC;G;;;;;;EAFlC,iC;IAAA,+L;G;;EAAA,sC;IAAA,a;MAAA,e;QAAA,2C;MAAA,Y;QAAA,wC;MAAA,c;QAAA,0C;MAAA,a;QAAA,yC;MAAA,e;QAAA,2C;MAAA,QAAA,yF;;G;;ECAA,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,sE;IAAS,wE;IAAU,gE;G;;EAAnB,gD;IAAA,6B;IAAA,wC;G;;EAAS,iD;IAAA,6B;IAAA,yC;G;;EAAU,6C;IAAA,6B;IAAA,qC;G;;;;;;EAFvB,mC;IAAA,6H;G;;EAAA,wC;IAAA,a;MAAA,e;QAAA,6C;MAAA,gB;QAAA,8C;MAAA,Y;QAAA,0C;MAAA,QAAA,2F;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,4D;IAAO,8D;G;;EAAP,2C;IAAA,0B;IAAA,mC;G;;EAAO,4C;IAAA,0B;IAAA,oC;G;;;;;;EAFX,gC;IAAA,8E;G;;EAAA,qC;IAAA,a;MAAA,a;QAAA,wC;MAAA,c;QAAA,yC;MAAA,QAAA,wF;;G;;ECCiC,sD;IADjC,e;IACkC,0B;IADlC,iB;IAAA,uB;G;EAAA,6C;IAAA,gD;K;IAEI,2EAAI,KAAJ,C;IACA,6EAAK,MAAL,C;IACA,+EAAQ,KAAR,C;G;;EAFA,kD;IAAA,mC;IAAA,0C;G;;EACA,mD;IAAA,mC;IAAA,2C;G;;EACA,oD;IAAA,mC;IAAA,4C;G;;;;;;EAJJ,yC;IAAA,wI;G;;EAAA,8C;IAAA,a;MAAA,W;QAAA,+C;MAAA,Y;QAAA,gD;MAAA,a;QAAA,iD;MAAA,QAAA,iG;;G;;ECAA,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,4D;IACA,4D;IACA,4D;IACA,gE;IACA,kE;IACA,4E;IACA,kF;IACA,0E;IACA,sE;IACA,0E;IACA,yE;IACA,6E;G;;EAXA,2C;IAAA,2B;IAAA,mC;G;;EACA,2C;IAAA,2B;IAAA,mC;G;;EACA,2C;IAAA,2B;IAAA,mC;G;;EACA,6C;IAAA,2B;IAAA,qC;G;;EACA,8C;IAAA,2B;IAAA,sC;G;;EACA,mD;IAAA,2B;IAAA,2C;G;;EACA,sD;IAAA,2B;IAAA,8C;G;;EACA,kD;IAAA,2B;IAAA,0C;G;;EACA,gD;IAAA,2B;IAAA,wC;G;;EACA,kD;IAAA,2B;IAAA,0C;G;;EACA,iD;IAAA,2B;IAAA,yC;G;;EACA,mD;IAAA,2B;IAAA,2C;G;;;;;;EAbJ,iC;IAAA,oe;G;;EAAA,sC;IAAA,a;MAAA,Y;QAAA,wC;MAAA,Y;QAAA,wC;MAAA,Y;QAAA,wC;MAAA,c;QAAA,0C;MAAA,e;QAAA,2C;MAAA,oB;QAAA,gD;MAAA,uB;QAAA,mD;MAAA,mB;QAAA,+C;MAAA,iB;QAAA,6C;MAAA,mB;QAAA,+C;MAAA,kB;QAAA,8C;MAAA,oB;QAAA,gD;MAAA,QAAA,yF;;G;;ECAA,yC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,gE;IAAM,gE;IAAM,oE;G;;EAAZ,6C;IAAA,6B;IAAA,qC;G;;EAAM,6C;IAAA,6B;IAAA,qC;G;;EAAM,+C;IAAA,6B;IAAA,uC;G;;;;;;EAFhB,mC;IAAA,wH;G;;EAAA,wC;IAAA,a;MAAA,Y;QAAA,0C;MAAA,Y;QAAA,0C;MAAA,c;QAAA,4C;MAAA,QAAA,2F;;G;;;ECyB2E,2B;IAAE,crVoC/B,UqVpC+B,EAAY,EAAZ,C;EAAgB,C;EAD7F,4C;IAC+F,kBAAnF,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,aAA/D,C;IAAyF,KxUuDjG,a;IwUvDE,+BxUwDK,WwUxDiG,SAAtG,C;G;EAGqE,2B;IAAE,crViC/B,UqVjC+B,EAAY,EAAZ,C;EAAgB,C;EAD7F,4C;IAC+F,kBAAnF,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,aAA/D,C;IAAyF,KxUoDjG,a;IwUpDE,+BxUqDK,WwUrDiG,SAAtG,C;G;EAEN,wD;IACoF,kBAAxE,4BAAwB,kBAAxB,EAAqD,OAAT,QAAS,CAArD,EAA+D,OAA/D,C;IAA8E,KxUiDtF,a;IwUjDE,+BxUkDK,WwUlDsF,SAA3F,C;G;EC1BkC,4D;IAIpC,kCAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;G;;;;;;;ECQoH,gC;IAAE,iBvV4C5E,UuV5C4E,EAAe,EAAf,C;EAAmB,C;EAD7I,kD;IAAyB,yB;MAAA,YAAqB,I;IACiG,kBAAnI,8BAA0B,oBAA1B,EAAgD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAhD,EAA4G,kBAA5G,C;IAAyI,K1U+DjJ,a;I0U/DE,+B1UgEK,W0UhEiJ,SAAtJ,C;G;EAEN,6D;IAAkC,yB;MAAA,YAAqB,I;IAC0E,kBAArH,8BAA0B,oBAA1B,EAAgD,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAAhD,EAA4G,OAA5G,C;IAA2H,K1U4DnI,a;I0U5DE,+B1U6DK,W0U7DmI,SAAxI,C;G;ECfgC,0D;IAIlC,kCAA4C,IAA5C,EAAkD,QAAlD,EAA4D,OAA5D,C;G;;;;;;;ECQgH,8B;IAAE,iBzV4CxE,UyV5CwE,EAAe,EAAf,C;EAAmB,C;EADzI,gD;IAAuB,yB;MAAA,YAAqB,I;IAC+F,kBAA/H,4BAAwB,kBAAxB,EAA4C,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA5C,EAAwG,gBAAxG,C;IAAqI,K5U+D7I,a;I4U/DE,+B5UgEK,W4UhE6I,SAAlJ,C;G;EAEN,2D;IAAgC,yB;MAAA,YAAqB,I;IACwE,kBAAjH,4BAAwB,kBAAxB,EAA4C,cAAc,SAAd,WAA+B,qCAAjB,SAAiB,CAA/B,QAA5C,EAAwG,OAAxG,C;IAAuH,K5U4D/H,a;I4U5DE,+B5U6DK,W4U7D+H,SAApI,C;G;ECLsC,gE;IAIxC,mCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,OAAjE,C;IAEI,sCAAkB,WAAlB,C;IAOJ,6CAAwC,kB;IACxC,+BAAuB,kB;IACvB,4CAAuE,kB;IACvE,0CAA2C,kB;IAC3C,4CAAwC,kB;IACxC,sCAAiD,kB;IACjD,6CAAmD,kB;IACnD,8BAAsB,kB;IACtB,qCAA6B,kB;IAC7B,4CAA2C,kB;IAC3C,qCAAgC,kB;G;4DAdhC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;4EAEA,qB;WAAA,2H;G;4EAAA,0C;IAAA,gJ;G;;8DACA,qB;WAAA,+F;G;8DAAA,4B;IAAA,sG;G;;2EACA,qB;WAAA,yH;G;2EAAA,yC;IAAA,6I;G;;yEACA,qB;WAAA,qH;G;yEAAA,uC;IAAA,uI;G;;4EACA,qB;WAAA,0H;G;4EAAA,0C;IAAA,+I;G;;qEACA,qB;WAAA,6G;G;qEAAA,mC;IAAA,2H;G;;4EACA,qB;WAAA,2H;G;4EAAA,0C;IAAA,gJ;G;;6DACA,qB;WAAA,6F;G;6DAAA,2B;IAAA,mG;G;;oEACA,qB;WAAA,2G;G;oEAAA,kC;IAAA,wH;G;;2EACA,qB;WAAA,yH;G;2EAAA,yC;IAAA,6I;G;;oEACA,qB;WAAA,2G;G;oEAAA,kC;IAAA,wH;G;oEAEA,6B;IAGqC,IAAO,I;IAAxC,sCAAiC,cAAO,cAAP,MAAO,CAAP,6B;EACrC,C;oEACA,8B;IAA2C,sCAAiC,O;EAAQ,C;wEACpF,4B;IACI,gDAAiC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAA3D,C;EACJ,C;wEACA,qC;IACI,gDAAiC,aAAX,mBAAW,MAAqB,OAArB,EAAsC,KAAtC,CAA6C,MAA9E,C;EACJ,C;EAEyB,gF;IAAA,sB;MAAS,qBAAM,GAAI,KAAV,EAAgB,GAAI,GAApB,EAAwB,GAAI,MAA5B,EAAmC,GAAI,KAAvC,C;IAA6C,C;G;uEAD/E,4B;IACI,+CAAqB,8DAArB,C;EACJ,C;qEACA,4B;IzVkCW,kBAAX,mB;IyVlCuF,K7UyBvF,a;I6UzBuD,6CzVkCvD,MYRO,WZQmB,UAA1B,CyVlCuD,C;EAAuC,C;wEAC9F,4B;IACI,gDAAiC,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAA3D,C;EACJ,C;wEACA,qC;IACI,gDAAiC,aAAX,mBAAW,MAAqB,OAArB,EAAsC,KAAtC,CAA6C,MAA9E,C;EACJ,C;oEACA,4B;IAAuD,yCAAe,KAAf,C;EAAqB,C;wEAC5E,4B;IAAsD,gDAAsB,KAAtB,C;EAA4B,C;gEAClF,4B;IACI,wCAAyB,OAAX,mBAAW,MAAe,KAAf,CAAsB,MAA/C,C;EACJ,C;;;;;;EClEJ,6C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAEI,wE;IACA,8E;IACA,4E;IACA,8E;IACA,oF;IACA,4E;IACA,oF;IACA,0E;IACA,gF;IACA,8E;G;;EATA,iD;IAAA,iC;IAAA,yC;G;;EACA,oD;IAAA,iC;IAAA,4C;G;;EACA,mD;IAAA,iC;IAAA,2C;G;;EACA,oD;IAAA,iC;IAAA,4C;G;;EACA,uD;IAAA,iC;IAAA,+C;G;;EACA,mD;IAAA,iC;IAAA,2C;G;;EACA,uD;IAAA,iC;IAAA,+C;G;;EACA,kD;IAAA,iC;IAAA,0C;G;;EACA,qD;IAAA,iC;IAAA,6C;G;;EACA,oD;IAAA,iC;IAAA,4C;G;;;;;;EAXJ,uC;IAAA,+b;G;;EAAA,4C;IAAA,a;MAAA,Y;QAAA,8C;MAAA,e;QAAA,iD;MAAA,c;QAAA,gD;MAAA,e;QAAA,iD;MAAA,kB;QAAA,oD;MAAA,c;QAAA,gD;MAAA,kB;QAAA,oD;MAAA,a;QAAA,+C;MAAA,gB;QAAA,kD;MAAA,e;QAAA,iD;MAAA,QAAA,qG;;G;;;ECwCuF,oC;IAAE,c5VqB3C,U4VrB2C,EAAY,EAAZ,C;EAAgB,C;EADzG,qD;IAC2G,kBAA/F,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,EAA2E,sBAA3E,C;IAAqG,K/UwC7G,a;I+UxCE,+B/UyCK,W+UzC6G,SAAlH,C;G;EAEN,8D;IACgG,kBAApF,kCAA8B,wBAA9B,EAAiE,OAAT,QAAS,CAAjE,EAA2E,OAA3E,C;IAA0F,K/UqClG,a;I+UrCE,+B/UsCK,W+UtCkG,SAAvG,C;G;ECnC+B,yD;IAIjC,kCAAyC,IAAzC,EAA+C,QAA/C,EAAyD,OAAzD,C;IAKA,+BAA2B,kB;IAC3B,kCAA8B,kB;G;qDAL9B,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;uDAEA,qB;WAAA,wF;G;uDAAA,4B;IAAA,+F;G;;0DACA,qB;WAAA,8F;G;0DAAA,+B;IAAA,wG;G;;;;;;EClBJ,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,0D;IACA,kE;IACA,4D;IACA,0D;IACA,8D;G;;EAJA,0C;IAAA,0B;IAAA,kC;G;;EACA,8C;IAAA,0B;IAAA,sC;G;;EACA,2C;IAAA,0B;IAAA,mC;G;;EACA,0C;IAAA,0B;IAAA,kC;G;;EACA,4C;IAAA,0B;IAAA,oC;G;;;;;;EANJ,gC;IAAA,wL;G;;EAAA,qC;IAAA,a;MAAA,Y;QAAA,uC;MAAA,gB;QAAA,2C;MAAA,a;QAAA,wC;MAAA,Y;QAAA,uC;MAAA,c;QAAA,yC;MAAA,QAAA,uF;;G;;;ECqByE,6B;IAAE,c/VwC7B,U+VxC6B,EAAY,EAAZ,C;EAAgB,C;EAD3F,8C;IAC6F,kBAAjF,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,eAA7D,C;IAAuF,KlV2D/F,a;IkV3DE,+BlV4DK,WkV5D+F,SAApG,C;G;EAEN,yD;IACkF,kBAAtE,2BAAuB,iBAAvB,EAAmD,OAAT,QAAS,CAAnD,EAA6D,OAA7D,C;IAA4E,KlVwDpF,a;IkVxDE,+BlVyDK,WkVzDoF,SAAzF,C;G;ECbqC,+D;IAIvC,oCAAiD,IAAjD,EAAuD,QAAvD,EAAiE,OAAjE,C;IAEA,gCAA4B,kB;IAC5B,mCAA+C,kB;IAC/C,sCAAkC,kB;G;;8DAFlC,qB;WAAA,gG;G;8DAAA,6B;IAAA,wG;G;;iEACA,qB;WAAA,sG;G;iEAAA,gC;ItVGA,iCAAqB,4DAArB,IAA6B,+C;G;;oEsVF7B,qB;WAAA,4G;G;oEAAA,mC;IAAA,0H;G;gEAEA,6B;IAGkC,IAAO,I;IAArC,mCAA8B,cAAO,cAAP,MAAO,CAAP,6B;EAClC,C;iEACA,8B;IACI,mCAA8B,O;EAClC,C;;;;;;EC5BJ,gD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,8C;IAAA,iD;K;IAEI,4E;IAAK,8E;G;;EAAL,mD;IAAA,oC;IAAA,2C;G;;EAAK,oD;IAAA,oC;IAAA,4C;G;;;;;;EAFT,0C;IAAA,8F;G;;EAAA,+C;IAAA,a;MAAA,W;QAAA,gD;MAAA,Y;QAAA,iD;MAAA,QAAA,uG;;G;;;ECsBqF,mC;IAAE,gBlWuCzC,UkWvCyC,EAAc,EAAd,C;EAAkB,C;EADzG,oD;IAC2G,kBAA/F,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,qBAAzE,C;IAAqG,KrV0D7G,a;IqV1DE,+BrV2DK,WqV3D6G,SAAlH,C;G;EAEN,+D;IAC8F,kBAAlF,iCAA6B,uBAA7B,EAA+D,OAAT,QAAS,CAA/D,EAAyE,OAAzE,C;IAAwF,KrVuDhG,a;IqVvDE,+BrVwDK,WqVxDgG,SAArG,C;G;ECjB2B,sC;IAAyB,uBAAkB,sCAAlB,C;G;2DAElD,qB;IAAS,gB;IAAD,QAAC,2BAAY,OAAZ,0DAAD,YAA4D,kCAA5D,O;G;2DACR,4B;IAAa,UAAY,OAAZ,IAAuB,uC;EAAkB,C;uDAE1D,mB;IACkC,gBAAb,gB;IAAmB,OtVkExC,W;IsVlEI,qBAAQ,OAAR,EAA6C,ctVmE1C,SsVnE0C,CAA7C,C;EACJ,C;EAPwE,oD;IAAE,gBnWqDhC,UmWrDgC,EAAc,EAAd,C;EAAkB,C;;;;;;ECM/D,qD;IAI7B,kCAAqC,IAArC,EAA2C,QAA3C,EAAqD,OAArD,C;IAKA,gCAAyC,kB;IACzC,kCAA8B,kB;IAC9B,mCAC+B,kB;IAC/B,wCAA+C,kB;IAC/C,iCAA6C,kB;IAC7C,oCACgC,kB;IAChC,uCAA6C,kB;IAC7C,2CAAsC,kB;IACtC,mCAAqC,kB;IACrC,+BAA4B,kB;IAC5B,+BAAuB,kB;IACvB,iCAAiC,kB;G;iDAjBjC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;oDAEA,qB;WAAA,sF;G;oDAAA,6B;IAAA,8F;G;;sDACA,qB;WAAA,0F;G;sDAAA,+B;IAAA,oG;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;IAAA,uG;G;;4DAEA,qB;WAAA,sG;G;4DAAA,qC;I1VNA,sCAAqB,uDAArB,IAA6B,yD;G;;sD0VO7B,qB;WAAA,yF;G;sDAAA,+B;IAAA,mG;G;;wDACA,qB;WAAA,8F;G;wDAAA,iC;IAAA,0G;G;;2DAEA,qB;WAAA,oG;G;2DAAA,oC;I1VVA,qCAAqB,sDAArB,IAA6B,uD;G;;+D0VW7B,qB;WAAA,4G;G;+DAAA,wC;IAAA,+H;G;;uDACA,qB;WAAA,4F;G;uDAAA,gC;I1VZA,iCAAqB,kDAArB,IAA6B,+C;G;;mD0Va7B,qB;WAAA,oF;G;mDAAA,4B;IAAA,2F;G;;mDACA,qB;WAAA,oF;G;mDAAA,4B;IAAA,2F;G;;qDACA,qB;WAAA,wF;G;qDAAA,8B;I1VfA,+BAAqB,gDAArB,IAA6B,2C;G;gD0ViB7B,4B;IAA+C,mCAAS,KAAT,C;EAAe,C;8DAC9D,6B;IAG0C,IAAO,I;IAA7C,2CAAsC,cAAO,cAAP,MAAO,CAAP,6B;EAC1C,C;+DACA,8B;IAAiD,2CAAsC,O;EAAQ,C;2DAC/F,4B;IACI,8CAA+B,aAAX,mBAAW,EAAa,KAAb,CAAoB,MAAnD,C;EACJ,C;;;;;;EC/CJ,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAEI,8E;IAAW,0E;G;;EAAX,oD;IAAA,+B;IAAA,4C;G;;EAAW,kD;IAAA,+B;IAAA,0C;G;;;;;;EAFf,qC;IAAA,6F;G;;EAAA,0C;IAAA,a;MAAA,iB;QAAA,iD;MAAA,e;QAAA,+C;MAAA,QAAA,wF;;G;;ECAA,0C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,kE;IAAM,8D;IAAI,gE;G;;EAAV,8C;IAAA,8B;IAAA,sC;G;;EAAM,4C;IAAA,8B;IAAA,oC;G;;EAAI,6C;IAAA,8B;IAAA,qC;G;;;;;;EAFd,oC;IAAA,sH;G;;EAAA,yC;IAAA,a;MAAA,Y;QAAA,2C;MAAA,U;QAAA,yC;MAAA,W;QAAA,0C;MAAA,QAAA,uF;;G;;ECAA,kC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IAEI,kD;IACA,oE;IACA,0D;IACA,0D;IACA,oD;IACA,8D;IACA,oE;IACA,4E;IACA,4D;G;;EARA,sC;IAAA,sB;IAAA,8B;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,mD;IAAA,sB;IAAA,2C;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;;;;;EAVJ,4B;IAAA,wU;G;;EAAA,iC;IAAA,a;MAAA,Y;QAAA,mC;MAAA,qB;QAAA,4C;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,a;QAAA,oC;MAAA,kB;QAAA,yC;MAAA,qB;QAAA,4C;MAAA,yB;QAAA,gD;MAAA,iB;QAAA,wC;MAAA,QAAA,+E;;G;;ECAA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IAEI,oE;IAAW,gE;IAAS,gE;G;;EAApB,+C;IAAA,0B;IAAA,uC;G;;EAAW,6C;IAAA,0B;IAAA,qC;G;;EAAS,6C;IAAA,0B;IAAA,qC;G;;;;;;EAFxB,gC;IAAA,wH;G;;EAAA,qC;IAAA,a;MAAA,iB;QAAA,4C;MAAA,e;QAAA,0C;MAAA,e;QAAA,0C;MAAA,QAAA,mF;;G;;ECAA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,8D;IAAU,kE;IAAY,gE;G;;EAAtB,4C;IAAA,wB;IAAA,oC;G;;EAAU,8C;IAAA,wB;IAAA,sC;G;;EAAY,6C;IAAA,wB;IAAA,qC;G;;;;;;EAF1B,8B;IAAA,sH;G;;EAAA,mC;IAAA,a;MAAA,gB;QAAA,yC;MAAA,kB;QAAA,2C;MAAA,iB;QAAA,0C;MAAA,QAAA,iF;;G;;ECEA,wC;IACyC,kBAA7B,gC;IAAmC,K7V6E3C,a;I6V7EE,+B7V8EK,W6V9E2C,SAAhD,C;G;;ECqC2D,yB;IAAE,e3WqBrB,U2WrBqB,EAAa,EAAb,C;EAAiB,C;EADpF,0C;IACsF,kBAA1E,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,WAArD,C;IAAgF,K9VwCxF,a;I8VxCE,+B9VyCK,W8VzCwF,SAA7F,C;G;EAEN,qD;IAC0E,kBAA9D,uBAAmB,aAAnB,EAA2C,OAAT,QAAS,CAA3C,EAAqD,OAArD,C;IAAoE,K9VqC5E,a;I8VrCE,+B9VsCK,W8VtC4E,SAAjF,C;G;EC1BgC,0D;IAIlC,qCAA6C,IAA7C,EAAmD,QAAnD,EAA6D,OAA7D,C;IAEA,sCAAiC,kB;IACjC,mCAA+B,kB;IAC/B,sCAA8B,kB;IAO9B,4BAAuB,kB;IACvB,yCAAoC,kB;IACpC,oCAA+B,kB;IAC/B,oCAA+B,kB;IAC/B,kCAA2B,kB;IAC3B,+BAAgC,kB;IAChC,mCAA+B,kB;IAC/B,8BAAyB,kB;IACzB,qCAAgC,kB;IAChC,8BAAsB,kB;IACtB,iCAAyB,kB;IACzB,gCAA4B,kB;IAC5B,qCAAgC,kB;IAChC,8BAA4B,kB;IAC5B,+BAAuB,kB;G;;+DAvBvB,qB;WAAA,uG;G;8DAAA,mC;IAAA,qH;G;;4DACA,qB;WAAA,iG;G;4DAAA,gC;IAAA,4G;G;;+DACA,qB;WAAA,uG;G;+DAAA,mC;IAAA,qH;G;sEAEI,qB;IAAQ,OAAyC,UAAN,CAAkB,qBAAlB,C;G;sEAC3C,4B;IAAa,qBAAQ,qBAAR,EAA+B,KAA/B,C;EAAsC,C;6DAEnD,qB;IAAQ,OAAyC,UAAN,CAAkB,YAAlB,C;G;6DAC3C,4B;IAAa,qBAAQ,YAAR,EAAsB,KAAtB,C;EAA6B,C;;qDAC9C,qB;WAAA,mF;G;oDAAA,yB;IAAA,uF;G;;kEACA,qB;WAAA,6G;G;kEAAA,sC;IAAA,8H;G;;6DACA,qB;WAAA,mG;G;6DAAA,iC;IAAA,+G;G;;6DACA,qB;WAAA,mG;G;6DAAA,iC;IAAA,+G;G;;2DACA,qB;WAAA,+F;G;0DAAA,+B;IAAA,yG;G;;wDACA,qB;WAAA,yF;G;wDAAA,4B;IAAA,gG;G;;4DACA,qB;WAAA,iG;G;4DAAA,gC;IAAA,4G;G;;uDACA,qB;WAAA,uF;G;sDAAA,2B;IAAA,6F;G;;8DACA,qB;WAAA,qG;G;6DAAA,kC;IAAA,kH;G;;uDACA,qB;WAAA,uF;G;uDAAA,2B;IAAA,6F;G;;0DACA,qB;WAAA,6F;G;0DAAA,8B;IAAA,sG;G;;yDACA,qB;WAAA,2F;G;yDAAA,6B;IAAA,mG;G;;8DACA,qB;WAAA,qG;G;8DAAA,kC;IAAA,kH;G;;uDACA,qB;WAAA,uF;G;uDAAA,2B;IlWxBA,4BAAqB,kDAArB,IAA6B,qC;G;;wDkWyB7B,qB;WAAA,yF;G;wDAAA,4B;IAAA,gG;G;2DAEA,wB;IAAkC,yCAAe,CAAf,C;EAAiB,C;2DACnD,wB;IAAkC,yCAAe,CAAf,C;EAAiB,C;2DACnD,wB;IAAmC,yCAAe,CAAf,C;EAAiB,C;2DACpD,wB;IAAgC,yCAAe,CAAf,C;EAAiB,C;2DACjD,wB;IAAiC,yCAAe,CAAE,WAAjB,C;EAA4B,C;8DAC7D,4B;IACI,4CAA6B,WAAX,mBAAW,MAAmB,KAAnB,CAA0B,MAAvD,C;EACJ,C;8DACA,qC;IACI,4CAA6B,aAAX,mBAAW,MAAqB,OAArB,EAAsC,KAAtC,CAA6C,MAA1E,C;EACJ,C;yDACA,4B;IACI,uCAAwB,MAAX,mBAAW,MAAc,KAAd,CAAqB,MAA7C,C;EACJ,C;+DACA,4B;IAQiB,Q;IpWrEjB,UAAa,E;IoW8DT,YpW7DG,G;IoW+D0B,kBAA7B,U5WJsC,U4WItC,EAAe,YAAf,C;IAAmC,K/VevC,a;IfuhDgB,U;IAAA,SethDT,W+VhBuC,kB9WsiD9B,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;M8WtiD2D,U9WsiD9C,OE50CmC,I;M4W1NgB,Y9WsiDnD,OE/zCmC,M;M4WtOxD,MAAM,GAAN,IAAa,K;;IAIjB,uCAAa,uDAAb,C;EACJ,C;oDACA,4B;I3WiBW,kBAAX,mB;I2WjBiE,K/VQjE,a;I+VR4C,kC3WiB5C,MYRO,WZQmB,UAA1B,C2WjB4C,C;EAA4B,C;0DACxE,4B;IACI,wCAAyB,OAAX,mBAAW,MAAe,KAAf,CAAsB,MAA/C,C;EACJ,C;mDACA,wB;IAA0B,0BAAqB,C;EAAE,C;mDACjD,wB;IAA0B,0BAAqB,C;EAAE,C;sDACjD,wB;IAA6B,6BAAwB,C;EAAE,C;sDACvD,wB;IAA6B,6BAAwB,C;EAAE,C;oDACvD,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;oDACrC,wB;IAA2B,kCAAQ,CAAR,C;EAAU,C;oDACrC,wB;IAA4B,kCAAQ,CAAR,C;EAAU,C;oDACtC,wB;IAAyB,kCAAQ,CAAR,C;EAAU,C;oDACnC,wB;IAA0B,kCAAQ,CAAE,WAAV,C;EAAqB,C;;;;;;;EChDgB,8B;IAAE,e7WyBvB,U6WzBuB,EAAa,EAAb,C;EAAiB,C;EADtF,qC;IACwF,kBAA5E,4BAAwB,mBAAxB,E1W4C8B,W0W5C9B,EAAuD,gBAAvD,C;IAAkF,KhW4C1F,a;IgW5CE,+BhW6CK,WgW7C0F,SAA/F,C;G;EAEN,gD;IAC4E,kBAAhE,4BAAwB,mBAAxB,E1WyC8B,W0WzC9B,EAAuD,OAAvD,C;IAAsE,KhWyC9E,a;IgWzCE,+BhW0CK,WgW1C8E,SAAnF,C;G;EC9B8B,wD;IAIhC,kCAAwC,IAAxC,EAA8C,QAA9C,EAAwD,OAAxD,C;IAKA,wCAAoC,kB;IACpC,iCAAoC,kB;G;oDALpC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;+DAEA,qB;WAAA,yG;G;+DAAA,qC;IAAA,yH;G;;wDACA,qB;WAAA,2F;G;wDAAA,8B;IpWEA,+BAAqB,mDAArB,IAA6B,2C;G;;;;;;EqWrBjC,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,wD;IACA,8D;IACA,8D;IACA,0D;G;;EAHA,yC;IAAA,yB;IAAA,iC;G;;EACA,4C;IAAA,yB;IAAA,oC;G;;EACA,4C;IAAA,yB;IAAA,oC;G;;EACA,0C;IAAA,yB;IAAA,kC;G;;;;;;EALJ,+B;IAAA,kJ;G;;EAAA,oC;IAAA,a;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,QAAA,qF;;G;;ECAA,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAEI,kE;IAAS,8D;G;;EAAT,8C;IAAA,2B;IAAA,sC;G;;EAAS,4C;IAAA,2B;IAAA,oC;G;;;;;;EAFb,iC;IAAA,iF;G;;EAAA,sC;IAAA,a;MAAA,e;QAAA,2C;MAAA,a;QAAA,yC;MAAA,QAAA,uF;;G;;;ECmBuE,4B;IAAE,ejX0C3B,UiX1C2B,EAAa,EAAb,C;EAAiB,C;EAD1F,6C;IAC4F,kBAAhF,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,cAA3D,C;IAAsF,KpW6D9F,a;IoW7DE,+BpW8DK,WoW9D8F,SAAnG,C;G;EAEN,wD;IACgF,kBAApE,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,EAA2D,OAA3D,C;IAA0E,KpW0DlF,a;IoW1DE,+BpW2DK,WoW3DkF,SAAvF,C;G;ECdsB,sD;IAGxB,qB;M1WVA,UAAa,E;M0WUb,Q1WTO,G;K0WUP,wB;IAHA,kB;IAEA,oB;IAGU,qBAAN,YAAM,EAAQ,QAAR,C;G;kDAGV,mB;IACU,QAAN,YAAM,C;EACV,C;2CAEA,Y;IAAe,kCAAc,WAAd,EAAoB,YAApB,SnXRmD,YmXQvB,cnXRuB,CmXQnD,E;G;oDAEf,+B;IrXgmSO,kBAAM,eqX/lSD,QrX+lSc,OAAb,C;IA6UA,Q;IAAb,wBqX56SY,QrX46SZ,gB;MAAa,WqX56SD,QrX46SZ,M;mBACI,W;MqX76SuB,IAAC,MrX66SE,IqX76SF,aAAD;QAAM,QrX66SH,IqX76SG,a;MrX66SjB,YAAZ,WAAY,EqX76S2B,QAAO,KAAP,CrX66S3B,C;;IqX76SZ,gCrX86SG,WqX96SH,C;EACJ,C;oDAEA,+B;IpXkzCO,kBAAM,eAAa,wBoXjzCd,QpXizCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OoXt3CD,QpXs3CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MoXv3CuB,IAAC,MpXu3CE,IoXv3CF,aAAD;QAAM,QpXu3CH,IoXv3CG,a;MpXu3CjB,YAAZ,WAAY,EoXv3C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CpXu3C3B,C;;IoXv3CZ,gCpXw3CG,WoXx3CH,C;EACJ,C;oDAEA,+B;IrXwlSO,kBAAM,eqXvlSD,QrXulSc,OAAb,C;IA6UA,Q;IAAb,wBqXp6SY,QrXo6SZ,gB;MAAa,WqXp6SD,QrXo6SZ,M;mBACI,W;MqXr6SuB,IAAC,MrXq6SE,IqXr6SF,aAAD;QAAM,QrXq6SH,IqXr6SG,a;MrXq6SjB,YAAZ,WAAY,EqXr6S2B,QAAO,KAAP,CrXq6S3B,C;;IqXr6SZ,gCrXs6SG,WqXt6SH,C;EACJ,C;oDAEA,+B;IAS6B,Q;IARzB,IAAI,QAAS,UAAb,C;MACI,M;K1WpCR,UAAa,E;I0WuCT,iB1WtCG,G;IVqmDS,U;IAAA,SoX7jDZ,QpX6jDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MoX7jDO,IAAC,MpX6jDK,OoX7jDL,aAAD;QAAM,QpX6jDA,OoX7jDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,UAAY,SAAZ,IAAyB,yD;EAC7B,C;oDAEA,4B;IAAmD,oBAAU,K;EAAM,C;mDACnE,4B;IAAkD,mBAAS,K;EAAM,C;wDACjE,4B;IACI,wBAAyB,OAAX,mBAAW,EAAO,KAAP,CAAc,M;EAC3C,C;kDACA,4B;IjXqCW,kBAAX,mB;IiXrC0E,KrW4B1E,a;IqW5BqD,kBjXqCrD,MYRO,WZQmB,UAA1B,C;EiXrCiF,C;gEACjF,6B;IAG0B,IAAO,I;IAA7B,gCAAsB,cAAO,cAAP,MAAO,CAAP,6B;EAC1B,C;+DACA,8B;IAAuD,gCAAsB,O;EAAQ,C;6DACrF,4B;I1W1DA,UAAa,E;I0W0DsF,K1WxD/F,CADG,GACH,C;I0WwDoE,4B1WzDjE,G;E0WyDmG,C;;;;;;ECxDnF,oD;IAD3B,e;IAC4B,oC;IAD5B,iB;IAAA,uB;G;EAAA,uC;IAAA,0C;K;IAEI,2EAAU,YAAV,C;IACA,+EAAY,cAAZ,C;IACA,qEAAO,QAAP,C;IACA,uEAAQ,UAAR,C;IACA,2EAAU,YAAV,C;IACA,iEAAK,MAAL,C;IACA,yEAAS,WAAT,C;IACA,6EAAW,aAAX,C;IACA,mEAAM,OAAN,C;IACA,qEAAO,SAAP,C;IACA,0EAAS,WAAT,C;IACA,gEAAI,KAAJ,C;G;;SAZwB,Y;MAAA,+B;K;;;EACxB,kD;IAAA,6B;IAAA,0C;G;;EACA,oD;IAAA,6B;IAAA,4C;G;;EACA,+C;IAAA,6B;IAAA,uC;G;;EACA,gD;IAAA,6B;IAAA,wC;G;;EACA,kD;IAAA,6B;IAAA,0C;G;;EACA,6C;IAAA,6B;IAAA,qC;G;;EACA,iD;IAAA,6B;IAAA,yC;G;;EACA,mD;IAAA,6B;IAAA,2C;G;;EACA,8C;IAAA,6B;IAAA,sC;G;;EACA,+C;IAAA,6B;IAAA,uC;G;;EACA,iD;IAAA,6B;IAAA,yC;G;;EACA,4C;IAAA,6B;IAAA,oC;G;wCAEA,Y;IAAkC,qB;G;;;;;;EAftC,mC;IAAA,ye;G;;EAAA,wC;IAAA,a;MAAA,iB;QAAA,+C;MAAA,mB;QAAA,iD;MAAA,c;QAAA,4C;MAAA,e;QAAA,6C;MAAA,iB;QAAA,+C;MAAA,Y;QAAA,0C;MAAA,gB;QAAA,8C;MAAA,kB;QAAA,gD;MAAA,a;QAAA,2C;MAAA,c;QAAA,4C;MAAA,gB;QAAA,8C;MAAA,W;QAAA,yC;MAAA,QAAA,yF;;G;;ECFA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAEI,4D;IACA,kF;IACA,8D;IACA,0D;IACA,wF;IACA,0F;IACA,sF;IACA,4F;G;;EAPA,2C;IAAA,yB;IAAA,mC;G;;EACA,sD;IAAA,yB;IAAA,8C;G;;EACA,4C;IAAA,yB;IAAA,oC;G;;EACA,0C;IAAA,yB;IAAA,kC;G;;EACA,yD;IAAA,yB;IAAA,iD;G;;EACA,0D;IAAA,yB;IAAA,kD;G;;EACA,wD;IAAA,yB;IAAA,gD;G;;EACA,2D;IAAA,yB;IAAA,mD;G;;;;;;EATJ,+B;IAAA,oW;G;;EAAA,oC;IAAA,a;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,4B;QAAA,sD;MAAA,6B;QAAA,uD;MAAA,2B;QAAA,qD;MAAA,8B;QAAA,wD;MAAA,QAAA,qF;;G;;ECkCI,kC;IAAS,gB;IAAD,QAAC,2BAAY,WAAZ,0DAAD,YAA8D,gCAA9D,O;G;EACR,yC;IAAa,UAAY,WAAZ,IAA2B,uC;EAAkB,C;;EAK9D,6C;IACuE,kBAA3D,0BAAsB,gBAAtB,EAAiD,OAAT,QAAS,CAAjD,C;IAAiE,KxWuCzE,a;IwWvCE,+BxWwCK,WwWxCyE,SAA9E,C;G;EC/B8D,2D;IAIhE,kCAAiC,IAAjC,EAAuC,QAAvC,EAAiD,OAAjD,C;IAKA,+BAAmC,kB;IACnC,+BAAmC,kB;IACnC,iCAAuC,kB;IACvC,sCAAkC,kB;IAClC,wCAA2C,kB;IAC3C,gCAA4B,kB;IAC5B,mDAA+C,kB;IAC/C,gCAA4B,kB;IAC5B,mCAA+B,kB;IAC/B,+BAA4B,kB;IAC5B,iCAAuC,kB;G;uDAdvC,+B;IACI,gCAAiB,OAAT,QAAS,CAAjB,C;EACJ,C;;yDAEA,qB;WAAA,0F;G;yDAAA,4B;I5WEA,6BAAqB,oDAArB,IAA6B,uC;G;;yD4WD7B,qB;WAAA,0F;G;yDAAA,4B;I5WCA,6BAAqB,oDAArB,IAA6B,uC;G;;2D4WA7B,qB;WAAA,8F;G;2DAAA,8B;I5WAA,+BAAqB,sDAArB,IAA6B,2C;G;;gE4WC7B,qB;WAAA,wG;G;gEAAA,mC;IAAA,sH;G;;kEACA,qB;WAAA,4G;G;kEAAA,qC;IAAA,4H;G;;0DACA,qB;WAAA,4F;G;0DAAA,6B;IAAA,oG;G;;6EACA,qB;WAAA,kI;G;6EAAA,gD;IAAA,6J;G;;0DACA,qB;WAAA,4F;G;0DAAA,6B;IAAA,oG;G;;6DACA,qB;WAAA,kG;G;6DAAA,gC;IAAA,6G;G;;yDACA,qB;WAAA,0F;G;yDAAA,4B;IAAA,iG;G;;2DACA,qB;WAAA,8F;G;2DAAA,8B;I5WRA,+BAAqB,sDAArB,IAA6B,2C;G;8D4WU7B,4B;I9W9BA,UAAa,E;I8W8BwE,K9W5BjF,CADG,GACH,C;I8W4BuD,2C9W7BpD,G8W6BoD,C;EAAiC,C;;;;;;EC/BhG,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,oE;IAAS,8D;IAAM,kE;IAAQ,gE;IAAO,oE;G;;EAA9B,+C;IAAA,4B;IAAA,uC;G;;EAAS,4C;IAAA,4B;IAAA,oC;G;;EAAM,8C;IAAA,4B;IAAA,sC;G;;EAAQ,6C;IAAA,4B;IAAA,qC;G;;EAAO,+C;IAAA,4B;IAAA,uC;G;;;;;;EAFlC,kC;IAAA,oM;G;;EAAA,uC;IAAA,a;MAAA,e;QAAA,4C;MAAA,Y;QAAA,yC;MAAA,c;QAAA,2C;MAAA,a;QAAA,0C;MAAA,e;QAAA,4C;MAAA,QAAA,2F;;G;;ECAA,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,oE;IAAS,gE;IAAO,oE;IAAS,oE;IAAS,wE;IAAW,4E;IAAa,gF;G;;EAA1D,+C;IAAA,4B;IAAA,uC;G;;EAAS,6C;IAAA,4B;IAAA,qC;G;;EAAO,+C;IAAA,4B;IAAA,uC;G;;EAAS,+C;IAAA,4B;IAAA,uC;G;;EAAS,iD;IAAA,4B;IAAA,yC;G;;EAAW,mD;IAAA,4B;IAAA,2C;G;;EAAa,qD;IAAA,4B;IAAA,6C;G;;;;;;EAF9D,kC;IAAA,kS;G;;EAAA,uC;IAAA,a;MAAA,e;QAAA,4C;MAAA,a;QAAA,0C;MAAA,e;QAAA,4C;MAAA,e;QAAA,4C;MAAA,iB;QAAA,8C;MAAA,mB;QAAA,gD;MAAA,qB;QAAA,kD;MAAA,QAAA,2F;;G;;ECAA,0C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,wE;IAAS,sE;IAAQ,oE;G;;EAAjB,iD;IAAA,8B;IAAA,yC;G;;EAAS,gD;IAAA,8B;IAAA,wC;G;;EAAQ,+C;IAAA,8B;IAAA,uC;G;;;;;;EAFrB,oC;IAAA,+H;G;;EAAA,yC;IAAA,a;MAAA,e;QAAA,8C;MAAA,c;QAAA,6C;MAAA,a;QAAA,4C;MAAA,QAAA,6F;;G;;ECAA,wC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAEI,8D;IACA,gE;IACA,gE;IACA,oE;IACA,kE;IACA,0D;IACA,0D;IACA,0D;IACA,0D;IACA,0D;IACA,2D;IACA,yE;IACA,yE;IACA,uE;IACA,mE;IACA,yE;IACA,6E;IACA,2E;IACA,+E;IACA,mE;IACA,+E;IACA,yE;IACA,+E;IACA,+E;IACA,mF;IACA,uF;IACA,2F;IACA,2E;IACA,mE;G;;EA5BA,4C;IAAA,4B;IAAA,oC;G;;EACA,6C;IAAA,4B;IAAA,qC;G;;EACA,6C;IAAA,4B;IAAA,qC;G;;EACA,+C;IAAA,4B;IAAA,uC;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;EACA,0C;IAAA,4B;IAAA,kC;G;;EACA,0C;IAAA,4B;IAAA,kC;G;;EACA,0C;IAAA,4B;IAAA,kC;G;;EACA,0C;IAAA,4B;IAAA,kC;G;;EACA,0C;IAAA,4B;IAAA,kC;G;;EACA,0C;IAAA,4B;IAAA,kC;G;;EACA,iD;IAAA,4B;IAAA,yC;G;;EACA,iD;IAAA,4B;IAAA,yC;G;;EACA,gD;IAAA,4B;IAAA,wC;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;EACA,iD;IAAA,4B;IAAA,yC;G;;EACA,mD;IAAA,4B;IAAA,2C;G;;EACA,kD;IAAA,4B;IAAA,0C;G;;EACA,oD;IAAA,4B;IAAA,4C;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;EACA,oD;IAAA,4B;IAAA,4C;G;;EACA,iD;IAAA,4B;IAAA,yC;G;;EACA,oD;IAAA,4B;IAAA,4C;G;;EACA,oD;IAAA,4B;IAAA,4C;G;;EACA,sD;IAAA,4B;IAAA,8C;G;;EACA,wD;IAAA,4B;IAAA,gD;G;;EACA,0D;IAAA,4B;IAAA,kD;G;;EACA,kD;IAAA,4B;IAAA,0C;G;;EACA,8C;IAAA,4B;IAAA,sC;G;;;;;;EA9BJ,kC;IAAA,2oC;G;;EAAA,uC;IAAA,a;MAAA,Y;QAAA,yC;MAAA,a;QAAA,0C;MAAA,a;QAAA,0C;MAAA,e;QAAA,4C;MAAA,c;QAAA,2C;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,U;QAAA,uC;MAAA,iB;QAAA,8C;MAAA,iB;QAAA,8C;MAAA,gB;QAAA,6C;MAAA,c;QAAA,2C;MAAA,iB;QAAA,8C;MAAA,mB;QAAA,gD;MAAA,kB;QAAA,+C;MAAA,oB;QAAA,iD;MAAA,c;QAAA,2C;MAAA,oB;QAAA,iD;MAAA,iB;QAAA,8C;MAAA,oB;QAAA,iD;MAAA,oB;QAAA,iD;MAAA,sB;QAAA,mD;MAAA,wB;QAAA,qD;MAAA,0B;QAAA,uD;MAAA,kB;QAAA,+C;MAAA,c;QAAA,2C;MAAA,QAAA,2F;;G;;ECAA,0C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wC;IAAA,2C;K;IAEI,8D;IACA,8D;IACA,8D;IACA,8D;IACA,8D;IACA,8D;IACA,4E;IACA,4E;IACA,oE;IACA,oE;IACA,yE;IACA,uE;IACA,2E;IACA,uE;IACA,yE;IACA,2E;IACA,2E;IACA,2E;IACA,2E;IACA,2E;IACA,qE;IACA,+E;G;;EArBA,4C;IAAA,8B;IAAA,oC;G;;EACA,4C;IAAA,8B;IAAA,oC;G;;EACA,4C;IAAA,8B;IAAA,oC;G;;EACA,4C;IAAA,8B;IAAA,oC;G;;EACA,4C;IAAA,8B;IAAA,oC;G;;EACA,4C;IAAA,8B;IAAA,oC;G;;EACA,mD;IAAA,8B;IAAA,2C;G;;EACA,mD;IAAA,8B;IAAA,2C;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,iD;IAAA,8B;IAAA,yC;G;;EACA,gD;IAAA,8B;IAAA,wC;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,gD;IAAA,8B;IAAA,wC;G;;EACA,iD;IAAA,8B;IAAA,yC;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,oD;IAAA,8B;IAAA,4C;G;;;;;;EAvBJ,oC;IAAA,o3B;G;;EAAA,yC;IAAA,a;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,U;QAAA,yC;MAAA,iB;QAAA,gD;MAAA,iB;QAAA,gD;MAAA,a;QAAA,4C;MAAA,a;QAAA,4C;MAAA,e;QAAA,8C;MAAA,c;QAAA,6C;MAAA,gB;QAAA,+C;MAAA,c;QAAA,6C;MAAA,e;QAAA,8C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,gB;QAAA,+C;MAAA,a;QAAA,4C;MAAA,kB;QAAA,iD;MAAA,QAAA,6F;;G;;;EC4C6E,+B;IAAE,gB5XiBjC,U4XjBiC,EAAc,EAAd,C;EAAkB,C;EADjG,gD;IACmG,kBAAvF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,iBAAjE,C;IAA6F,K/WoCrG,a;I+WpCE,+B/WqCK,W+WrCqG,SAA1G,C;G;EAGuE,iC;IAAE,a5XcjC,U4XdiC,EAAW,EAAX,C;EAAe,C;EAD9F,qD;IACgG,kBAApF,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,mBAAjE,C;I/WiCR,W+WhCI,uB/WgCJ,W+WhCI,U;IACA,M/W+BJ,W+W/BI,C;IAFF,+B/WkCK,W+W/BL,SAHA,C;G;EAKN,2D;IACuF,kBAA1E,6BAAyB,mBAAzB,EAAuD,OAAT,QAAS,CAAvD,EAAiE,OAAjE,C;IAAgF,K/W2BzF,a;I+W3BG,+B/W4BI,W+W5ByF,SAA7F,C;G;EChDkB,kC;IrXJrB,UAAa,E;IqXMb,8BAA8B,IAA9B,ErXLO,GqXKP,C;G;iDAEA,2B;IAAoC,oBAAU,I;EAAK,C;iDACnD,kC;IAAsB,qB;MAAA,QAAe,I;IAAM,oB;MAAA,OAAc,I;IrXTzD,UAAa,E;IACN,GqXQyE,CAAK,OAAL,S;IrXRzE,GqXQgG,CAAK,MAAL,Q;IAAtC,oBrXR1D,G;EqXQsH,C;;;;;;;ECOjI,gC;IAC8C,kBAAlC,uBAAmB,aAAnB,C;IAAwC,KjX8DhD,a;IiX9DE,+BjX+DK,WiX/DgD,SAArD,C;G;ECZ8C,4C;IAEhD,qB;MvXPA,UAAa,E;MuXOb,QvXNO,G;KuXOP,wB;IAFA,gB;IACA,kB;G;kDAEA,mB;IACU,QAAN,UAAM,C;EACV,C;2CAEA,Y;IAAe,kCAAc,SAAd,EAAoB,UAApB,ShYDmD,YgYCvB,chYDuB,CgYCnD,E;G;;;;;;ECRyB,yC;IAExC,qB;MxXPA,UAAa,E;MwXOb,QxXNO,G;KwXOP,wB;IAFA,gB;IACA,kB;G;+CAEA,mB;IACU,QAAN,UAAM,C;EACV,C;wCAEA,Y;IAAe,kCAAc,SAAd,EAAoB,UAApB,SjYDmD,YiYCvB,cjYDuB,CiYCnD,E;G;;;;;;ECLyD,0D;IAIxE,uBAAe,OAAf,C;IAHA,0B;IzXTA,UAAa,E;IyXab,kBzXZO,G;IyXsCP,iCAAyB,e;IACzB,mCAA8B,e;IAE9B,gCAA4B,e;IAC5B,+BAA2B,e;IAC3B,8BAA0B,e;IAC1B,sCAA2D,e;IAGjD,qBAAN,UAAM,EAAQ,QAAR,C;G;sDAjCV,+B;IpYumSO,kBAAM,eoYtmSD,QpYsmSc,OAAb,C;IA6UA,Q;IAAb,wBoYn7SY,QpYm7SZ,gB;MAAa,WoYn7SD,QpYm7SZ,M;mBACI,W;MoYp7SuB,IAAC,MpYo7SE,IoYp7SF,aAAD;QAAM,QpYo7SH,IoYp7SG,a;MpYo7SjB,YAAZ,WAAY,EoYp7S2B,QAAO,KAAP,CpYo7S3B,C;;IoYp7SZ,gCpYq7SG,WoYr7SH,C;EACJ,C;sDAEA,+B;InYyzCO,kBAAM,eAAa,wBmYxzCd,QnYwzCc,EAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,OmY73CD,QnY63CC,W;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MmY93CuB,IAAC,MnY83CE,ImY93CF,aAAD;QAAM,QnY83CH,ImY93CG,a;MnY83CjB,YAAZ,WAAY,EmY93C2B,GAAA,GAAI,WAAJ,EAAkB,KAAlB,CnY83C3B,C;;ImY93CZ,gCnY+3CG,WmY/3CH,C;EACJ,C;sDAEA,+B;IpY+lSO,kBAAM,eoY9lSD,QpY8lSc,OAAb,C;IA6UA,Q;IAAb,wBoY36SY,QpY26SZ,gB;MAAa,WoY36SD,QpY26SZ,M;mBACI,W;MoY56SuB,IAAC,MpY46SE,IoY56SF,aAAD;QAAM,QpY46SH,IoY56SG,a;MpY46SjB,YAAZ,WAAY,EoY56S2B,QAAO,KAAP,CpY46S3B,C;;IoY56SZ,gCpY66SG,WoY76SH,C;EACJ,C;sDAEA,+B;IASc,Q;IARV,IAAI,QAAS,UAAb,C;MACI,M;KzX7BR,UAAa,E;IyXgCT,iBzX/BG,G;IVqmDS,U;IAAA,SmYpkDZ,QnYokDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MmYpkDO,IAAC,MnYokDK,OmYpkDL,aAAD;QAAM,QnYokDA,OmYpkDA,a;MAAU,WAAW,GAAX,IAAkB,K;;IAErD,oCAAU,yDAAV,C;EACJ,C;;0DAEA,qB;WAAA,+F;G;0DAAA,8B;IAAA,wG;G;;4DACA,qB;WAAA,mG;G;2DAAA,gC;IAAA,8G;G;;yDAEA,qB;WAAA,6F;G;yDAAA,6B;IAAA,qG;G;;wDACA,qB;WAAA,2F;G;wDAAA,4B;IAAA,kG;G;;uDACA,qB;WAAA,yF;G;uDAAA,2B;IAAA,+F;G;;+DACA,qB;WAAA,yG;G;+DAAA,mC;IAAA,uH;G;6CAMA,Y;IAC4B,gBAAxB,MAAO,MAAK,eAAL,C;IpYgmWK,Q;IAAhB,wBAAgB,SAAhB,gB;MAAgB,cAAA,SAAhB,M;MoYhmW6C,qBpYgmWhB,OoYhmWgB,EAAa,uBpYgmW7B,OoYhmW6B,CAAb,C;;IAEzC,OAAO,2BAAc,mBAAd,EAAoB,UAApB,SlY1CuD,YkY0C3B,clY1C2B,CkY0CvD,E;EACX,C;;;;;;EC7CJ,+B;IAA4D,iBAAY,GAAZ,C;G;EAE5D,kD;IACU,iBAAY,QAAS,aAArB,C;G;EAEV,yD;IACI,UAAY,QAAS,aAArB,IAA6B,K;EACjC,C;8GAEA,yB;IAAA,8B;IAAA,yD;MACW,gB;MAAD,QAAC,2BAAY,QAAS,aAArB,0DAAD,YAA+C,2BAA/C,O;K;GADV,C;8GAGA,yD;IACI,UAAY,QAAS,aAArB,IAA6B,uC;EACjC,C;EzGAA,kD;IACU,iBAAY,QAAS,aAArB,C;G;EAEV,yD;IACI,UAAY,QAAS,aAArB,IAA6B,K;EACjC,C;8GAEA,yB;IAAA,8B;IAAA,0B;IAAA,yD;MACW,gB;MAAD,U;MAAA,KAAC,2BAAY,QAAS,aAArB,0DAAD,U;QAAuE,kBAAhB,Y;Q5RsxBtD,sB;;UAyXS,U;UAAhB,yD;YAAgB,cAAhB,mB;YAAsB,I4R/oC8D,O5R+oChD,O4R/oCmD,WAAH,S5R+oC9D,C;cAAwB,qBAAO,O;cAAP,uB;;UAC9C,qBAAO,I;;;Q4RhpCD,S5RsxBN,kB;;Q4RtxBM,a;MAAA,a;K;GADV,C;8GAGA,yD;IACI,UAAY,QAAS,aAArB,IAA6B,uC;EACjC,C;E0GlCA,8B;IAAA,kC;G;kDACI,6B;IACW,gB;IAAD,QAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,YAAoD,eAAc,iBAAd,CAApD,O;G;kDAEV,oC;IACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;EANJ,0C;IAAA,yC;MAAA,wB;KAAA,kC;G;EASA,sC;IAAA,0C;G;0DACI,6B;IACsB,Q;IAAZ,sBAAuD,CAA3C,eAAQ,OAAR,CAAoB,QAAS,aAA7B,mCAA2C,YAAvD,C;G;;;;;;;EAFd,kD;IAAA,iD;MAAA,gC;KAAA,0C;G;EAKA,mC;IAAA,uC;G;uDACI,6B;IACO,gB;IAAD,QAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,YAAoD,oBAAmB,iBAAnB,CAApD,O;G;uDAEN,oC;IACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;EANJ,+C;IAAA,8C;MAAA,6B;KAAA,uC;G;EASA,2C;IAAA,+C;G;+DACI,6B;IAC2B,Q;IAAjB,2BAA4D,CAA3C,qBAAQ,OAAR,CAAoB,QAAS,aAA7B,2BAA2C,YAA5D,C;G;;;;;;;EAFd,uD;IAAA,sD;MAAA,qC;KAAA,+C;G;EAKA,yB;IAAA,6B;G;6CACI,6B;IACW,gB;IAAD,QAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,YAAuD,iBAAvD,O;G;6CAEV,oC;IACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;EANJ,qC;IAAA,oC;MAAA,mB;KAAA,6B;G;EASA,iC;IAAA,qC;G;qDACI,6B;IACgB,Q;IAAN,iBAAM,eAAQ,OAAR,CAAoB,QAAS,aAA7B,mCAAN,C;G;;;;;;;EAFd,6C;IAAA,4C;MAAA,2B;KAAA,qC;G;EAKA,6B;IAAA,iC;G;iDACI,6B;IACW,gB;IAAD,QAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,YAAiE,yBAAjE,O;G;iDAEV,oC;IACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;EANJ,yC;IAAA,wC;MAAA,uB;KAAA,iC;G;EASA,qC;IAAA,yC;G;yDACI,6B;IAC4B,Q;IAAlB,OAAU,kBAAQ,eAAQ,OAAR,CAAoB,QAAS,aAA7B,mCAAR,C;G;;;;;;;EAFxB,iD;IAAA,gD;MAAA,+B;KAAA,yC;G;EAKA,iC;IAAA,qC;G;qDACI,6B;IACW,gB;IAAD,U;IAAA,KAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,U;MAA8E,gBAAT,sB;MtY0vBxE,sB;;QAyXS,U;QAAhB,uD;UAAgB,cAAhB,iB;UAAsB,IsYnnCiF,OtYmnCnE,OsYnnCwE,WAAL,StYmnCjF,C;YAAwB,qBAAO,O;YAAP,uB;;QAC9C,qBAAO,I;;;MsYpnCG,StY0vBV,kB;;MsY1vBU,a;IAAA,a;G;qDAEV,oC;IACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;EANJ,6C;IAAA,4C;MAAA,2B;KAAA,qC;G;EASA,yC;IAAA,6C;G;6DACI,6B;IACW,kBAAD,M;IAAA,U;IAAA,KAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,U;MAA8E,gBAAT,sB;MtYivBxE,sB;;QAyXS,U;QAAhB,uD;UAAgB,cAAhB,iB;UAAsB,IsY1mCiF,OtY0mCnE,OsY1mCwE,WAAL,StY0mCjF,C;YAAwB,qBAAO,O;YAAP,uB;;QAC9C,qBAAO,I;;;MsY3mCG,StYivBV,kB;;MsYjvBU,a;IAAA,e;IAAA,mB;MACK,MAAM,iC;KADX,a;G;;;;;;;EAFd,qD;IAAA,oD;MAAA,mC;KAAA,6C;G;EC5D+B,8B;IAC3B,kB;I5XRA,UAAa,E;I4XUb,W5XTO,G;G;E4XYS,oD;IAAA,wB;MAA2B,gBAAb,gB;MAAqB,cvXkEnD,SuXlEmD,Q;MAArB,OAAoC,cvXmE3D,SuXnE2D,C;IAAU,C;G;2CAD5E,4B;IACI,SAAI,SAAJ,IAAY,kC;IACZ,OAAO,S;EACX,C;2CAEA,8B;IACI,SAAI,SAAJ,IAAoB,cAAR,OAAQ,C;IACpB,OAAO,S;EACX,C;;;;;;EAIA,kC;IAAQ,Q;I5XxBR,UAAa,E;IVsmDG,U;IAAA,SsY7kDZ,etY6kDY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MsY5kDyB,kBAAb,gB;MtY4kDC,OsY5kDqB,MvXqDlD,a;ML9EO,G4XyBC,CtY4kDqB,OsY5kDb,SAAR,IAAiD,cvXsDlD,WuXtDkD,C;;ICyHzC,U;IAAA,SDtHZ,sBpY0UgF,QAAQ,W;IqYpN5F,OAAgB,gBAAhB,C;MAAgB,6B;MDtHY,UCsHC,SrYuImC,I;MoY7P/B,YCsHJ,SrYoJmC,M;MoYzQ1B,kB;MAArB,mBAAJ,GAAI,C;MACL,kBAD0B,KAC1B,c;QAAuB,uBAAN,KAAM,C;;QACT,SAAN,KAAM,W;M5X/BnB,G4X6BC,iB;;IANA,4B5XvBD,G4XuBC,0B;G;EEzBZ,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAEI,gD;IAAI,gD;IAAI,gD;IAAI,gD;IAAI,gD;G;;EAAhB,qC;IAAA,uB;IAAA,6B;G;;EAAI,qC;IAAA,uB;IAAA,6B;G;;EAAI,qC;IAAA,uB;IAAA,6B;G;;EAAI,qC;IAAA,uB;IAAA,6B;G;;EAAI,qC;IAAA,uB;IAAA,6B;G;;;;;;EAFpB,6B;IAAA,wJ;G;;EAAA,kC;IAAA,a;MAAA,U;QAAA,kC;MAAA,U;QAAA,kC;MAAA,U;QAAA,kC;MAAA,U;QAAA,kC;MAAA,U;QAAA,kC;MAAA,QAAA,4E;;G;;ECQA,+B;IAA6D,QAAM,GAAN,M;WACzD,I;QADyD,OACxC,Y;WACjB,I;QAFyD,OAExC,Y;WACjB,I;QAHyD,OAGxC,Y;WACjB,I;QAJyD,OAIxC,Y;WACjB,I;QALyD,OAKxC,Y;cALwC,mC;;G;ECH7D,+B;IAAwD,+BAAO,GAAP,C;G;;;EAExD,2B;WAAA,2C;G;;;EACA,6B;WAAA,+C;G;EAEA,8B;IAAkC,OAAA,iBAAG,CAAO,GAAP,C;G;EACrC,8B;IAAsC,OAAA,iBAAG,CAAO,GAAI,WAAX,C;G;EAEzC,gC;IAAoC,OAAA,mBAAK,CAAO,GAAP,C;G;EACzC,gC;IAAwC,OAAA,mBAAK,CAAO,GAAI,WAAX,C;G;;;EAE7C,gC;WAAA,qD;G;EAEA,0C;IAA8D,OAAA,sBAAQ,CAAO,KAAM,WAAb,EAAyB,GAAI,WAA7B,C;G;;;EAEtE,6B;WAAA,+C;G;EAEA,gC;IAAwC,OAAA,mBAAK,CAAO,GAAI,WAAX,C;G;;;EAE7C,8B;WAAA,iD;G;EAEA,iC;IAAyC,OAAA,oBAAM,CAAO,GAAI,WAAX,C;G;ECtB/C,4C;IAAA,gD;G;EAIe,4E;IAAA,sB;MAAS,wBAAS,GAAT,C;IAAc,C;G;gEAHlC,6B;IACmB,Q;IAAf,eAAe,eAAQ,OAAR,CAAoB,QAAS,aAA7B,qC;IAEf,OAAO,0D;EACX,C;;;;;;;EALJ,wD;IAAA,uD;MAAA,sC;KAAA,gD;G;EAQA,oC;IAAA,wC;G;EAIe,oE;IAAA,sB;MAAS,wBAAS,GAAT,C;IAAc,C;G;wDAHlC,6B;IACmB,gB;IAAA,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,4D;IAAA,mB;MAAgE,OAAO,I;KAAtF,eAAe,M;IAEf,OAAO,kD;EACX,C;EAQyC,iE;IAAA,sB;MAAe,Q;MAAN,qBAAM,kDAAN,C;IAAkB,C;G;wDANpE,oC;IACI,IAAI,aAAJ,C;MACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,I;MACrC,M;KAGI,OAAR,CAAoB,QAAS,aAA7B,IAAqC,+C;EACzC,C;;;;;;;EAdJ,gD;IAAA,+C;MAAA,8B;KAAA,wC;G;EAmBA,mD;IAAA,uD;G;EAIe,0F;IAAA,6B;MAAgB,+BAAgB,KAAhB,EAAuB,GAAvB,C;IAA4B,C;G;uEAHvD,6B;IAC0B,Q;IAAtB,sBAAsB,eAAQ,OAAR,CAAoB,QAAS,aAA7B,qC;IAEtB,OAAO,wE;EACX,C;;;;;;;EALJ,+D;IAAA,8D;MAAA,6C;KAAA,uD;G;EAQA,2C;IAAA,+C;G;EAIe,kF;IAAA,6B;MAAgB,+BAAgB,KAAhB,EAAuB,GAAvB,C;IAA4B,C;G;+DAHvD,6B;IAC0B,gB;IAAA,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,4D;IAAA,mB;MAAuE,OAAO,I;KAApG,sBAAsB,M;IAEtB,OAAO,gE;EACX,C;EAQyC,wE;IAAA,6B;MAAgC,qBAAM,KAAN,EAAa,GAAb,C;IAAkB,C;G;+DAN3F,oC;IACI,IAAI,aAAJ,C;MACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,I;MACrC,M;KAGI,OAAR,CAAoB,QAAS,aAA7B,IAAqC,sD;EACzC,C;;;;;;;EAdJ,uD;IAAA,sD;MAAA,qC;KAAA,+C;G;EAmBA,4C;IAAA,gD;G;EAIe,4E;IAAA,sB;MAAS,wBAAS,GAAT,C;IAAc,C;G;gEAHlC,6B;IACmB,Q;IAAf,eAAe,eAAQ,OAAR,CAAoB,QAAS,aAA7B,qC;IAEf,OAAO,0D;EACX,C;;;;;;;EALJ,wD;IAAA,uD;MAAA,sC;KAAA,gD;G;EAQA,oC;IAAA,wC;G;EAIe,oE;IAAA,sB;MAAS,wBAAS,GAAT,C;IAAc,C;G;wDAHlC,6B;IACmB,gB;IAAA,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,4D;IAAA,mB;MAA+D,OAAO,I;KAArF,eAAe,M;IAEf,OAAO,kD;EACX,C;EAQyC,iE;IAAA,sB;MAAiB,qBAAM,GAAN,C;IAAW,C;G;wDANrE,oC;IACI,IAAI,aAAJ,C;MACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,I;MACrC,M;KAGI,OAAR,CAAoB,QAAS,aAA7B,IAAqC,+C;EACzC,C;;;;;;;EAdJ,gD;IAAA,+C;MAAA,8B;KAAA,wC;G;ECxDA,+B;IAAoE,QAAM,GAAN,M;WAChE,I;QADgE,OAC/C,Y;WACjB,I;QAFgE,OAE/C,Y;WACjB,I;QAHgE,OAG/C,Y;WACjB,I;QAJgE,OAI/C,Y;WACjB,I;QALgE,OAK/C,Y;cAL+C,mC;;G;EAQpE,oC;IACI,QAAM,GAAN,M;WACI,I;QAAmB,eAAK,K;QAAxB,K;WACA,I;QAAmB,eAAK,K;QAAxB,K;WACA,I;QAAmB,eAAK,K;QAAxB,K;WACA,I;QAAmB,eAAK,K;QAAxB,K;WACA,I;QAAmB,eAAK,K;QAAxB,K;;EAER,C;EChBA,+B;IAAgE,Q;IAAA,uDAAY,GAAZ,Q;G;;;EAEhE,6B;WAAA,+C;G;EAAA,+B;IAAA,mD;G;;;EACA,+B;WAAA,mD;G;EAAA,mC;IAAA,yD;G;EAEA,8B;IAAyC,Q;IAAA,mDAAW,GAAX,Q;G;EACzC,8B;IAA6C,Q;IAAA,mDAAW,GAAI,WAAf,Q;G;EAGpC,kC;IAAA,sB;MAAiB,qBAAM,GAAN,C;IAAW,C;G;EAFrC,gC;IAES,Q;IAAL,kBAAK,mEAAL,C;EACJ,C;EAGS,oC;IAAA,sB;MAAiB,qBAAiB,mBAAQ,GAAR,CAAjB,C;IAA+B,C;G;EAFzD,gC;IAES,Q;IAAL,kBAAK,qEAAL,C;EACJ,C;EAEA,gC;IAA2C,Q;IAAA,qDAAa,GAAb,Q;G;EAC3C,gC;IAA+C,Q;IAAA,qDAAa,GAAI,WAAjB,Q;G;EAGpC,oC;IAAA,sB;MAAiB,qBAAM,GAAN,C;IAAW,C;G;EAFvC,kC;IAEW,Q;IAAP,oBAAO,qEAAP,C;EACJ,C;EAGW,sC;IAAA,sB;MAAiB,qBAAiB,mBAAQ,GAAR,CAAjB,C;IAA+B,C;G;EAF3D,kC;IAEW,Q;IAAP,oBAAO,uEAAP,C;EACJ,C;;;EAEA,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;EAEA,0C;IAAqE,Q;IAAA,wDAAgB,KAAM,WAAtB,EAAkC,GAAI,WAAtC,Q;G;EAEvD,uC;IAAA,6B;MAAgC,qBAAiB,mBAAQ,KAAR,CAAjB,EAA4C,mBAAQ,GAAR,CAA5C,C;IAA0D,C;G;EADxG,qC;IACI,uBAAU,qBAAV,C;EACJ,C;;;EAEA,+B;WAAA,mD;G;EAAA,mC;IAAA,yD;G;EAEA,gC;IAA+C,Q;IAAA,qDAAa,GAAI,WAAjB,Q;G;EAGpC,oC;IAAA,sB;MAAiB,qBAAiB,mBAAQ,GAAR,CAAjB,C;IAA+B,C;G;EAF3D,kC;IAEW,Q;IAAP,oBAAO,qEAAP,C;EACJ,C;;;EAEA,gC;WAAA,qD;G;EAAA,qC;IAAA,4D;G;EAEA,iC;IAAgD,Q;IAAA,sDAAc,GAAI,WAAlB,Q;G;EAEpC,qC;IAAA,sB;MAAiB,qBAAiB,mBAAQ,GAAR,CAAjB,C;IAA+B,C;G;EAD5D,mC;IACI,qBAAQ,mBAAR,C;EACJ,C;EAEA,kC;IAAqF,Q;IAAA,U;IAAA,sC;MAAA,a;;MnY1DjF,UAAa,E;MmY0DoE,SnYzD1E,G;;ImYyDkG,wB;IAAM,K9XqB/G,a;I8XrBuE,mB9XsBhE,W;E8XtB+G,C;EClD1H,oC;IAAkE,IAAwB,I;IAAxB,qBAAwB,OAAxB,kDAAwB,SAAQ,OAAR,CAAxB,6B;G;EAElE,8B;IAAwC,IAAwB,I;IpYV5D,UAAa,E;IoYUuB,qBAAwB,OAAxB,kDAAwB,SpYTrD,GoYSqD,CAAxB,6B;G;ECDxC,oD;IACM,IAAmB,I;IAAnB,qBAAmB,OAAnB,6CAAmB,SAAQ,WAAR,EAAqB,OAArB,EAA8B,MAA9B,CAAnB,6B;G;;ECGF,+B;ItYbA,UAAa,E;IsYaL,wBtYZD,GsYYC,C;G;EAEZ,mC;IACM,yB;ItYhBF,UAAa,E;IsYgBwC,OjY+DrD,CL9EO,GK8EP,C;IiY/DE,YtYfK,GsYeL,C;G;ECRN,gC;IAAsD,IAAoB,I;IAApB,qBAAoB,OAApB,8CAAoB,SAAQ,OAAR,CAApB,6B;G;EAEtD,0B;IAAgC,IAAoB,I;IvYVhD,UAAa,E;IuYUe,qBAAoB,OAApB,8CAAoB,SvYTzC,GuYSyC,CAApB,6B;G;ECHhC,+C;IACU,IAAuB,I;IAAvB,qBAAuB,OAAvB,iDAAuB,SAAQ,OAAR,EAAiB,UAAjB,CAAvB,6B;G;EAEV,8C;IACU,IAAuB,I;IAAvB,qBAAuB,OAAvB,iDAAuB,SAAQ,OAAR,EAAiB,UAAjB,CAAvB,6B;G;;ECEF,0C;IAAA,wB;MAAkD,gBAA7B,kBAAsB,KAAtB,C;MAAmC,apYkE5D,W;MoYlEyB,OpYmElB,SoYnE4D,I;IAAI,C;G;EAH3E,sC;IACuB,uB;MzYXnB,UAAa,E;MyYWM,UzYVZ,G;KyYYH,IACA,IADA,EADJ,M;IAAA,mCACI,wBADJ,EAEI,sDAFJ,uC;G;EAQI,4C;IAAA,wB;MAA6C,gBAAxB,kBAAiB,KAAjB,C;MAA8B,apY2DvD,W;MoY3DyB,OpY4DlB,SoY5DuD,I;IAAI,C;G;EAHtE,sC;IACkC,uB;MzYlB9B,UAAa,E;MyYkBiB,UzYjBvB,G;KyYmBH,IACA,IADA,EADJ,M;IAAA,mCACI,0BADJ,EAEI,sDAFJ,uC;G;;;ECdJ,gC;WAAA,qD;G;;;EACA,gC;WAAA,uD;G;ECCA,kC;IAAA,sC;G;EAC4E,mF;IAAA,6B;MACvD,Q;MAAb,aAAa,eAAQ,eAAR,CAAoB,gBAAS,aAA7B,qC;MAAb,OAEA,gBAAgB,gBAAhB,EAA8B,MAAO,CAAkB,UAAX,UAAW,CAAlB,CAArC,C;IACJ,C;G;sDAJA,6B;IAAwE,gE;G;;;;;;;EAD5E,8C;IAAA,6C;MAAA,4B;KAAA,sC;G;EAQA,0B;IAAA,8B;G;EAIe,wD;IAAA,6B;MAA4B,uBAAgB,gBAAhB,EAA8B,cAAO,CAAkB,UAAX,UAAW,CAAlB,CAArC,C;IAAqE,C;G;8CAH5G,6B;IACiB,gB;IAAA,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,4D;IAAA,mB;MAAmE,OAAO,I;KAAvF,aAAa,M;IAEb,OAAO,sC;EACX,C;EAQyC,uD;IAAA,2B;MACjC,OAAsD,UAAtD,aAAM,CAAO,gBAAgB,gBAAhB,EAA8B,QAA9B,CAAP,CAAgD,C;IAC1D,C;G;8CARJ,oC;IACI,IAAI,aAAJ,C;MACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,I;MACrC,M;KAGI,OAAR,CAAoB,QAAS,aAA7B,IAAqC,qC;EAGzC,C;;;;;;;EAhBJ,sC;IAAA,qC;MAAA,oB;KAAA,8B;G;EAmBA,mC;IAAA,uC;G;uDACI,6B;IACM,uBAAgB,gBAAhB,EAAsC,OAAR,CAAoB,QAAS,aAA7B,CAA9B,C;G;;;;;;;EAFV,+C;IAAA,8C;MAAA,6B;KAAA,uC;G;EAKA,2B;IAAA,+B;G;+CACI,6B;IACe,Q;IAAT,OAAI,YAAK,qBAAQ,OAAR,CAAoB,QAAS,aAA7B,2BAAL,CtZmoNH,YAAQ,CsZnoNT,GACI,IADJ,GAGI,gBAAgB,gBAAhB,EAAsC,OAAR,CAAoB,QAAS,aAA7B,CAA9B,C;G;+CAEV,oC;IACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;EATJ,uC;IAAA,sC;MAAA,qB;KAAA,+B;G;EAYA,8B;I3YnDI,UAAa,E;I6XmJG,Q;IAAA,Oc/FhB,sBnZmToF,QAAQ,W;IqYpN5F,OAAgB,cAAhB,C;MAAgB,yB;Mc/FQ,Ud+FK,OrYuImC,I;MmZtOnC,Yd+FA,OrYoJmC,M;MmZlP5D,IAAI,gCAAJ,C;Q3YpDG,G2YqDC,CAAK,GAAL,IAAkB,UAAN,KAAM,C;;Q3YrDnB,G2YuDC,CAAK,GAAL,IAAY,K;;;IALsB,O3YlDnC,G;G;E2YoEiB,6E;IAAA,4B;MAAE,gBAAgB,SAAhB,EAAsB,iBAAS,WAAT,CAAtB,C;MAAqC,W;IAAA,C;G;EANnE,+C;IAEa,Q;IrZqiDO,U;IAAA,SqZriDU,OAAtB,YAAK,uDAAL,CAAsB,CrZqiDV,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MqZpiDF,0B;MAAA,kBrZoiDe,OqZpiDf,C;MACF,+B;QAAa,gBAAW,uB;QAAX,YAA+B,0BrZmiD3B,OqZniD2B,qC;QnZyKxD,sBF03C6B,OE13C7B,EAAS,KAAT,C;amZxKY,4B;QAAa,kBAAW,uB;QAAX,cAAyD,OAAzB,kCrZkiD5B,OqZliD4B,wBAAyB,C;QnZwKlF,wBF03C6B,OE13C7B,EAAS,OAAT,C;;QmZ5KE,UAKkB,gBrZiiDS,OqZjiDT,EAAI,+CrZiiDK,OqZjiDL,CAAJ,C;;IALlB,iB;G;;;EC1DN,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;;;EACA,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;;;ECmBA,kC;WAAA,yD;G;;;EACA,gC;WAAA,qD;G;EACA,kC;IAAqB,oB;MAAA,OAAY,C;IAAM,Q;IAAD,OAAgC,OAAhC,CAAC,oEAAD,EAA0B,IAA1B,CAAgC,C;G;EACtE,wD;IAAqB,mB;MAAA,MAAW,C;IAAG,qB;MAAA,QAAa,C;IAAG,sB;MAAA,SAAc,C;IAAG,oB;MAAA,OAAY,C;IAC3E,Q;IAAD,QAAC,oEAAD,EAA4C,GAA5C,EAAiD,KAAjD,EAAwD,MAAxD,EAAgE,IAAhE,C;G;;;ECNJ,oC;WAAA,6D;G;EAAA,6C;IAAA,wE;G;;;EACA,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;EAEA,0C;IAGe,Q;IAFX,mBAA8B,MAAX,UAAW,C;IAEnB,U;IAAA,8C;MAAA,a;;MlZnB4C,YAAa,QkZmBxC,ElZnBwC,C;MAIvD,U;MAAA,SAAA,KAAM,OAAN,GAAa,CAAb,I;MAAb,aAAU,CAAV,mB;QACI,MAAM,CAAN,IkZc8B,oBAAW,K;;MAAlC,SAAyC,OlZZ7C,KkZY6C,C;;IAAU,wB;IxZwzCvD,kBAAa,eAAa,qCAAwB,EAAxB,CAAb,C;IAgCP,oB;IADb,YAAY,C;IACC,+B;IAAb,OAAa,gBAAb,C;MAAa,wB;MwZv1CT,U;MxZw1CA,WAAY,WwZx1CZ,iCxZw1C0B,oBAAmB,gBAAnB,EAAmB,wBAAnB,YwZx1C1B,sBxZw1CuD,IAA3C,C;;IwZz1ChB,uBxZ01CO,WwZ11CP,C;EAGJ,C;EAEA,uC;IAAuF,Q;IAAA,U;IAAA,2C;MAAA,a;;M9YnCnF,UAAa,E;M8YmCsE,S9YlC5E,G;;I8YkCyG,wB;IAAM,KzY4CtH,a;IyY5CoE,wBzY6C7D,W;EyY7CsH,C;EACjI,kC;IAAwE,Q;IAAA,U;IAAA,sC;MAAA,a;;M9YpCpE,UAAa,E;M8YoCuD,S9YnC7D,G;;I8YmCqF,wB;IAAM,KzY2ClG,a;IyY3C0D,mBzY4CnD,W;EyY5CkG,C;EAC7G,mC;IAA2E,Q;IAAA,U;IAAA,uC;MAAA,a;;M9YrCvE,UAAa,E;M8YqC0D,S9YpChE,G;;I8YoCyF,wB;IAAM,KzY0CtG,a;IyY1C4D,oBzY2CrD,W;EyY3CsG,C;EACjH,wC;IAAoF,Q;IAAA,U;IAAA,0C;MAAA,a;;M9YtChF,UAAa,E;M8YsCmE,S9YrCzE,G;;I8YqCqG,wB;IAAM,KzYyClH,a;IyYzCkE,uBzY0C3D,W;EyY1CkH,C;EAC7H,iC;IAAqE,Q;IAAA,U;IAAA,qC;MAAA,a;;M9YvCjE,UAAa,E;M8YuCoD,S9YtC1D,G;;I8YsCiF,wB;IAAM,KzYwC9F,a;IyYxCwD,kBzYyCjD,W;EyYzC8F,C;EACzG,uC;IAAuF,Q;IAAA,U;IAAA,2C;MAAA,a;;M9YxCnF,UAAa,E;M8YwCsE,S9YvC5E,G;;I8YuCyG,wB;IAAM,KzYuCtH,a;IyYvCoE,wBzYwC7D,W;EyYxCsH,C;EACjI,kC;IAAwE,Q;IAAA,U;IAAA,sC;MAAA,a;;M9YzCpE,UAAa,E;M8YyCuD,S9YxC7D,G;;I8YwCqF,wB;IAAM,KzYsClG,a;IyYtC0D,mBzYuCnD,W;EyYvCkG,C;;;ECrC7G,8B;WAAA,iD;G;;;EACA,8B;WAAA,iD;G;ECAA,+B;IAA0D,Q;IAAN,iBAAM,yBAAY,GAAI,gBAAhB,mCAAN,C;G;ECLjC,0C;IADnB,e;IACoB,8B;IADpB,iB;IAAA,uB;G;EAAA,+B;IAAA,kC;K;IAEI,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,GAAL,C;IACA,iDAAK,MAAL,C;IACA,kDAAK,MAAL,C;IACA,kDAAK,MAAL,C;IACA,kDAAK,MAAL,C;G;;EAZA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;EACA,qC;IAAA,qB;IAAA,6B;G;;;;;;EAdJ,2B;IAAA,gY;G;;EAAA,gC;IAAA,a;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,QAAA,uE;;G;;ECoBI,6B;IAA4B,Q;IAApB,OAAY,oBAAQ,yBAAY,MAAZ,mCAAR,C;G;;;EAExB,gC;WAAA,uD;G;EAGY,0D;IAAA,wB;MACG,Q;MAAP,iBAA0D,CAAnD,oCAAY,iBAAZ,qCAAmD,EAAO,KAAM,WAAb,CAA1D,C;IACJ,C;G;EAFA,wC;IAAQ,4C;G;;;ECpBZ,8B;WAAA,iD;G;;;EACA,6B;WAAA,+C;G;;;EACA,6B;WAAA,+C;G;;;EACA,qC;WAAA,+D;G;ECRA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAEI,wD;IACA,sD;G;;EADA,yC;IAAA,wB;IAAA,iC;G;;EACA,wC;IAAA,wB;IAAA,gC;G;;;;;;EAHJ,8B;IAAA,wE;G;;EAAA,mC;IAAA,a;MAAA,a;QAAA,sC;MAAA,Y;QAAA,qC;MAAA,QAAA,0E;;G;;;;ECKA,+B;WAAA,mD;G;;;EACA,8B;WAAA,iD;G;;;EACA,qC;WAAA,+D;G;;;EACA,iC;WAAA,uD;G;;;EACA,iC;WAAA,uD;G;;;EACA,2C;WAAA,2E;G;;;ECLA,gC;WAAA,uD;G;;;EACA,8B;WAAA,mD;G;;;ECDA,gC;WAAA,qD;G;;;EACA,kC;WAAA,yD;G;;;EACA,gC;WAAA,qD;G;;;EACA,6B;WAAA,+C;G;;;ECHA,8B;WAAA,iD;G;EAAA,uC;IAAA,0D;G;;;EACA,gC;WAAA,qD;G;EAAA,qC;IAAA,4D;G;ECCA,+B;IAAoD,gB;IAAD,QAAC,2BAAY,GAAI,gBAAhB,0DAAD,YAA6C,iBAA7C,O;G;EAEnD,sC;IACI,UAAY,GAAI,gBAAhB,IAA2B,KAAM,W;EACrC,C;;;ECNA,gC;WAAA,qD;G;EAAA,qC;IAAA,4D;G;;;EACA,+B;WAAA,mD;G;EAAA,mC;IAAA,yD;G;;;EACA,+B;WAAA,mD;G;EAAA,mC;IAAA,yD;G;;;EACA,uC;WAAA,mE;G;EAAA,mD;IAAA,iF;G;ECaI,+B;IAAS,gB;IAAD,QAAC,2BAAY,MAAZ,0DAAD,YAAoD,2BAApD,O;G;EACR,oC;IAAa,UAAY,MAAZ,IAA4B,SAAN,KAAM,C;EAAW,C;;;EAExD,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;EAGY,4D;IAAA,wB;MACG,Q;MAAP,iBAA0D,CAAnD,oCAAY,iBAAZ,qCAAmD,EAAO,KAAM,WAAb,CAA1D,C;IACJ,C;G;EAEqC,mD;IAAA,wB;MAC7B,Q;MAAA,qDAAc,UAAM,KAAN,CAAd,0C;IACJ,C;G;EANJ,0C;IAAQ,8C;G;EAGR,+C;IACI,UAAY,iBAAZ,IAAiC,iC;EAGrC,C;EAEJ,kC;IAA6E,Q;IAAA,U;IAAA,sC;MAAA,a;;M3ZnCzE,UAAa,E;M2ZmC4D,S3ZlClE,G;;I2ZkC0F,wB;IAAM,KtZ4CvG,a;IsZ5C+D,mBtZ6CxD,W;EsZ7CuG,C;EAClH,qC;IAA+E,Q;IAAA,U;IAAA,uC;MAAA,a;;M3ZpC3E,UAAa,E;M2ZoC8D,S3ZnCpE,G;;I2ZmC6F,wB;IAAM,KtZ2C1G,a;IsZ3CgE,oBtZ4CzD,W;EsZ5C0G,C;EACrH,uC;IAAmF,Q;IAAA,U;IAAA,yC;MAAA,a;;M3ZrC/E,UAAa,E;M2ZqCkE,S3ZpCxE,G;;I2ZoCmG,wB;IAAM,KtZ0ChH,a;IsZ1CkE,sBtZ2C3D,W;EsZ3CgH,C;EAC3H,iC;IAA2E,Q;IAAA,U;IAAA,qC;MAAA,a;;M3ZtCvE,UAAa,E;M2ZsC0D,S3ZrChE,G;;I2ZqCuF,wB;IAAM,KtZyCpG,a;IsZzC8D,kBtZ0CvD,W;EsZ1CoG,C;EAC/G,gC;IAAuE,Q;IAAA,U;IAAA,oC;MAAA,a;;M3ZvCnE,UAAa,E;M2ZuCsD,S3ZtC5D,G;;I2ZsCkF,wB;IAAM,KtZwC/F,a;IsZxC2D,iBtZyCpD,W;EsZzC+F,C;EAC1G,gC;IAAqE,Q;IAAA,U;IAAA,oC;MAAA,a;;M3ZxCjE,UAAa,E;M2ZwCoD,S3ZvC1D,G;;I2ZuCgF,wB;IAAM,KtZuC7F,a;IsZvCyD,iBtZwClD,W;EsZxC6F,C;EACxG,kC;IAA2E,Q;IAAA,U;IAAA,sC;MAAA,a;;M3ZzCvE,UAAa,E;M2ZyC0D,S3ZxChE,G;;I2ZwCwF,wB;IAAM,KtZsCrG,a;IsZtC6D,mBtZuCtD,W;EsZvCqG,C;EAChH,sC;IAAuF,Q;IAAA,U;IAAA,0C;MAAA,a;;M3Z1CnF,UAAa,E;M2Z0CsE,S3ZzC5E,G;;I2ZyCwG,wB;IAAM,KtZqCrH,a;IsZrCqE,uBtZsC9D,W;EsZtCqH,C;;;ECtChI,iC;WAAA,uD;G;EAAA,uC;IAAA,+D;G;;;EACA,gC;WAAA,qD;G;EAAA,qC;IAAA,4D;G;;;EACA,uC;WAAA,mE;G;EAAA,mD;IAAA,iF;G;;;EACA,mC;WAAA,2D;G;EAAA,2C;IAAA,qE;G;;;EACA,mC;WAAA,2D;G;EAAA,2C;IAAA,qE;G;;;EACA,6C;WAAA,+E;G;EAAA,+D;IAAA,mG;G;;;ECLA,kC;WAAA,yD;G;EAAA,2C;IAAA,oE;G;;;EACA,gC;WAAA,qD;G;EAAA,qC;IAAA,4D;G;;;ECDA,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;;;EACA,oC;WAAA,6D;G;EAAA,6C;IAAA,wE;G;;;EACA,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;;;EACA,+B;WAAA,mD;G;EAAA,mC;IAAA,yD;G;;;;ECGA,mC;IAAA,uC;G;uDACI,6B;IACkB,Q;IAAd,cAAc,sBAAQ,OAAR,CAAoB,QAAS,aAA7B,sB;I1a0mSX,kBAAM,e0axmSF,O1awmSe,OAAb,C;IA6UA,U;gBAAb,4B0ar7SW,O1aq7SX,kB;MAAa,W0ar7SF,O1aq7SX,Q;mBACI,W;MAAgB,oB;;Q0ar7SZ,IAAI,O1aq7SkB,I0ar7SlB,EAAU,MAAV,CAAJ,C;UACI,mBAAW,oBAAW,K;UAAtB,qB;SAGS,gBAAb,gB;QCyjCQ,U;QAAA,SnajkCwB,WkaS5B,mBlaT4B,CkaSE,iB1ag7SZ,I0ah7SY,CCwjC1B,W;QAAhB,OAAgB,gBAAhB,C;UAAgB,2B;UDvjCA,eAA6B,MCujChB,ODvjCU,MAAM,GAAM,GAAN,E;U1ZyEvC,S0ZvEU,kBAAc,cACV,KADU,EAEV,oBAAgB,qBAAS,CAAT,CAAhB,CAFU,EAGV,oBAAgB,qBAAS,CAAT,CAAhB,CAHU,EAIV,oBAAgB,qBAAS,CAAT,CAAhB,CAJU,EAKV,oBAAgB,qBAAS,CAAT,CAAhB,CALU,EAMV,UAAM,qBAAS,CAAT,CAAN,CANU,CAAd,C;;QARR,mB1ZgFD,S;;;MhBq2SS,YAAZ,WAAY,mB;;I0at7SZ,O1au7SG,W;E0an6SP,C;;;;;;;EAxBJ,+C;IAAA,8C;MAAA,6B;KAAA,uC;G;EA2BA,2B;IAAA,+B;G;+CACI,6B;IACI,Q;IAAA,aAAQ,OAAR,CAAoB,QAAS,aAA7B,gE;MAAwD,OAAO,I;IAE/D,OAAO,qCAAwB,kBAAS,OAAT,EAAkB,QAAlB,C;EACnC,C;+CAEA,oC;IACyC,Q;IAAA,U;IAAA,kB;Mza+xClC,kBAAM,eAAa,wBya/xCe,Kza+xCf,EAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,Syap2C4B,Kzao2C5B,W;MAAb,OAAa,gBAAb,C;QAAa,wB;QACT,WAAY,WAAc,eAAd,C;;Myar2CyB,Szas2ClC,W;;Myat2CkC,a;IAAA,U;cAAA,a,YxajCyB,iB;IwaiCtD,OAAR,CAAoB,QAAS,aAA7B,U;EACJ,C;;;;;;;EATJ,uC;IAAA,sC;MAAA,qB;KAAA,+B;G;EElC2B,kD;IAGvB,qB;MjaNA,UAAa,E;MiaMb,QjaLO,G;KiaMP,wB;IAHA,gB;IACA,kB;IACA,oB;IAGU,YAAN,CAAkB,OAAlB,IAA6B,U;G;iDAGjC,mB;IACU,QAAN,YAAM,C;EACV,C;0CAEA,Y;IAAe,kCAAc,SAAd,EAAoB,YAApB,S1aJmD,Y0aIvB,c1aJuB,C0aInD,E;G;uEAGX,qB;IAAQ,OAAyC,YAAN,CAAkB,yBAAlB,C;G;uEAC3C,4B;IAAmB,YAAN,CAAkB,yBAAlB,IAA+C,K;EAAM,C;2DAElE,qB;IAAQ,OAAyC,YAAN,CAAkB,aAAlB,C;G;2DAC3C,4B;IAAmB,YAAN,CAAkB,aAAlB,IAAmC,K;EAAM,C;6DAEtD,qB;IAAQ,OAAyC,YAAN,CAAkB,eAAlB,C;G;6DAC3C,4B;IAAmB,YAAN,CAAkB,eAAlB,IAAqC,K;EAAM,C;;;;;;;ECfhE,gD;IACgE,kBAApD,yBAAqB,sBAArB,EAA6C,KAA7C,C;IAA0D,K7ZmElE,a;I6ZnEE,+B7ZoEK,W6ZpEkE,SAAvE,C;G;;;ECTN,kC;WAAA,yD;G;;;EACA,gC;WAAA,qD;G;;;EACA,+B;WAAA,mD;G;;;EACA,8B;WAAA,iD;G;;;ECCA,+B;WAAA,mD;G;EAEA,4D;IAAuB,oB;MAAA,OAAe,K;IAAO,wB;MAAA,WAAoB,I;IAAM,sB;MAAA,SAAkB,I;IAAM,qB;MAAA,QAAiB,I;IAC1G,OAAA,qBAAO,CAAO,OAAO,IAAP,CAAP,EAAqB,QAArB,EAA+B,MAA/B,EAAuC,KAAvC,C;G;EAEb,6D;IAAuB,qB;MAAA,QAAsB,OAAO,KAAP,C;IAAe,wB;MAAA,WAAoB,I;IAAM,sB;MAAA,SAAkB,I;IAAM,qB;MAAA,QAAiB,I;IACzH,OAAA,qBAAO,CAAO,KAAP,EAAc,QAAd,EAAwB,MAAxB,EAAgC,KAAhC,C;G;ECLb,6C;IAAA,iD;G;EAIe,2E;IAAA,iD;MraZX,UAAa,E;MqacD,qB;QrabL,GqaaqB,CAAK,UAAL,Y;OAChB,mB;QradL,GqacmB,CAAK,QAAL,IAAoB,iB;OAClC,kB;QrafL,GqaekB,CAAK,OAAL,S;OAHjB,craZD,G;MqakBC,SAA+C,MAAtC,e9aPiD,Y8aO1C,K9aP0C,C8aOjD,EAA6B,OAA7B,CAAsC,GAAM,GAAN,E;MAEjC,gBAAd,iB;M/ailDQ,Q;MAAA,oB;kBAAhB,OAAgB,cAAhB,C;QAAgB,yB;;U+a/kDoD,kE;UAApD,uBAAsB,UAA8B,SxaZ5B,WwaYF,gBxaZE,CwaY4B,c/a+kDvC,O+a/kDuC,CAA9B,+BAAtB,YAA6E,gBAAQ,GAAR,EAAa,EAAb,CAA7E,O;UACA,uBAAsB,UAAwB,SxabtB,WwaaF,UxabE,CwaasB,c/a8kDjC,O+a9kDiC,CAAxB,+BAAtB,YAAoE,SAAQ,gBAAQ,GAAR,EAAa,EAAb,CAAR,CAApE,O;UACA,qBAAoB,UAAoC,SxadhC,WwacJ,uBxadI,CwacgC,c/a6kD3C,O+a7kD2C,CAApC,+BAApB,qC;UACA,oBAAmB,UAAwB,SxafnB,WwaeL,UxafK,CwaemB,c/a4kD9B,O+a5kD8B,CAAxB,+BAAnB,YAAiE,SAAQ,gBAAQ,GAAR,EAAa,EAAb,CAAR,CAAjE,O;UAEA,4B;YAAmB,kB;UACnB,4B;YAAmB,kB;UACnB,0B;YAAiB,kB;UACjB,yB;YAAgB,kB;Uha+D1B,Sga7DU,kBAAe,eAAW,eAAX,EAA4B,eAA5B,EAA6C,aAA7C,EAA4D,YAA5D,CAAf,C;;;;MApBR,OhakFD,S;Iga3DH,C;G;iEA3BJ,6B;IACiB,Q;IAAb,aAAa,eAAQ,OAAR,CAAoB,QAAS,aAA7B,qC;IAEb,OAAO,yD;EAyBX,C;;;;;;;EA7BJ,yD;IAAA,wD;MAAA,uC;KAAA,iD;G;EAgCA,qC;IAAA,yC;G;yDACI,6B;IACI,Q;IAAA,aAAQ,OAAR,CAAoB,QAAS,aAA7B,sE;MAA+E,OAAO,I;IAEtF,OAAO,+CAAkC,kBAAS,OAAT,EAAkB,QAAlB,C;EAC7C,C;EAQyC,kE;IAAA,iC;MAEvB,UACN,MADM,EACN,MADM,EAEL,MAFK,EAEL,MAFK,EAEN,MAFM,EAGN,MAHM,EAGN,M;MAHM,cAAN,KAAM,C;MACN,2BAAQ,UAAR,2D;MACA,UAAC,2BAAQ,QAAR,8DAAD,YAAsC,kBAAtC,O;MACA,2BAAQ,OAAR,2D;MAJJ,aAAa,aAAM,8B;MAAnB,OAOA,MAAO,W;IACX,C;G;yDAfJ,oC;IACI,IAAI,aAAJ,C;MACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,I;MACrC,M;KAGI,OAAR,CAAoB,QAAS,aAA7B,IAAqC,gD;EAUzC,C;;;;;;;EAvBJ,iD;IAAA,gD;MAAA,+B;KAAA,yC;G;EA0BA,kC;IAAA,sC;G;sDACI,6B;IACiB,Q;IAAP,kBAAO,eAAQ,OAAR,CAAoB,QAAS,aAA7B,mCAAP,C;G;;;;;;;EAFd,8C;IAAA,6C;MAAA,4B;KAAA,sC;G;EAKA,0B;IAAA,8B;G;8CACI,6B;IACW,gB;IAAD,QAAC,iBAAQ,OAAR,CAAoB,QAAS,aAA7B,0DAAD,YAAuD,kBAAvD,O;G;8CAEV,oC;IACY,OAAR,CAAoB,QAAS,aAA7B,IAAqC,uC;EACzC,C;;;;;;;EANJ,sC;IAAA,qC;MAAA,oB;KAAA,8B;G;;;ECnEA,oC;WAAA,6D;G;EAAA,6C;IAAA,wE;G;;;EACA,kC;WAAA,yD;G;EAAA,yC;IAAA,kE;G;;;EACA,iC;WAAA,uD;G;EAAA,uC;IAAA,+D;G;;;EACA,gC;WAAA,qD;G;EAAA,qC;IAAA,4D;G;;;ECGA,iC;WAAA,uD;G;EAAA,uC;IAAA,+D;G;EAEA,4D;IAA8B,oB;MAAA,OAAe,K;IAAO,wB;MAAA,WAAoB,I;IAAM,sB;MAAA,SAAkB,I;IAAM,qB;MAAA,QAAiB,I;IAC7G,Q;IAAA,uDAAe,OAAO,IAAP,CAAf,EAA6B,QAA7B,EAAuC,MAAvC,EAA+C,KAA/C,Q;G;EAEV,6D;IAA8B,qB;MAAA,QAAsB,OAAO,KAAP,C;IAAe,wB;MAAA,WAAoB,I;IAAM,sB;MAAA,SAAkB,I;IAAM,qB;MAAA,QAAiB,I;IAC5H,Q;IAAA,uDAAe,KAAf,EAAsB,QAAtB,EAAgC,MAAhC,EAAwC,KAAxC,Q;G;EAEV,kC;IAA2E,Q;IAAA,U;IAAA,sC;MAAA,a;;MvalBvE,UAAa,E;MuakB0D,SvajBhE,G;;IuaiBwF,wB;IAAM,Kla6DrG,a;Ika7D6D,mBla8DtD,W;Eka9DqG,C;EAChH,oC;IAAiF,Q;IAAA,U;IAAA,wC;MAAA,a;;MvanB7E,UAAa,E;MuamBgE,SvalBtE,G;;IuakBgG,wB;IAAM,Kla4D7G,a;Ika5DiE,qBla6D1D,W;Eka7D6G,C;;;ECXxH,iC;WAAA,uD;G;;;EACA,wC;WAAA,qE;G;;;EACA,0C;WAAA,yE;G;;;EACA,yC;WAAA,uE;G;;;ECJA,mC;WAAA,2D;G;;;EACA,mC;WAAA,2D;G;;;EACA,8B;WAAA,iD;G;;;EACA,sC;WAAA,iE;G;;;EACA,mC;WAAA,2D;G;;;EACA,sC;WAAA,iE;G;EAEA,wC;IAIU,UACA,MADA,EAEA,M;IALN,0BAAa,KAAM,WAAnB,C;IACA,wBAAiB,eAAN,KAAM,CAAjB,C;IACA,0BAAmB,eAAN,KAAM,CAAnB,C;IACA,KAAM,yBAAN,KAAM,CAAN,U;MAA2B,kC;KAC3B,KAAM,wBAAN,KAAM,CAAN,U;MAAwB,0BAAgB,cAAhB,C;KACxB,KAAM,2BAAN,KAAM,CAAN,U;MAA2B,oC;KAC/B,C;;;ECZA,mC;WAAA,2D;G;EAAA,6C;IAAA,qE;G;;;EACA,0C;WAAA,yE;G;EAAA,yD;IAAA,0F;G;;;EACA,4C;WAAA,6E;G;EAAA,6D;IAAA,gG;G;;;EACA,2C;WAAA,2E;G;EAAA,2D;IAAA,6F;G;ECMA,8B;IAA2E,Q;IAAA,U;IAAA,kC;MAAA,a;;M3alBvE,UAAa,E;M2akB0D,S3ajBhE,G;;I2aiBoF,wB;IAAM,Kta6DjG,a;Isa7DiE,eta8D1D,W;Esa9DiG,C;EAC5G,8B;IAA2E,Q;IAAA,U;IAAA,kC;MAAA,a;;M3anBvE,UAAa,E;M2amB0D,S3alBhE,G;;I2akBoF,wB;IAAM,Kta4DjG,a;Isa5DiE,eta6D1D,W;Esa7DiG,C;EAC5G,8B;IAA2E,Q;IAAA,U;IAAA,kC;MAAA,a;;M3apBvE,UAAa,E;M2aoB0D,S3anBhE,G;;I2amBoF,wB;IAAM,Kta2DjG,a;Isa3DiE,eta4D1D,W;Esa5DiG,C;EAC5G,8B;IAA2E,Q;IAAA,U;IAAA,kC;MAAA,a;;M3arBvE,UAAa,E;M2aqB0D,S3apBhE,G;;I2aoBoF,wB;IAAM,Kta0DjG,a;Isa1DiE,eta2D1D,W;Esa3DiG,C;EAC5G,8B;IAA2E,Q;IAAA,U;IAAA,kC;MAAA,a;;M3atBvE,UAAa,E;M2asB0D,S3arBhE,G;;I2aqBoF,wB;IAAM,KtayDjG,a;IsazDiE,eta0D1D,W;Esa1DiG,C;EAC5G,8B;IAA2E,Q;IAAA,U;IAAA,kC;MAAA,a;;M3avBvE,UAAa,E;M2auB0D,S3atBhE,G;;I2asBoF,wB;IAAM,KtawDjG,a;IsaxDiE,etayD1D,W;EsazDiG,C;EAC5G,qC;IAAyF,Q;IAAA,U;IAAA,yC;MAAA,a;;M3axBrF,UAAa,E;M2awBwE,S3avB9E,G;;I2auByG,wB;IAAM,KtauDtH,a;IsavDwE,sBtawDjE,W;EsaxDsH,C;EACjI,qC;IAAyF,Q;IAAA,U;IAAA,yC;MAAA,a;;M3azBrF,UAAa,E;M2ayBwE,S3axB9E,G;;I2awByG,wB;IAAM,KtasDtH,a;IsatDwE,sBtauDjE,W;EsavDsH,C;EACjI,iC;IAAiF,Q;IAAA,U;IAAA,qC;MAAA,a;;M3a1B7E,UAAa,E;M2a0BgE,S3azBtE,G;;I2ayB6F,wB;IAAM,KtaqD1G,a;IsarDoE,kBtasD7D,W;EsatD0G,C;EACrH,iC;IAAiF,Q;IAAA,U;IAAA,qC;MAAA,a;;M3a3B7E,UAAa,E;M2a2BgE,S3a1BtE,G;;I2a0B6F,wB;IAAM,KtaoD1G,a;IsapDoE,kBtaqD7D,W;EsarD0G,C;EACrH,mC;IAAqF,Q;IAAA,U;IAAA,uC;MAAA,a;;M3a5BjF,UAAa,E;M2a4BoE,S3a3B1E,G;;I2a2BmG,wB;IAAM,KtamDhH,a;IsanDsE,oBtaoD/D,W;EsapDgH,C;EAC3H,oC;IAAmF,Q;IAAA,U;IAAA,sC;MAAA,a;;M3a7B/E,UAAa,E;M2a6BkE,S3a5BxE,G;;I2a4BgG,wB;IAAM,KtakD7G,a;IsalDqE,mBtamD9D,W;EsanD6G,C;EACxH,oC;IAAuF,Q;IAAA,U;IAAA,wC;MAAA,a;;M3a9BnF,UAAa,E;M2a8BsE,S3a7B5E,G;;I2a6BsG,wB;IAAM,KtaiDnH,a;IsajDuE,qBtakDhE,W;EsalDmH,C;;;EClB9H,mC;WAAA,2D;G;EAAA,6C;IAAA,qE;G;;;EACA,qC;WAAA,+D;G;EAAA,iD;IAAA,2E;G;;;EACA,gC;WAAA,qD;G;EAAA,qC;IAAA,4D;G;;;EACA,wC;WAAA,qE;G;EAAA,uD;IAAA,oF;G;;;EACA,qC;WAAA,+D;G;EAAA,iD;IAAA,2E;G;;;EACA,wC;WAAA,qE;G;EAAA,uD;IAAA,oF;G;E9a6DyC,gE;IAAA,4B;MAAE,0BAAO,aAAP,C;MAAc,W;K;G;EAA5C,0C;IAAA,wB;MAAc,qBAAc,8CAAd,C;K;G;;E+a/DvB,6C;IAAA,wB;MAA6C,gBAAxB,kBAAiB,KAAjB,C;MAA8B,gBxagEnD,W;MwahEqB,OxaiEd,SwajEsD,I;IAAI,C;G;EALrE,mD;IAGI,yB;MAAA,YAAqB,I;IACV,qB;I7adX,UAAa,E;IACN,G6aeF,CAAK,WAAL,a;IAFM,YACX,2BADW,E7abJ,G6aaI,EAGb,MAHa,C;G;EAKf,kD;IAGI,yB;MAAA,YAAqB,K;IACV,oBAAiB,OAAN,KAAM,CAAjB,EAA6C,QAA7C,EAAmE,SAAnE,C;G;EAEf,gE;IAGI,yB;MAAA,YAAqB,K;I/akDZ,Q;IAAT,SAAS,sC+ahDoC,M/agDpC,8B;IACT,iB+ajDgC,W;IAArB,oB/akDJ,E+alDI,EAA2C,QAA3C,EAAiE,SAAjE,C;G;EAEf,yE;IAMI,yB;MAAA,YAAqB,K;IAGrB,aAAa,aAAW,KAAX,EAAkB,QAAlB,EAAwC,SAAxC,C;IAEb,OAAO,iCAAO,OAAP,C;EACX,C;EAEA,gF;IAOI,yB;MAAA,YAAqB,K;I/ayBZ,Q;IAAT,SAAS,sC+avBoC,M/auBpC,8B;IACT,iB+axBgC,W;IAArB,oB/ayBJ,E+azBI,EAA2C,QAA3C,EAAiE,SAAjoBzavCoC,gCAAa,Q;oBMKb,gCAAa,Q;sBGNT,kCAAe,Q;mBGQrB,+BAAY,Q;8BKPU,0CAAuB,Q;oCEIX,gDAA6B,Q;oBEO7D,gCAAa,Q;wBOAL,oCAAiB,Q;yBIdf,gDAAkB,Q;yBEWlB,qCAAkB,Q;kBIThC,8BAAW,Q;4BEFS,wCAAqB,Q;yBEF3B,qCAAkB,Q;yBGElB,qCAAkB,Q;wBEUpB,oCAAiB,Q;uBGNnB,mCAAgB,Q;sBGJlB,kCAAe,Q;kBIYvB,8BAAW,Q;8BKPa,0CAAuB,Q;+BKJrB,2CAAwB,Q;oBIK1C,qC;sBAGA,kCAAe,Q;yBEXT,qCAAkB,Q;oBEU5B,gCAAa,Q;2BKTA,uCAAoB,Q;2BGFnB,uCAAoB,Q;+BEGZ,2CAAwB,Q;yBEDpC,qCAAkB,Q;qBEK1B,iCAAc,Q;oBIQhB,gCAAa,Q;4BMHG,wCAAqB,Q;mCGbP,+CAA4B,Q;mCEC7B,+CAA4B,Q;mCGS3B,+CAA4B,Q;iBIDhE,6BAAU,Q;kBERR,8BAAW,Q;yBGEG,qCAAkB,Q;yBKQlB,qCAAkB,Q;8BIAR,0CAAuB,Q;uBGRrC,mCAAgB,Q;4BKSN,wCAAqB,Q;uBGF/B,mCAAgB,Q;kBQS1B,8BAAW,Q;sBEVH,kCAAe,Q;0BGFN,sCAAmB,Q;6BKDb,yCAAsB,Q;kBED7C,8BAAW,Q;oBISP,gCAAa,Q;kBKPjB,8BAAW,Q;wBGDC,oCAAiB,Q;mBGH3B,+BAAY,Q;4BKMM,wCAAqB,Q;uBIkB/B,mCAAgB,Q;wBKlBd,oCAAiB,Q;4BMHT,wCAAqB,Q;kBIEzC,8BAAW,Q;kBGCX,8BAAW,Q;sBKSH,kCAAe,Q;4BGjBH,wCAAqB,Q;0BEAzB,sCAAmB,Q;qCEAG,iDAA8B,Q;0BGQpD,sCAAmB,Q;2BIAjB,uCAAoB,Q;kBGDtC,8BAAW,Q;sBGFH,kCAAe,Q;sBEDf,kCAAe,Q;2BISL,uCAAoB,Q;mBGKpC,+BAAY,Q;0BIfE,sCAAmB,Q;mBEAjC,+BAAY,Q;2BGDI,uCAAoB,Q;mBGIpC,+BAAY,Q;qBMyCR,iCAAc,Q;oBGrChB,gCAAa,Q;oBEPb,gCAAa,Q;mBIDf,+BAAY,Q;wBECF,oCAAiB,Q;qBEJvB,iCAAc,Q;oBIkBhB,gCAAa,Q;mBIbf,+BAAY,Q;sBKyBN,kCAAe,Q;6BGtBD,yCAAsB,Q;kBIG5C,8BAAW,Q;wBGEC,oCAAiB,Q;2BGLX,uCAAoB,Q;yBGI3B,qCAAkB,Q;sBGLrB,kCAAe,Q;uBGQb,mCAAgB,Q;qBGJpB,iCAAc,Q;cKA7B,2B;qBAGe,iCAAc,Q;6BEFE,yCAAsB,Q;oBITxC,gCAAa,Q;iBISnB,6BAAU,Q;mBGNN,+BAAY,Q;uBEFJ,mCAAgB,Q;uBQQhB,mCAAgB,Q;yBERZ,qCAAkB,Q;uBEApB,mCAAgB,Q;6BGuBN,yCAAsB,Q;sBGnBpC,kCAAe,Q;4BGCH,wCAAqB,Q;kBSkBzC,8BAAW,Q;wBEJA,mCAAiB,Q;qBIjBtB,iCAAc,Q;qBIsBd,iCAAc,Q;wBOGR,oCAAiB,Q;kBE1B7B,8BAAW,Q;OURjB,8C;SACE,8C;YAQU,qD;SAIV,8C;UAIC,8C;SGZK,sC;WACE,sC;cAwBU,6C;WAOV,sC;YAQC,sC;mBG1CU,+CAAqB,Q;eGDb,2CAAiB,Q;YCHxD,oC;cACG,qC;cEAK,4B;cACG,6B;cCmBL,uC;YACK,qC;gBCHG,+B;cACK,6B;UCrBjB,mC;UACA,mC;cGgBH,mC;UCjBG,mC;SACD,mC;SACA,mC;iBACQ,mC;WEHR,mC;UACD,mC;iBACO,mC;aACJ,mC;aACA,mC;uBACU,mC;cCLP,mC;YACF,mC;YCDJ,mC;cACE,mC;YACF,mC;SACH,mC;UCHa,2B;YACA,2B;YEDA,2B;WACD,2B;WACA,2B;mBACQ,2B;cCgBV,2B;aCnBE,2B;YACD,2B;mBACO,2B;eACJ,2B;eACA,2B;yBACU,2B;cCLP,2B;YACF,2B;cCDJ,2B;gBACE,2B;cACF,2B;WACH,2B;wBCFY,+B;iBACP,e;wBAE/B,+I;2BGCuD,gCAAa,c;cCN9C,oC;YACF,oC;WACD,oC;UACD,oC;WCC0B,+C;gBEHd,4B;cACF,4B;aACD,4B;YACD,4B;aCG0B,uC;aCFnB,6C;oBACE,wC;sBACE,wC;qBACD,wC;eCJG,6C;eACH,wC;UACV,mC;kBACmB,qC;eACH,qC;kBACC,mC;eCHF,qC;sBACE,gC;wBACE,gC;uBACD,gC;eEAG,qC;iBACH,gC;YACV,2B;oBACkB,qC;iBACH,qC;oBACC,mC;eCTU,2CAAiB,Q;;;;"}